[
  {
    "content": "Home | Chai aur Docs\n  Skip to content        Chai aur Docs        YouTube Instagram LinkedIn GitHub X                                          Docs You’ll  Actually Read Next-gen docs that builds reading habits into your workflow.     Start Learning     Watch Tutorials       \n Have a question or want to get involved..?    Join our Discord     \n  Brought to you by ChaiCode            Chai aur Code is an unique initiative by Hitesh Choudhary where he mentors people who want to learn programming and grow in the field.Learn about ChaiCode         \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configu",
    "source": "https://docs.chaicode.com/youtube/getting-started/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything",
    "source": "https://docs.chaicode.com/youtube/getting-started/"
  },
  {
    "content": "rom the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate",
    "source": "https://docs.chaicode.com/youtube/getting-started/"
  },
  {
    "content": "ize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are ava",
    "source": "https://docs.chaicode.com/youtube/getting-started/"
  },
  {
    "content": "By following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next Welcome    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/getting-started/"
  },
  {
    "content": "Git behind the scenes | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx C",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/"
  },
  {
    "content": "ur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Git Snapshots    3 Musketeers of Git    Commit Object    Tree Object    Blob Object    Helpful commands    On this page   Overview    Git Snapshots    3 Musketeers of Git    Commit Object    Tree Object    Blob Object    Helpful commands           Git behind the scenes      Git is a version control system that allows you to track changes to your files and folders. It is a powerful tool that can help you manage your code more effectively. In this section, we will explore the basics of how git works internally.\nGit Snapshots\nA git snapshot is a poin",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/"
  },
  {
    "content": "and folders. It is a powerful tool that can help you manage your code more effectively. In this section, we will explore the basics of how git works internally.\nGit Snapshots\nA git snapshot is a point in time in the history of your code. It represents a specific version of your code, including all the files and folders that were present at that time. Each snapshot is identified by a unique hash code, which is a string of characters that represents the contents of the snapshot.\nA snapshot is not an image, it’s just a representation of the code at a specific point in time. Snapshot is a loose term that is used when git stores information about the code in a locally stored key-value based database. Everything is stored as an object and each object is identified by a unique hash code.\n3 Musketeers of Git\nThe three musketeers of git are:\n\nCommit Object\nTree Object\nBlob Object\n\nCommit Object\nEach commit in the project is stored in .git folder in the form of a commit object. A commit object",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/"
  },
  {
    "content": "teers of Git\nThe three musketeers of git are:\n\nCommit Object\nTree Object\nBlob Object\n\nCommit Object\nEach commit in the project is stored in .git folder in the form of a commit object. A commit object contains the following information:\n\nTree Object\nParent Commit Object\nAuthor\nCommitter\nCommit Message\n\nTree Object\nTree Object is a container for all the files and folders in the project. It contains the following information:\n\nFile Mode\nFile Name\nFile Hash\nParent Tree Object\n\nEverything is stored as key-value pairs in the tree object. The key is the file name and the value is the file hash.\nBlob Object\nBlob Object is present in the tree object and contains the actual file content. This is the place where the file content is stored.\n\nHelpful commands\nHere are some helpful commands that you can use to explore the git internals:\nTerminal windowgit show -s --pretty=raw \nGrab tree id from the above command and use it in the following command to get the tree object:\nTerminal windowgit ls-tree",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/"
  },
  {
    "content": "use to explore the git internals:\nTerminal windowgit show -s --pretty=raw \nGrab tree id from the above command and use it in the following command to get the tree object:\nTerminal windowgit ls-tree \nGrab tree id from the above command and use it in the following command to get the blob object:\nTerminal windowgit show \nGrab tree id from the above command and use it in the following command to get the commit object:\nTerminal windowgit cat-file -p \nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousTerminologyNext Branches in Git    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/"
  },
  {
    "content": "Git and GitHub | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configur",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/introduction/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Git and Github are different    A little on version control systems    Learning Path    Install Git    Account on Github    Conclusion    On this page   Overview    Git and Github are different    A little on version control systems    Learning Path    Install Git    Account on Github    Conclusion           Git and GitHub      Let’s start with the basics. Git is a version control system that allows you to track changes to your files and collaborate with others. It is used to manage the history of your code and to merge changes from different branches. I",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/introduction/"
  },
  {
    "content": "it is a version control system that allows you to track changes to your files and collaborate with others. It is used to manage the history of your code and to merge changes from different branches. I can understand that as of now these terms like version control, branches, and merges are not familiar to you. But don’t worry, we will learn them in this tutorial.\nGit and Github are different\nGit is a version control system that is used to track changes to your files. It is a free and open-source software that is available for Windows, macOS, and Linux. Remember, GIT is a software and can be installed on your computer.\nGithub is a web-based hosting service for Git repositories. Github is an online platform that allows you to store and share your code with others. It is a popular platform for developers to collaborate on projects and to share code. It is not that Github is the only provider of Git repositories, but it is one of the most popular ones.\nA little on version control systems\nVe",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/introduction/"
  },
  {
    "content": "developers to collaborate on projects and to share code. It is not that Github is the only provider of Git repositories, but it is one of the most popular ones.\nA little on version control systems\nVersion control systems are used to manage the history of your code. They allow you to track changes to your files and to collaborate with others. Version control systems are essential for software development. Consider version control as a checkpoint in game. You can move to any time in the game and you can always go back to the previous checkpoint. This is the same concept in software development.\nBefore Git became mainstream, version control systems were used by developers to manage their code. They were called SCCS (Source Code Control System). SCCS was a proprietary software that was used to manage the history of code. It was expensive and not very user-friendly. Git was created to replace SCCS and to make version control more accessible and user-friendly. Some commong version control s",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/introduction/"
  },
  {
    "content": "o manage the history of code. It was expensive and not very user-friendly. Git was created to replace SCCS and to make version control more accessible and user-friendly. Some commong version control systems are Subversion (SVN), CVS, and Perforce.\nLearning Path\nIn this tutorial, we will learn the basics of Git and Github. We will start with the basics and then move on to more advanced topics. We will also learn how to use Git and Github for collaboration and version control. By the end of this tutorial, you will have a good understanding of Git and Github and will be able to use them to manage your code effectively.\nWe will go in this jounney something like this:\n\nGet the basics\nUse it daily\nFace the problems\nSolve them\nLearn more\n\n\nWe will focus more on Git first, once you understand git, moving towards Github will be easy.\n\nInstall Git\nTo install Git, you can use command line or you can visit official website and download the installer for your operating system. Git is available for",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/introduction/"
  },
  {
    "content": "moving towards Github will be easy.\n\nInstall Git\nTo install Git, you can use command line or you can visit official website and download the installer for your operating system. Git is available for Windows, macOS, and Linux and is available at https://git-scm.com/downloads.\nAccount on Github\nAnother step that you have to follow is to create an account on Github. I will later walk you through the process of linking your Github account with your Machine. You cannot push your code to Github without ssh-key setup. Password authentication is not recommended and these days it is not possible to use it. So, you need to setup ssh-key authentication. We will cover that in a later part of the tutorial.\nConclusion\nIn this part, we have learned the basics of Git and Github. We have also learned how to install Git and Github. We have also learned about the importance of version control systems and how they are used in software development.\nStart your journey with ChaiCode \nAll of our courses are",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/introduction/"
  },
  {
    "content": "to install Git and Github. We have also learned about the importance of version control systems and how they are used in software development.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousWelcomeNext Terminology    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/introduction/"
  },
  {
    "content": "Branches in Git | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configu",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    HEAD in git    Creating a new branch    Merging branches     Fast-forward merge    3 Way merge    Managing conflicts      Rename a branch    Delete a branch    Checkout a branch    List all branches    Conclusion    On this page   Overview    HEAD in git    Creating a new branch    Merging branches     Fast-forward merge    3 Way merge    Managing conflicts      Rename a branch    Delete a branch    Checkout a branch    List all branches    Conclusion           Branches in Git      Branches are a way to work on different versions of a project at the sam",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "Rename a branch    Delete a branch    Checkout a branch    List all branches    Conclusion           Branches in Git      Branches are a way to work on different versions of a project at the same time. They allow you to create a separate line of development that can be worked on independently of the main branch. This can be useful when you want to make changes to a project without affecting the main branch or when you want to work on a new feature or bug fix.\n\nSome developers can work on Header, some can work on Footer, some can work on Content, and some can work on Layout. This is a good example of how branches can be used in git.\nHEAD in git\nThe HEAD is a pointer to the current branch that you are working on. It points to the latest commit in the current branch. When you create a new branch, it is automatically set as the HEAD of that branch.\n\nthe default branch used to be master, but it is now called main. There is nothing special about main, it is just a convention.\n\nCreating",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "ew branch, it is automatically set as the HEAD of that branch.\n\nthe default branch used to be master, but it is now called main. There is nothing special about main, it is just a convention.\n\nCreating a new branch\nTo create a new branch, you can use the following command:\nTerminal windowgit branchgit branch bug-fixgit switch bug-fixgit loggit switch maingit switch -c dark-modegit checkout orange-mode\nSome points to note:\n\ngit branch - This command lists all the branches in the current repository.\ngit branch bug-fix - This command creates a new branch called bug-fix.\ngit switch bug-fix - This command switches to the bug-fix branch.\ngit log - This command shows the commit history for the current branch.\ngit switch main - This command switches to the main branch.\ngit switch -c dark-mode - This command creates a new branch called dark-mode. the -c flag is used to create a new branch.\ngit checkout orange-mode - This command switches to the orange-mode branch.\n\n\nCommit before switching to a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "s command creates a new branch called dark-mode. the -c flag is used to create a new branch.\ngit checkout orange-mode - This command switches to the orange-mode branch.\n\n\nCommit before switching to a branch \nGo to .git folder and checkout to the HEAD file\n\nMerging branches\n\nMerging is about bringing changes from one branch to another.\nIn Git we have two types of merges :\n\nFast-Forward Merges (If branches have not diverged)\n3-Way Merges (if branches have diverged)\n\n\n\nFast-forward merge\nThis one is easy as branch that you are trying to merge is usually ahead and there are no conflicts.\nWhen you are done working on a branch, you can merge it back into the main branch. This is done using the following command:\nTerminal windowgit checkout maingit merge bug-fix\n\nSome points to note:\n\ngit checkout main - This command switches to the main branch.\ngit merge bug-fix - This command merges the bug-fix branch into the main branch.\n\nThis is a fast-forward merge. It means that the commits in the bug-",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "t main - This command switches to the main branch.\ngit merge bug-fix - This command merges the bug-fix branch into the main branch.\n\nThis is a fast-forward merge. It means that the commits in the bug-fix branch are directly merged into the main branch. This can be useful when you want to merge a branch that has already been pushed to the remote repository.\n3 Way merge\n\nIn this type of merge, the main branch has additional commits that are not present in the bug-fix branch. This is not a fast-forward merge. Here git looks at 3 different commits [common ancestor of branches + tips of each branch] and combines the changes into one merge commit.\nWhen you are done working on a branch, you can merge it back into the main branch. This is done using the following command:\nTerminal windowgit checkout maingit merge bug-fix\nIf the command are same, what is the difference between fast-forward and not fast-forward merge?\nThe difference is resolving the conflicts. In a fast-forward merge, there are",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "ut maingit merge bug-fix\nIf the command are same, what is the difference between fast-forward and not fast-forward merge?\nThe difference is resolving the conflicts. In a fast-forward merge, there are no conflicts. But in a not fast-forward merge, there are conflicts, and there are no shortcuts to resolve them.\nYou have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts.\n\nManaging conflicts\nThere is no magic button to resolve conflicts. You have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts. I personally use VSCode merge tool. Github also has a merge tool that can help you resolve the conflicts but most of the time I handle them in VSCode and it gives me all the options to resolve the conflicts.\nOverall it sounds scary to beginners but it is not, it’s all about communication and understa",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "cts but most of the time I handle them in VSCode and it gives me all the options to resolve the conflicts.\nOverall it sounds scary to beginners but it is not, it’s all about communication and understanding the code situation with your team members.\nRename a branch\nYou can rename a branch using the following command:\nTerminal windowgit branch -m  \nDelete a branch\nYou can delete a branch using the following command:\nTerminal windowgit branch -d \nCheckout a branch\nYou can checkout a branch using the following command:\nTerminal windowgit checkout \nCheckout a branch means that you are going to work on that branch. You can checkout any branch you want.\nList all branches\nYou can list all branches using the following command:\nTerminal windowgit branch\nList all branches means that you are going to see all the branches in your repository.\nConclusion\nIn this section, we have learned about the different types of merges and how to resolve conflicts. We have also learned about the importance of bran",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "see all the branches in your repository.\nConclusion\nIn this section, we have learned about the different types of merges and how to resolve conflicts. We have also learned about the importance of branching and merging in Git and Github.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousBehind the scenesNext Diff, Stash, Tags    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/branches/"
  },
  {
    "content": "Variables & Constants | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx C",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/"
  },
  {
    "content": "ur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Variables and Constants    Code used in Video    Going through the code    Summary    On this page   Overview    Variables and Constants    Code used in Video    Going through the code    Summary           Variables & Constants      In this chapter, we will learn about variables and constants in C++. We will start by learning about variables and how to declare and initialize them. Then, we will learn about constants and how to declare and initialize them.\nVariables and Constants\n\nVariables are used to store data in a program. They can be changed d",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/"
  },
  {
    "content": "o declare and initialize them. Then, we will learn about constants and how to declare and initialize them.\nVariables and Constants\n\nVariables are used to store data in a program. They can be changed during the execution of the program.\nConstants, on the other hand, are used to store data that cannot be changed during the execution of the program. They are declared using the const keyword.\n\nHere’s an example of declaring and initializing a variable:\nvariable.cppint age = 25;\nIn this example, we declare a variable named age and initialize it with the value 25. The int keyword is used to declare the variable as an integer.\nHere’s an example of declaring and initializing a constant:\nconstant.cppconst double PI = 3.14159;\nIn this example, we declare a constant named PI and initialize it with the value 3.14159. The const keyword is used to declare the constant as a constant.\nCode used in Video\nvariable-and-constants.cpp#include \nusing namespace std;\nint main(){\n    int score;    score = 110;",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/"
  },
  {
    "content": "e value 3.14159. The const keyword is used to declare the constant as a constant.\nCode used in Video\nvariable-and-constants.cpp#include \nusing namespace std;\nint main(){\n    int score;    score = 110;\n    const int uid = 232323;\n    int hiteshBalance = 500;    hiteshBalance = 1000;\n    uid = 1223;\n    cout << \"Welcome to chai with cpp 1\" << endl ;    cout << \"Welcome to chai with cpp 2\" << endl ;    cout << \"Welcome to chai with cpp 3\" << endl ;\n    return 0;}\nGoing through the code\n\nThe int score; line declares a variable named score of type int.\nThe score = 110; line assigns the value 110 to the score variable.\nThe const int uid = 232323; line declares a constant named uid of type int and assigns the value 232323 to it.\nThe int hiteshBalance = 500; line declares a variable named hiteshBalance of type int and assigns the value 500 to it.\nThe hiteshBalance = 1000; line assigns the value 1000 to the hiteshBalance variable.\nThe uid = 1223; line assigns the value 1223 to the uid constant.",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/"
  },
  {
    "content": "lance of type int and assigns the value 500 to it.\nThe hiteshBalance = 1000; line assigns the value 1000 to the hiteshBalance variable.\nThe uid = 1223; line assigns the value 1223 to the uid constant.\nThe cout << \"Welcome to chai with cpp 1\" << endl ; line prints the string “Welcome to chai with cpp 1” to the console.\nThe cout << \"Welcome to chai with cpp 2\" << endl ; line prints the string “Welcome to chai with cpp 2” to the console.\nThe cout << \"Welcome to chai with cpp 3\" << endl ; line prints the string “Welcome to chai with cpp 3” to the console.\n\nSummary\nIn this chapter, we have learned about variables and constants in C++. We have also learned how to declare and initialize variables and constants.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousFirst Program in C++Next Data Types    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/"
  },
  {
    "content": "el free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousFirst Program in C++Next Data Types    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/"
  },
  {
    "content": "SQL Joins and Keys | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Conf",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": "SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Types of Joins     Inner Join    Left Join    Right Join    Full Join    Cross Join      Keys in SQL     Primary Key    Foreign Key    Practical Example: Chai Store Database      Summary    On this page   Overview    Types of Joins     Inner Join    Left Join    Right Join    Full Join    Cross Join      Keys in SQL     Primary Key    Foreign Key    Practical Example: Chai Store Database      Summary           SQL Joins and Keys      In relational databases, joins are used to combine rows from two or more tables based on a related column between them",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": "tical Example: Chai Store Database      Summary           SQL Joins and Keys      In relational databases, joins are used to combine rows from two or more tables based on a related column between them. There are several types of joins, each designed for specific purposes. Joins are a way to combine data from multiple tables to create a single result set.\nTypes of Joins\nThere are several types of joins, each designed for specific purposes. Here are some common types of joins:\nInner Join\n\nUsed to combine rows from two tables based on a related column between them. It returns only the rows that have matching values in both tables.\nOnly rows that have matching values in both tables are returned.\n\nLeft Join\n\nUsed to combine rows from two tables based on a related column between them. It returns all rows from the left table, and the matching rows from the right table.\nIf there are no matching rows in the right table, NULL values are returned for the columns from the right table.\n\nRight Join",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": "all rows from the left table, and the matching rows from the right table.\nIf there are no matching rows in the right table, NULL values are returned for the columns from the right table.\n\nRight Join\n\nUsed to combine rows from two tables based on a related column between them. It returns all rows from the right table, and the matching rows from the left table.\nIf there are no matching rows in the left table, NULL values are returned for the columns from the left table.\n\nFull Join\n\nUsed to combine rows from two tables based on a related column between them. It returns all rows from both tables, and the matching rows from both tables.\nIf there are no matching rows in either table, NULL values are returned for the columns from the other table.\n\nCross Join\n\nUsed to combine rows from two tables based on a related column between them. It returns all possible combinations of rows from both tables.\nIf there are no matching rows in either table, NULL values are returned for the columns from the",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": "based on a related column between them. It returns all possible combinations of rows from both tables.\nIf there are no matching rows in either table, NULL values are returned for the columns from the other table.\n\nKeys in SQL\nIn SQL, keys are crucial for organizing and relating data between tables. There are two main types of keys:\nPrimary Key\n\nA column or set of columns that uniquely identifies each row in a table\nMust contain unique values and cannot be null\nOnly one primary key per table\nExample: customer_id, order_id, product_id\n\nForeign Key\n\nA column that creates a relationship between two tables\nReferences the primary key of another table\nCan have multiple foreign keys in a table\nMaintains referential integrity between tables\nExample: customer_id in orders table referencing customers table\n\n   Tip   Let’s understand primary and foreign keys through a practical example of a chai store database.  \nPractical Example: Chai Store Database\nWe’ll create four interconnected tables to de",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": "s table\n\n   Tip   Let’s understand primary and foreign keys through a practical example of a chai store database.  \nPractical Example: Chai Store Database\nWe’ll create four interconnected tables to demonstrate how keys work in a real scenario:\ncustomers table\nThe customers table stores information about each customer.\nCREATE TABLE customers (  customer_id SERIAL PRIMARY KEY,  customer_name VARCHAR(50),  contact_info VARCHAR(100));\nLet’s add some sample data to the chai_store table:\nINSERT INTO chai_store (chai_name, price, chai_type)VALUES ('Masala Chai', 30.00, 'Spiced'),       ('Green Chai', 25.00, 'Herbal'),       ('Black Chai', 20.00, 'Classic'),       ('Iced Chai', 35.00, 'Cold'),       ('Oolong Chai', 40.00, 'Specialty');\nchai_store table\nThe chai_store table stores information about the chai available in the store.\nCREATE TABLE chai_store (    chai_id SERIAL PRIMARY KEY,    chai_name VARCHAR(50),    price DECIMAL(5, 2),    chai_type VARCHAR(50));\nLet’s add some sample data to th",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": "the chai available in the store.\nCREATE TABLE chai_store (    chai_id SERIAL PRIMARY KEY,    chai_name VARCHAR(50),    price DECIMAL(5, 2),    chai_type VARCHAR(50));\nLet’s add some sample data to the chai_store table:\nINSERT INTO chai_store (chai_name, price, chai_type)VALUES ('Masala Chai', 30.00, 'Spiced'),       ('Green Chai', 25.00, 'Herbal'),       ('Black Chai', 20.00, 'Classic'),       ('Iced Chai', 35.00, 'Cold'),       ('Oolong Chai', 40.00, 'Specialty');\norders table\nThe orders table stores information about each order placed by customers.\nCREATE TABLE orders (  order_id SERIAL PRIMARY KEY,  customer_id INT,  order_date DATE,  FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\nLet’s add some sample data to the orders table:\nINSERT INTO orders (customer_id, order_date)VALUES (1, '2024-09-19'),       (2, '2024-09-18'),       (1, '2024-09-20'),       (4, '2024-09-17');\norder_items table\nThe order_items table stores information about each item in each order.\nCREATE T",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": ")VALUES (1, '2024-09-19'),       (2, '2024-09-18'),       (1, '2024-09-20'),       (4, '2024-09-17');\norder_items table\nThe order_items table stores information about each item in each order.\nCREATE TABLE order_items (  order_item_id SERIAL PRIMARY KEY,  order_id INT,  chai_id INT,  quantity INT,  price DECIMAL(5, 2),  FOREIGN KEY (order_id) REFERENCES orders(order_id),  FOREIGN KEY (chai_id) REFERENCES chai_store(chai_id));\nLet’s add some sample data to the order_items table:\nINSERT INTO order_items (order_id, chai_id, quantity, price)VALUES (1, 1, 2, 30.00),       (1, 2, 1, 25.00),       (2, 3, 2, 20.00),       (3, 1, 1, 30.00),       (4, 5, 3, 40.00);\nThis is our sample setup for the chai store database. This consists of four tables: customers , chai_store , orders , and order_items . Tables are storing data about customers, chai varieties, orders, and the items in each order. Tables are linked together using foreign keys.\nPrimary keys are used to uniquely identify each row in a tab",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": "ables are storing data about customers, chai varieties, orders, and the items in each order. Tables are linked together using foreign keys.\nPrimary keys are used to uniquely identify each row in a table. Foreign keys are used to establish relationships between tables. Foreign keys are used to link tables based on a related column between them.\nSummary\nIn this chapter, we have learned about the basics of SQL Joins. Also we have learned about Primary Key and Foreign Key.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 19, 2025   PreviousExercise - DB DesignNext Exercise - Joins    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/"
  },
  {
    "content": "Jinja Templates App in Django | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Installation    Common Template Tags      % if %    {% for %}    {% block %}    {% include %}    {% extends %}    {% load %}    {% static %}    {% url %}      Apps in Django     Templates in Apps and layout extension      Common Layout for all pages    Summary    On this page   Overview    Installation    Common Template Tags      % if %    {% for %}    {% block %}    {% include %}    {% extends %}    {% load %}    {% static %}    {% url %}      Apps in Django     Templates in Apps and layout extension      Common Layout for all pages    S",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "for %}    {% block %}    {% include %}    {% extends %}    {% load %}    {% static %}    {% url %}      Apps in Django     Templates in Apps and layout extension      Common Layout for all pages    Summary           Jinja Templates App in Django      Jinja2 is a template engine for Python. It is used in Django to render templates. It is a very powerful template engine that can be used to render HTML, XML, and other formats. It is also used to render templates for the Django admin interface.\nInstallation\nIf you are in Django, you don’t need to install Jinja2 separately. It is already installed with Django. Django also comes with a built-in template configurations that allows you to use Jinja2 templates.\nJinja2 templates are written in a simple text format called HTML. The syntax is very similar to HTML, but with some additional features. You need to inject variables into the template using the {{ variable }} syntax. For example, if you want to display a name, you can use the following",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "milar to HTML, but with some additional features. You need to inject variables into the template using the {{ variable }} syntax. For example, if you want to display a name, you can use the following code:\nHello {{ name }}!\nThis will display the name of the person who is currently logged in, if there is one.\nCommon Template Tags\nFollowing are some of the common template tags that you can use in Jinja2 templates:\n % if %\nThe  {% if %}  tag is used to conditionally display content in a template. It takes a boolean expression as an argument, and if the expression evaluates to True, the content inside the tag will be displayed. If the expression evaluates to False, the content will be skipped.\nFor example, the following code will display a greeting message only if the name variable is not empty:\n{% if name %}  Hello, {{ name }}!{% endif %}\n{% for %}\nThe {% for %} tag is used to iterate over a sequence of items. It takes a variable name and a sequence as arguments, and displays the content",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "y:\n{% if name %}  Hello, {{ name }}!{% endif %}\n{% for %}\nThe {% for %} tag is used to iterate over a sequence of items. It takes a variable name and a sequence as arguments, and displays the content inside the tag for each item in the sequence.\nFor example, the following code will display a list of names:\n{% for name in names %}  {{ name }} is a name.{% endfor %}\n{% block %}\nThe {% block %} tag is used to define a block of content that can be overridden in child templates. It takes a name as an argument, and defines a block with that name that can be overridden in child templates.\nFor example, the following code defines a base template that includes a header and a footer:\n  {% block title %}My Website{% endblock %}      {% block content %}      Welcome to my website!    {% endblock %}          {% block footer %}        Copyright © 2021      {% endblock %}     \nAnd the following code defines a child template that overrides the content block:\n{% extends \"base.html\" %}\n{% block title %}M",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "{% block footer %}        Copyright © 2021      {% endblock %}     \nAnd the following code defines a child template that overrides the content block:\n{% extends \"base.html\" %}\n{% block title %}My Website{% endblock %}\n{% block content %}  Welcome to my website! This is a child template.{% endblock %}\nIn this example, the content block in the child template overrides the content block in the base template, and the title block is not overridden.\n{% include %}\nThe {% include %} tag is used to include the contents of another template file. It takes a template name as an argument, and includes the contents of the template file in the current template.\nFor example, the following code includes the contents of a template file called header.html:\n{% include \"header.html\" %}\nThis will include the contents of the header.html template file in the current template.\n{% extends %}\nThe {% extends %} tag is used to extend a base template. It takes a template name as an argument, and extends the b",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "the contents of the header.html template file in the current template.\n{% extends %}\nThe {% extends %} tag is used to extend a base template. It takes a template name as an argument, and extends the base template with the contents of the template file.\nFor example, the following code extends the base.html template with the contents of a template file called child.html:\n{% extends \"base.html\" %}\n{% block content %}  Welcome to my website! This is a child template.{% endblock %}\nIn this example, the content block in the child template overrides the content block in the base template, and the title block is not overridden.\n{% load %}\nThe {% load %} tag is used to load a template tag library. It takes a library name as an argument, and loads the template tag library with that name.\nFor example, the following code loads the static template tag library:\n{% load static %}\nThis will load the static template tag library, which provides a set of template tags for working with static files.\n{% st",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": ", the following code loads the static template tag library:\n{% load static %}\nThis will load the static template tag library, which provides a set of template tags for working with static files.\n{% static %}\nThe {% static %} tag is used to include a static file in a template. It takes a file path as an argument, and includes the contents of the file in the current template.\nFor example, the following code includes the contents of a CSS file called style.css:\n\nThis will include the contents of the style.css file in the current template.\n{% url %}\nThe {% url %} tag is used to generate a URL for a view. It takes a view name and a set of arguments as arguments, and generates a URL for the view with those arguments.\nFor example, the following code generates a URL for the index view with the name argument set to 'John':\nGo to the home page\nThis will generate a link to the home page with the name argument set to 'John'.\nApps in Django\nThe most common way to organize your Django project is to",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "e argument set to 'John':\nGo to the home page\nThis will generate a link to the home page with the name argument set to 'John'.\nApps in Django\nThe most common way to organize your Django project is to use apps. An app is a self-contained module that contains models, views, templates, and other components of your project. Apps allow you to organize your code into logical units and make it easier to manage and maintain your project.\nYou can create it manually or use the startapp command to create a new app for you. To create an app, navigate to the directory where you want to create the app and run the following command:\nTerminal windowpython manage.py startapp chai\nThis will create a new directory called chai with the necessary files and directories for an app.\nTo add an app to your project, you need to add it to the INSTALLED_APPS setting in your project’s settings.py file. You can do this by adding the app’s name to the list of installed apps:\nINSTALLED_APPS = [    'django.contrib.admi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "you need to add it to the INSTALLED_APPS setting in your project’s settings.py file. You can do this by adding the app’s name to the list of installed apps:\nINSTALLED_APPS = [    'django.contrib.admin',    'django.contrib.auth',    'django.contrib.contenttypes',    'django.contrib.sessions',    'django.contrib.messages',    'django.contrib.staticfiles',    'chai',]\nThis will add the chai app to your project’s installed apps.\nTemplates in Apps and layout extension\nIn Django, templates are organized into apps. Each app can have its own templates directory, which contains the templates for that app. Create a new directory called templates in your app’s directory. Inside the chai directory, create a templates directory and add a all_chai.html file to it.\nAdd your basic html code to the all_chai.html file.\nTo serve this file, we need a view and a url. Create a new file called views.py in your app’s directory. Add the following code to the file:\nviews.pyfrom django.shortcuts import render\nd",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "ai.html file.\nTo serve this file, we need a view and a url. Create a new file called views.py in your app’s directory. Add the following code to the file:\nviews.pyfrom django.shortcuts import render\ndef all_chai(request):    return render(request, 'all_chai.html')\nThis view will render the all_chai.html template when it is called.\nCreate a new file called urls.py in your app’s directory. Add the following code to the file:\nurls.pyfrom django.urls import pathfrom . import views\nurlpatterns = [    path('', views.all_chai, name='all_chai'),]\nThis urlpattern will map the root URL of the app to the all_chai view.\nNow, we need to make aware of this new urlpattern in our project’s urls.py file. Add the following code to the project’s urls.py file:\nurls.pyfrom django.contrib import adminfrom django.urls import path, include\nurlpatterns = [    path('admin/', admin.site.urls),    path('chai/', include('chai.urls')),]\nThis will include the chai.urls file in the project’s urlpatterns.\nNow, we can",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "o.urls import path, include\nurlpatterns = [    path('admin/', admin.site.urls),    path('chai/', include('chai.urls')),]\nThis will include the chai.urls file in the project’s urlpatterns.\nNow, we can access the all_chai view by going to http://localhost:8000/chai/.\nCommon Layout for all pages\nIn Django, you can create a common layout for all pages in your project by using the base.html template. Create a new file called base.html in your project’s templates directory. Add the following code to the file:\nbase.html{% load static %}\n   \n    {% block title %}      Chai aur Django    {% endblock title %}   I will add it later  {% block content %}  {% endblock %}\nNow, this layout can be used for all pages in your project. To use it, you need to include it in your templates. For example, if you want to use the layout for the all_chai view, you can add the following code to the all_chai.html file:\nall_chai.html{% extends \"base.html\" %}\n{% block title %}  All Chai{% endblock %}\n{% block content",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "ant to use the layout for the all_chai view, you can add the following code to the all_chai.html file:\nall_chai.html{% extends \"base.html\" %}\n{% block title %}  All Chai{% endblock %}\n{% block content %}  All Chai This is the all chai page.{% endblock %}\nThis will use the base.html layout and override the title and content blocks with the appropriate values for the all_chai view.\nSummary\nIn this part, we learned about Jinja2 templates and how to use them in Django. We also learned about apps in Django and how to create a common layout for all pages in your project. By using Jinja2 templates and apps, you can create dynamic and reusable templates in Django that make your web development process more efficient and enjoyable.\nFollow chai aur Django to learn more about Django and its features on youtube.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 18, 2025   PreviousDj",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "on youtube.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 18, 2025   PreviousDjango IntroNext Tailwind Integration    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/"
  },
  {
    "content": "Data Types | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuratio",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Basic Data Types    Primitive Data Types    Code Used in Video    Modifier Code in Video    String Code in Video    Type Casting Code in Video    User input code in Video    Summary    On this page   Overview    Basic Data Types    Primitive Data Types    Code Used in Video    Modifier Code in Video    String Code in Video    Type Casting Code in Video    User input code in Video    Summary           Data Types      In this chapter, we will learn about data types in C++. We will start by learning about the basic data types in C++ and how to use them. Data ty",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "nput code in Video    Summary           Data Types      In this chapter, we will learn about data types in C++. We will start by learning about the basic data types in C++ and how to use them. Data types are used to define the type of data that a variable can hold. They are an important concept in programming and are used to ensure that the data is stored and used correctly.\nBasic Data Types\nC++ provides several basic data types that are used to define the type of data that a variable can hold. Some of the basic data types in C++ include:\n\nPrimitive Data Types: These are the basic data types that are used to define the type of data that a variable can hold. Some of the primitive data types in C++ include:\nDerived Data Types: These are the data types that are derived from other data types.\nUser-Defined Data Types: These are the data types that are defined by the user.\n\n\nIn this chapter, we will focus on the primitive data types and how to use them.\nPrimitive Data Types\nC++ provides seve",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "User-Defined Data Types: These are the data types that are defined by the user.\n\n\nIn this chapter, we will focus on the primitive data types and how to use them.\nPrimitive Data Types\nC++ provides several primitive data types that are used to define the type of data that a variable can hold. Some of the primitive data types in C++ include:\n\nint: This is a signed integer data type that can hold values from -2147483648 to 2147483647.\nfloat: This is a floating-point data type that can hold values with a precision of 6 decimal places.\ndouble: This is a floating-point data type that can hold values with a precision of 15 decimal places.\nchar: This is a character data type that can hold a single character.\nbool: This is a boolean data type that can hold either true or false.\nvoid: This is a data type that is used to indicate that a function does not return a value.\n\nWe have some additional data types that are primitives but are less discussed from academic perspective. These include:\n\nshort:",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "type that is used to indicate that a function does not return a value.\n\nWe have some additional data types that are primitives but are less discussed from academic perspective. These include:\n\nshort: This is a signed integer data type that can hold values from -32768 to 32767.\nlong: This is a signed integer data type that can hold values from -2147483648 to 2147483647.\nlong long: This is a signed integer data type that can hold values from -9223372036854775808 to 9223372036854775807.\nunsigned char: This is an unsigned integer data type that can hold values from 0 to 255.\nunsigned short: This is an unsigned integer data type that can hold values from 0 to 65535.\nunsigned int: This is an unsigned integer data type that can hold values from 0 to 4294967295.\nunsigned long: This is an unsigned integer data type that can hold values from 0 to 4294967295.\nunsigned long long: This is an unsigned integer data type that can hold values from 0 to 18446744073709551615.\n\nCode Used in Video\nprimitiv",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "integer data type that can hold values from 0 to 4294967295.\nunsigned long long: This is an unsigned integer data type that can hold values from 0 to 18446744073709551615.\n\nCode Used in Video\nprimitive-data-types.cpp#include using namespace std;\nint main(){    int teaLeaves = 50;    float waterTemperature = 85.588588;    double priceOfTea = 299.99;    char teaGrade = 'A';    bool isTeaReady = false;\n    cout << waterTemperature << endl;\n    return 0;}\nLet’s go through the code line by line:\n\nThe int teaLeaves = 50; line declares a variable named teaLeaves of type int and assigns the value 50 to it.\nThe float waterTemperature = 85.588588; line declares a variable named waterTemperature of type float and assigns the value 85.588588 to it.\nThe double priceOfTea = 299.99; line declares a variable named priceOfTea of type double and assigns the value 299.99 to it.\nThe char teaGrade = 'A'; line declares a variable named teaGrade of type char and assigns the value 'A' to it.\nThe bool isTeaRea",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "ble named priceOfTea of type double and assigns the value 299.99 to it.\nThe char teaGrade = 'A'; line declares a variable named teaGrade of type char and assigns the value 'A' to it.\nThe bool isTeaReady = false; line declares a variable named isTeaReady of type bool and assigns the value false to it.\nThe cout << waterTemperature << endl; line prints the value of the waterTemperature variable to the console.\n\nModifier Code in Video\nmodifier-code.cpp#include using namespace std;\nint main(){    unsigned smallTeaPack = 1200;    long long largeTeaStorage = 100000000;    short teaSample = 25;\n    cout << largeTeaStorage << endl;\n    return 0;}\nLet’s go through the code line by line:\n\nThe unsigned smallTeaPack = 1200; line declares a variable named smallTeaPack of type unsigned and assigns the value 1200 to it.\nThe long long largeTeaStorage = 100000000; line declares a variable named largeTeaStorage of type long long and assigns the value 100000000 to it.\nThe short teaSample = 25; line declar",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "lue 1200 to it.\nThe long long largeTeaStorage = 100000000; line declares a variable named largeTeaStorage of type long long and assigns the value 100000000 to it.\nThe short teaSample = 25; line declares a variable named teaSample of type short and assigns the value 25 to it.\nThe cout << largeTeaStorage << endl; line prints the value of the largeTeaStorage variable to the console.\n\nString Code in Video\nstring.cpp#include #include using namespace std;\nint main(){    string favoriteTea = \"Lemon Tea \\t\";    string description = \"Known as \\\"best\\\" tea\";\n    cout << favoriteTea << description << endl;\n    return 0;}\nLet’s go through the code line by line:\n\nThe string favoriteTea = \"Lemon Tea \\t\"; line declares a variable named favoriteTea of type string and assigns the value \"Lemon Tea \\t\" to it.\nThe string description = \"Known as \\\"best\\\" tea\"; line declares a variable named description of type string and assigns the value \"Known as \\\"best\\\" tea\" to it.\nThe cout << favoriteTea << descriptio",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": ".\nThe string description = \"Known as \\\"best\\\" tea\"; line declares a variable named description of type string and assigns the value \"Known as \\\"best\\\" tea\" to it.\nThe cout << favoriteTea << description << endl; line prints the value of the favoriteTea and description variables to the console.\n\nType Casting Code in Video\nType casting is the process of converting a value from one data type to another data type.\ntype-casting.cpp#include using namespace std;\nint main(){    float teaPrice = 49.99;    int roundedTeaPrice = (int) teaPrice;\n    int teaQuantity = 2;    int totalPrice = teaPrice * teaQuantity;\n    cout << totalPrice << endl;\n    return 0;}\nLet’s go through the code line by line:\n\nThe float teaPrice = 49.99; line declares a variable named teaPrice of type float and assigns the value 49.99 to it.\nThe int roundedTeaPrice = (int) teaPrice; line declares a variable named roundedTeaPrice of type int and assigns the value 49 to it.\nThe int teaQuantity = 2; line declares a variable name",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "49.99 to it.\nThe int roundedTeaPrice = (int) teaPrice; line declares a variable named roundedTeaPrice of type int and assigns the value 49 to it.\nThe int teaQuantity = 2; line declares a variable named teaQuantity of type int and assigns the value 2 to it.\nThe int totalPrice = teaPrice * teaQuantity; line declares a variable named totalPrice of type int and assigns the value 98 to it.\nThe cout << totalPrice << endl; line prints the value of the totalPrice variable to the console.\n\nUser input code in Video\nuser-input.cpp#include #include \nusing namespace std;\nint main(){    string userTea;    int teaQuantity;\n    cout << \"What would you like to order in tea? \\n\";    getline(cin, userTea);\n    //ask for quantity    cout << \"how many cups of \" << userTea << \"would you like to have ? \";    cin >> teaQuantity;\n    cout << teaQuantity;    cout << userTea;\n    return 0;}\nLet’s go through the code line by line:\n\n#include  line includes the string header file, which provides the string data typ",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": ">> teaQuantity;\n    cout << teaQuantity;    cout << userTea;\n    return 0;}\nLet’s go through the code line by line:\n\n#include  line includes the string header file, which provides the string data type.\nThe string userTea; line declares a variable named userTea of type string and does not assign a value to it.\nThe int teaQuantity; line declares a variable named teaQuantity of type int and does not assign a value to it.\nThe cout << \"What would you like to order in tea? \\n\"; line prints the string “What would you like to order in tea?” to the console.\nThe getline(cin, userTea); line reads a line of input from the console and assigns it to the userTea variable.\nThe cout << \"how many cups of \" << userTea << \"would you like to have ? \"; line prints the string “how many cups of ” followed by the value of the userTea variable followed by the string “would you like to have ? ” to the console.\nThe cin >> teaQuantity; line reads an integer from the console and assigns it to the teaQuantity varia",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "value of the userTea variable followed by the string “would you like to have ? ” to the console.\nThe cin >> teaQuantity; line reads an integer from the console and assigns it to the teaQuantity variable.\nThe cout << teaQuantity; line prints the value of the teaQuantity variable to the console.\nThe cout << userTea; line prints the value of the userTea variable to the console.\n\nSummary\nIn this chapter, we have learned about data types in C++. We have also learned about the primitive data types and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousVariables & ConstantsNext Operators    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/data-types/"
  },
  {
    "content": "Introduction | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configurat",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    What is C++?    Why C++?    C++ Syntax    C++ Features    History of C++    C++ over the years    C++ Compilers    C++ IDEs    C++ Standard Library    Summary    On this page   Overview    What is C++?    Why C++?    C++ Syntax    C++ Features    History of C++    C++ over the years    C++ Compilers    C++ IDEs    C++ Standard Library    Summary           Introduction      In this chapter, we will get familiar with the C++ language and its features. We will learn about the C++ standard library and some of its most commonly used classes and functions.\nWhat",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "oduction      In this chapter, we will get familiar with the C++ language and its features. We will learn about the C++ standard library and some of its most commonly used classes and functions.\nWhat is C++?\nC++ is a general-purpose programming language that was developed by Bjarne Stroustrup in the 1980s. It is an extension of the C programming language and is designed to be more efficient, powerful, and easier to use. C++ is used for developing a wide range of applications, including operating systems, games, and scientific simulations.\nWhy C++?\nC++ is a powerful language that offers several advantages over C:\n\nPerformance: C++ is generally faster than C, especially for tasks that require high performance.\nMemory Management: C++ provides automatic memory management, which helps prevent memory leaks and other memory-related issues.\nObject-Oriented Programming: C++ supports object-oriented programming, which allows for the creation of modular and reusable code.\nStandardization: C++ is",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "emory leaks and other memory-related issues.\nObject-Oriented Programming: C++ supports object-oriented programming, which allows for the creation of modular and reusable code.\nStandardization: C++ is part of the C++ standard library, which provides a set of classes and functions that can be used to develop applications.\n\nC++ Syntax\nC++ code is written in a similar way to C code, but with some additional features. Here are some key differences between C and C++:\n\nPreprocessor Directives: In C, preprocessor directives are used to include header files and perform other tasks. In C++, preprocessor directives are used to perform compile-time operations.\nNamespaces: In C++, namespaces are used to organize code into logical groups and provide a way to avoid naming conflicts.\nClasses and Objects: In C, classes are used to define objects with their own data and functions. In C++, classes are used to define objects with their own data and functions, and objects are created from classes.\nInherita",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "In C, classes are used to define objects with their own data and functions. In C++, classes are used to define objects with their own data and functions, and objects are created from classes.\nInheritance: In C, inheritance is achieved through the use of pointers and casting. In C++, inheritance is achieved through the use of classes and objects.\n\nC++ Features\nC++ offers several features that make it a powerful language for developing applications:\n\nObject-Oriented Programming: C++ supports object-oriented programming, which allows for the creation of modular and reusable code.\nPlatform-Independence: C++ is platform-independent, which means that the same code can be compiled and run on different platforms without modifications.\nMemory Management: C++ provides automatic memory management, which helps prevent memory leaks and other memory-related issues.\nStatically Typed: C++ is statically typed, which means that the type of a variable is determined at compile-time.\nSpeed: C++ is generall",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "ich helps prevent memory leaks and other memory-related issues.\nStatically Typed: C++ is statically typed, which means that the type of a variable is determined at compile-time.\nSpeed: C++ is generally a faster language, especially for tasks that require high performance.\nPointers and References: C++ supports pointers and references, which allow for more efficient memory management and manipulation.\n\nHistory of C++\nC++ was developed by Bjarne Stroustrup as a thesis project in the late 1980s. In his Ph.D. thesis, Stroustrup tried Simula to inject Object Oriented Programming (OOP) into the language. However, he found that the language was too complex and difficult to use, so he decided to develop his own language.\nThe first version of C++ was released in 1989, and it was called “C with Classes”. It was a significant departure from C, as it introduced classes and objects, which allowed for more modular and reusable code. C++ quickly gained popularity and became the de facto standard for C",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "es”. It was a significant departure from C, as it introduced classes and objects, which allowed for more modular and reusable code. C++ quickly gained popularity and became the de facto standard for C programming.\nOver the years, C++ has evolved and gained new features and improvements. It has become a powerful language for developing a wide range of applications, including operating systems, games, and scientific simulations.\nC++ over the years\nC++ has undergone several major revisions and improvements over the years. Some of the key changes include:\n\nC++98: C++98 was released in 1998 and introduced several new features, such as the use of namespaces, templates, and exceptions.\nC++03: C++03 was released in 2003 and introduced several new features, such as the use of rvalue references, move semantics, and the new standard library.\nC++11: C++11 was released in 2011 and introduced several new features, such as the use of lambda expressions, the new standard library, and the introduction",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "e semantics, and the new standard library.\nC++11: C++11 was released in 2011 and introduced several new features, such as the use of lambda expressions, the new standard library, and the introduction of the auto keyword.\nC++14: C++14 was released in 2014 and introduced several new features, such as the use of the constexpr keyword, the introduction of the std::experimental namespace, and the introduction of the std::string_view class.\nC++17: C++17 was released in 2017 and introduced several new features, such as the use of the std::any class, the introduction of the std::optional class, and the introduction of the std::variant class.\nC++20: C++20 is currently in development and is expected to introduce several new features, such as the introduction of the std::span class, the introduction of the std::string_view class, and the introduction of the std::bit class.\n\nC++ Compilers\nC++ compilers are software tools that are used to compile C++ code into machine code that can be executed by a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "of the std::string_view class, and the introduction of the std::bit class.\n\nC++ Compilers\nC++ compilers are software tools that are used to compile C++ code into machine code that can be executed by a computer. Some popular C++ compilers include:\n\nGCC: GCC is a popular open-source C++ compiler that is used to compile C++ code on Linux and other Unix-like operating systems.\nClang: Clang is a popular open-source C++ compiler that is used to compile C++ code on macOS and other Unix-like operating systems.\nMSVC: MSVC is a popular open-source C++ compiler that is used to compile C++ code on Windows.\n\nC++ IDEs\nC++ IDEs are software tools that are used to develop C++ applications. Some popular C++ IDEs include:\n\nVisual Studio: Visual Studio is a popular integrated development environment (IDE) for C++ development on Windows.\nCode::Blocks: Code::Blocks is a free and open-source IDE for C++ development on Windows.\nEclipse: Eclipse is a popular open-source IDE for C++ development on Linux and ot",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "r C++ development on Windows.\nCode::Blocks: Code::Blocks is a free and open-source IDE for C++ development on Windows.\nEclipse: Eclipse is a popular open-source IDE for C++ development on Linux and other Unix-like operating systems.\nCLion: CLion is a commercial IDE for C++ development on Windows and macOS.\nVS Code: VS Code is what we will use in this course, with some extensions to make it easier to use.\n\nC++ Standard Library\nThe C++ standard library provides a set of classes and functions that can be used to develop applications. Some of the most commonly used classes and functions in the C++ standard library include:\n\nStrings: The string class is used to store and manipulate strings.\nVectors: The vector class is used to store and manipulate dynamic arrays.\nMaps: The map class is used to store and manipulate key-value pairs.\nAlgorithms: The algorithm library provides a set of functions for performing common operations on containers, such as sorting and searching.\nInput/Output: The ios",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "store and manipulate key-value pairs.\nAlgorithms: The algorithm library provides a set of functions for performing common operations on containers, such as sorting and searching.\nInput/Output: The iostream library provides classes and functions for performing input and output operations.\n\nSummary\nIn this chapter, we have learned about C++ and its syntax. We have also learned about the C++ standard library and some of its most commonly used classes and functions.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousWelcomeNext First Program in C++    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/introduction/"
  },
  {
    "content": "Diff, Stash and Tags | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Co",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "r SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Git diff     How to Read the Diff Output    Comparing Working Directory and Staging Area    Comparing Staging Area with Repository    Comparing Two Branches    Comparing Specific Commits:      Git Stash     Naming the stash    View the stash list    Apply the Most Recent Stash    Apply Specific Stash    Applying and Drop a Stash    Drop the stash    Applying stash to a specific branch    Clearing the stash      Git Tags     Creating a tag    Create an annotated tag    List all tags    Tagging a specific commit    Push tags to remote repository    D",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "plying stash to a specific branch    Clearing the stash      Git Tags     Creating a tag    Create an annotated tag    List all tags    Tagging a specific commit    Push tags to remote repository    Delete a tag    Delete tag on remote repository      On this page   Overview    Git diff     How to Read the Diff Output    Comparing Working Directory and Staging Area    Comparing Staging Area with Repository    Comparing Two Branches    Comparing Specific Commits:      Git Stash     Naming the stash    View the stash list    Apply the Most Recent Stash    Apply Specific Stash    Applying and Drop a Stash    Drop the stash    Applying stash to a specific branch    Clearing the stash      Git Tags     Creating a tag    Create an annotated tag    List all tags    Tagging a specific commit    Push tags to remote repository    Delete a tag    Delete tag on remote repository             Diff, Stash and Tags      This guide will help you understand the different commands related to diff, tags a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "sh tags to remote repository    Delete a tag    Delete tag on remote repository             Diff, Stash and Tags      This guide will help you understand the different commands related to diff, tags and stash in git. These are not main stream commands but they are very useful in certain situations.\nGit diff\nThe git diff is an informative command that shows the differences between two commits. It is used to compare the changes made in one commit with the changes made in another commit. Git consider the changed versions of same file as two different files. Then it gives names to these two files and shows the differences between them.\nHow to Read the Diff Output\n\na/ – the original file (before changes)\nb/ – the updated file (after changes)\n--- – marks the beginning of the original file\n+++ – marks the beginning of the updated file\n@@ – shows the line numbers and position of changes\n\nHere the file A and file B are the same file but different versions.\nGit will show you the changes made in",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "marks the beginning of the updated file\n@@ – shows the line numbers and position of changes\n\nHere the file A and file B are the same file but different versions.\nGit will show you the changes made in the file A and file B. It will also show you the line number where the change occurred along with little preview of the change.\nComparing Working Directory and Staging Area\nTerminal windowgit diff\nThis command shows the unstaged changes in your working directory compared to the staging area. This command alone will not show you the changes made in the file A and file B, you need to provide options to show the changes.\nComparing Staging Area with Repository\nTerminal windowgit diff --staged\nThis command shows the changes between your last commit and the staging area (i.e., changes that are staged and ready to be committed).\nComparing Two Branches\nTerminal windowgit diff  \nThis command compares the difference between two branches.\nAnother way to compare the difference between two branches is",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "d and ready to be committed).\nComparing Two Branches\nTerminal windowgit diff  \nThis command compares the difference between two branches.\nAnother way to compare the difference between two branches is to use the following command:\nTerminal windowgit diff branch-name-one..branch-name-two\nComparing Specific Commits:\nTerminal windowgit diff  \nThis command compares the difference between two commits.\nGit Stash\nStash is a way to save your changes in a temporary location. It’s useful when switching branches without losing work. You can then come back to the file later and apply the changes.\n\nConflicting changes will not allow you to switch branches without committing the changes. Another alternative is to use the git stash command to save your changes in a temporary location.\n\nTerminal windowgit stash\nThis command saves your changes in a temporary location. It is like a stack of changes that you can access later.\nNaming the stash\nYou can also name the stash by using the following command:\nTer",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "stash\nThis command saves your changes in a temporary location. It is like a stack of changes that you can access later.\nNaming the stash\nYou can also name the stash by using the following command:\nTerminal windowgit stash save \"work in progress on X feature\"\nView the stash list\nYou can view the list of stashes by using the following command:\nTerminal windowgit stash list\nApply the Most Recent Stash\nYou can apply the stash by using the following command:\nTerminal windowgit stash apply\nApply Specific Stash\nYou can apply the specific stash by using the following command:\nTerminal windowgit stash apply stash@{0}\nHere stash@{0} is the name of the stash. You can use the git stash list command to get the name of the stash.\nApplying and Drop a Stash\nYou can apply and drop the stash by using the following command:\nTerminal windowgit stash pop\nThis command applies the stash and drops it from the stash list.\nDrop the stash\nYou can drop the stash by using the following command:\nTerminal windowgit",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "llowing command:\nTerminal windowgit stash pop\nThis command applies the stash and drops it from the stash list.\nDrop the stash\nYou can drop the stash by using the following command:\nTerminal windowgit stash drop\nApplying stash to a specific branch\nYou can apply the stash to a specific branch by using the following command:\nTerminal windowgit stash apply stash@{0} \nClearing the stash\nYou can clear the stash by using the following command:\nTerminal windowgit stash clear\nGit Tags\nTags are a way to mark a specific point in your repository. They are useful when you want to remember a specific version of your code or when you want to refer to a specific commit. Tags are like sticky notes that you can attach to your commits.\nCreating a tag\nYou can create a tag using the following command:\nTerminal windowgit tag \nThis command creates a new tag with the specified name. The tag will be attached to the current commit.\nCreate an annotated tag\nYou can create an annotated tag using the following comm",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "windowgit tag \nThis command creates a new tag with the specified name. The tag will be attached to the current commit.\nCreate an annotated tag\nYou can create an annotated tag using the following command:\nTerminal windowgit tag -a  -m \"Release 1.0\"\nThis command creates an annotated tag with the specified name and message. The tag will be attached to the current commit.\nList all tags\nYou can list all tags using the following command:\nTerminal windowgit tag\nThis command lists all the tags in your repository.\nTagging a specific commit\nYou can tag a specific commit using the following command:\nTerminal windowgit tag  \nPush tags to remote repository\nYou can push tags to a remote repository using the following command:\nTerminal windowgit push origin \nDelete a tag\nYou can delete a tag using the following command:\nTerminal windowgit tag -d \nDelete tag on remote repository\nYou can delete a tag on a remote repository using the following command:\nTerminal windowgit push origin :\nConclusion\nIn thi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "ollowing command:\nTerminal windowgit tag -d \nDelete tag on remote repository\nYou can delete a tag on a remote repository using the following command:\nTerminal windowgit push origin :\nConclusion\nIn this section, we explored how to use Git’s diff, stash, and tags commands. Though not used as frequently as add, commit, or push, they are incredibly helpful in debugging, context switching, and release management. See you next tutorial.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousBranches in GitNext Managing History    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/"
  },
  {
    "content": "About Github | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configurat",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    What is Github?    Github Account    Configuring Git    Setup SSH Key    Publish Code to Remote Repository     Remote URL Setting    Add Remote Repository    Pushing Code    Setup an upstream remote      Get code from remote repository     Fetch code    Pull code      Conclusion    On this page   Overview    What is Github?    Github Account    Configuring Git    Setup SSH Key    Publish Code to Remote Repository     Remote URL Setting    Add Remote Repository    Pushing Code    Setup an upstream remote      Get code from remote repository     Fetch code",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "Setup SSH Key    Publish Code to Remote Repository     Remote URL Setting    Add Remote Repository    Pushing Code    Setup an upstream remote      Get code from remote repository     Fetch code    Pull code      Conclusion           About Github      This guide will help you get started with Github.\nWhat is Github?\nGithub is a web-based Git repository hosting service. It is a popular platform for developers to collaborate on projects and to share code. Github provides a user-friendly interface for managing and tracking changes to your code, as well as a platform for hosting and sharing your projects with others.\nSome other alternative of Github are:\n\nGitlab\nBitbucket\nAzure Repos\nGitea\n\nBut mainstream popular tool these days is Github.\nGithub Account\nCreating a Github account is free and easy. You can create an account by visiting the Github website and clicking on the “Sign up” button. You will be prompted to enter your email address and password, and then you will be redirected t",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "nd easy. You can create an account by visiting the Github website and clicking on the “Sign up” button. You will be prompted to enter your email address and password, and then you will be redirected to the Github homepage.\nOnce you have created an account, you can start using Github to host and collaborate on your projects. Github provides a variety of features and tools that make it easy to manage and track your code, including issues, pull requests, and code reviews.\nConfiguring Git\nIf you haven’t done it already, you need to configure your git config file. You can do this by running the following command:\nTerminal windowgit config --global user.email \"[email protected]\"git config --global user.name \"Your Name\"\nThis will set your email and name as your global settings. You can change these settings at any time by running the same command again.\nNow you can check your config settings:\nTerminal windowgit config --list\nThis will show you all the settings that you have changed.\nSetup SSH",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "se settings at any time by running the same command again.\nNow you can check your config settings:\nTerminal windowgit config --list\nThis will show you all the settings that you have changed.\nSetup SSH Key\nIf you haven’t done it already, you need to setup ssh key and add it to your github account. You can do this by following the instructions on the Github website.\nYou can find the exact steps on the website for both Windows and MacOS. The steps are same for both, only apple users need to add the ssh key to their keychain.\n\n\nGenerate a new SSH key\nTo generate a new SSH key, open the terminal and run the following command:\nTerminal windowssh-keygen -t ed25519 -C \"[email protected]\"\nHere ed25519 is the type of key that you are generating. This creates a new SSH key, using the provided email as label.\n\n\nSave the key\nAfter generating the key, you need to save it to your computer. You can do this by running the following command:\n\nEnter a file in which to save the key (/Users/YOU/.ssh/id_ALG",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "s label.\n\n\nSave the key\nAfter generating the key, you need to save it to your computer. You can do this by running the following command:\n\nEnter a file in which to save the key (/Users/YOU/.ssh/id_ALGORITHM): [Press enter]\n\nAt the prompt you can enter passphrase for the key or you can leave it blank. If you leave it blank, the key will be saved without a passphrase.\n\n\nAdd key to your ssh-agent\nAfter saving the key, you need to add it to your ssh-agent. You can do this by running the following command:\nHere it is best to refer above link for more information, as Github has a lot of information on this. There is no point in repeating it here.\n\n\nAdd key to github\nUse the web ui to add the key to your github account. You can do this by following the instructions on the Github website.\n\n\nPublish Code to Remote Repository\nNow that you have setup your ssh key and added it to your github account, you can start pushing your code to the remote repository.\nCreate a new Repo on your system first,",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "h Code to Remote Repository\nNow that you have setup your ssh key and added it to your github account, you can start pushing your code to the remote repository.\nCreate a new Repo on your system first, add some code and commit it.\nTerminal windowgit initgit add git commit -m \"commit message\"\nRemote URL Setting\nYou can check the remote url setting by running the following command:\nTerminal windowgit remote -v\nThis will show you the remote url of your repository.\nAdd Remote Repository\nYou can add a remote repository by running the following command:\n\ngit remote add origin \n\nHere  is the url of the remote repository that you want to add and origin is the name of the remote repository. This origin is used to refer to the remote repository in the future.\nTerminal windowgit remote add origin https://github.com/hiteshchoudhary/chai-something.git\nPushing Code\n\ngit push remote-name branch-name\n\nHere remote-name is the name of the remote repository that you want to push to and branch-name is the n",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "://github.com/hiteshchoudhary/chai-something.git\nPushing Code\n\ngit push remote-name branch-name\n\nHere remote-name is the name of the remote repository that you want to push to and branch-name is the name of the branch that you want to push.\nTerminal windowgit push origin main\nSetup an upstream remote\nSetting up an upstream remote is useful when you want to keep your local repository up to date with the remote repository. It allows you to fetch and merge changes from the remote repository into your local repository.\nTo set up an upstream remote, you can use the following command:\nTerminal windowgit remote add upstream \nor you can use shorthand:\nTerminal windowgit remote add -u \nYou can do this at the time of pushing your code to the remote repository.\nTerminal windowgit push -u origin main\nThis will set up an upstream remote and push your code to the remote repository.\nThis will allow you to run future commands like git pull and git push without specifying the remote name.\nGet code from",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "This will set up an upstream remote and push your code to the remote repository.\nThis will allow you to run future commands like git pull and git push without specifying the remote name.\nGet code from remote repository\nThere are two ways to get code from a remote repository:\n\nfetch the code\npull the code\n\nFetch the code means that you are going to download the code from the remote repository to your local repository. Pull the code means that you are going to download the code from the remote repository and merge it with your local repository.\n\nFetch code\nTo fetch code from a remote repository, you can use the following command:\nTerminal windowgit fetch \nHere  is the name of the remote repository that you want to fetch from.\nPull code\nTo pull code from a remote repository, you can use the following command:\nTerminal window# git pull  git pull origin main\nHere  is the name of the remote repository that you want to pull from and  is the name of the branch that you want to pull.\nConclusion",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "ollowing command:\nTerminal window# git pull  git pull origin main\nHere  is the name of the remote repository that you want to pull from and  is the name of the branch that you want to pull.\nConclusion\nIn this section, we have learned about Github and how to use it. We have also learned about how to setup ssh key and add it to your github account. We have also learned about how to publish code to the remote repository.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousManaging HistoryNext Welcome    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/github/"
  },
  {
    "content": "Managing History | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Config",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/managing-history/"
  },
  {
    "content": "L       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Merge commits    Rebase in git     Ensure you are on the branch you want to rebase    Resolve any conflicts      Git reflog     View the reflog:    Find specific commit    Recover lost commits or changes      Conclusion    On this page   Overview    Merge commits    Rebase in git     Ensure you are on the branch you want to rebase    Resolve any conflicts      Git reflog     View the reflog:    Find specific commit    Recover lost commits or changes      Conclusion           Managing History      This guide will help you understand how to manage your G",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/managing-history/"
  },
  {
    "content": "Git reflog     View the reflog:    Find specific commit    Recover lost commits or changes      Conclusion           Managing History      This guide will help you understand how to manage your Git history effectively.\nMerge commits\nA merge commit is a commit that combines two or more commits into one. It is created when you merge two or more branches into a single branch. The merge commit contains all the changes from the original branches, and it is used to keep the project history clean and easy to understand.\n\nRebase in git\nGit rebase is a powerful Git feature used to change the base of a branch. It effectively allows you to move a branch to a new starting point, usually a different commit, by “replaying” the commits from the original base onto the new base. This can be useful for keeping a cleaner, linear project history.\nSome people like to use rebase over the merge command because it allows you to keep the commit history cleaner and easier to understand. It also allows you",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/managing-history/"
  },
  {
    "content": "keeping a cleaner, linear project history.\nSome people like to use rebase over the merge command because it allows you to keep the commit history cleaner and easier to understand. It also allows you to make changes to the code without affecting the original branch.\nHere’s a flow example of using git rebase with all the commands involved:\nSuppose you have a feature branch called feature-branch that you want to rebase onto the main branch.\n\nEnsure you are on the branch you want to rebase\nTerminal windowgit checkout feature-branchgit rebase main\nThis will replay the commits from feature-branch on top of the latest changes in main.\nResolve any conflicts\nIf there are any conflicts, you will need to resolve them manually. You can use the merge tool in VSCode to resolve the conflicts.\nTerminal windowgit add git rebase --continue\n\nTry to avoid —force option when using rebase. It can cause issues with the project history. I have seen many horror stories of people using —force to fix conflicts.",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/managing-history/"
  },
  {
    "content": "indowgit add git rebase --continue\n\nTry to avoid —force option when using rebase. It can cause issues with the project history. I have seen many horror stories of people using —force to fix conflicts.\n\nGit reflog\nGit reflog is a command that shows you the history of your commits. It allows you to see the changes that you have made to your repository over time. This can be useful for debugging and understanding the history of your project.\nView the reflog:\nTerminal windowgit reflog\nThis will show you the history of your commits. You can use the number at the end of each line to access the commit that you want to view.\nFind specific commit\nYou can find a specific commit using the following command:\nTerminal windowgit reflog \nRecover lost commits or changes\nIf you accidentally deleted a branch or made changes that are no longer visible in the commit history, you can often recover them using the reflog. First, find the reference to the commit where the branch or changes existed, and then r",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/managing-history/"
  },
  {
    "content": "h or made changes that are no longer visible in the commit history, you can often recover them using the reflog. First, find the reference to the commit where the branch or changes existed, and then reset your branch to that reference.\nTerminal windowgit reflog git reset --hard \nor you can use HEAD@{n} to reset to the nth commit before the one you want to reset to.\nTerminal windowgit reflog git reset --hard HEAD@{1}\nConclusion\nIn this guide, we’ve covered important aspects of managing Git history through rebase and reflog. We’ve learned how rebase can help maintain a cleaner, more linear project history, and how reflog can help recover lost commits or changes.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousDiff, Stash, TagsNext Collaborate with Github    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/managing-history/"
  },
  {
    "content": "Hitesh Choudhary Last updated: Apr 14, 2025   PreviousDiff, Stash, TagsNext Collaborate with Github    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/managing-history/"
  },
  {
    "content": "Nginx Configuration on VPS | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Ng",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/"
  },
  {
    "content": "hai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Installing Nginx on Ubuntu    Configuring Nginx on Ubuntu    Summary    On this page   Overview    Prerequisites    Installing Nginx on Ubuntu    Configuring Nginx on Ubuntu    Summary           Nginx Configuration on VPS      Nginx is a popular open-source web server that can be used to serve static files, dynamic content, and proxy requests to other servers. It is known for its high performance, scalability, and security.\nIn this tutorial, we will learn how to install and configure Nginx on any VPS.\n  Play    \nPrerequisites",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/"
  },
  {
    "content": "roxy requests to other servers. It is known for its high performance, scalability, and security.\nIn this tutorial, we will learn how to install and configure Nginx on any VPS.\n  Play    \nPrerequisites\nBefore installing Nginx, make sure you have the following prerequisites:\n\nA server with root access\nA domain name or IP address\nA web server that can be used to serve static files\n\nInstalling Nginx on Ubuntu\nTo install Nginx on Ubuntu, follow these steps:\n\n\nUpdate the package index\n\nTerminal windowsudo apt update\n\n\nInstall Nginx\n\nTerminal windowsudo apt install nginx\n\n\nStart and enable Nginx\n\nTerminal windowsudo systemctl start nginxsudo systemctl enable nginx\n\n\nOpen your web browser and navigate to http://your_server_ip. You should see the Nginx default welcome page.\n\n\nConfiguring Nginx on Ubuntu\n\n\nCreate a new server block configuration file\n\nTerminal windowsudo vim /etc/nginx/sites-available/default\nThis command opens the default configuration file for editing.\n\n\nReplace the file conte",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/"
  },
  {
    "content": "buntu\n\n\nCreate a new server block configuration file\n\nTerminal windowsudo vim /etc/nginx/sites-available/default\nThis command opens the default configuration file for editing.\n\n\nReplace the file content with the following content:\n\nserver {  listen 80;  # Listen on port 80, the default HTTP port  server_name localhost;  # The server name, here it is set to localhost\n  root /var/www/html;  # The root directory where files are served from  index index.html index.htm;  # The default files to serve\n  location / {    try_files $uri $uri/ =404;  # Try to serve the requested URI, if not found return a 404  }}\n\n\nCreate the document root directory if it doesn’t exist\n\nTerminal windowsudo mkdir -p /var/www/html\n\n\nChange ownership of the document root directory to the current user\n\nTerminal windowsudo chown -R $USER:$USER /var/www/html\n\n\nSet the permissions for the document root directory\n\nTerminal windowsudo chmod -R 755 /var/www/html\n\n\nCreate the directory for the web root.\n\nTerminal windowcd /",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/"
  },
  {
    "content": "o chown -R $USER:$USER /var/www/html\n\n\nSet the permissions for the document root directory\n\nTerminal windowsudo chmod -R 755 /var/www/html\n\n\nCreate the directory for the web root.\n\nTerminal windowcd /var/www/html\nThis command navigates to the web root directory.\n\n\nCreate an empty index.html file\n\nTerminal windowtouch index.html\nThis command creates an empty index.html file.\n\n\nOpen the index.html file for editing\n\nTerminal windowsudo vim index.html\nThis command opens the index.html file for editing.\n\n\nAdd the following content to the index.html file:\n\n  Welcome to Nginx   Hello, world! \n\n\nTest the Nginx configuration\n\nTerminal windowsudo nginx -t\nThis command tests the Nginx configuration for syntax errors.\n\n\nReload Nginx to apply the changes\n\nTerminal windowsudo systemctl reload nginx\nThis command reloads the Nginx service to apply the changes.\n\n\nOpen your web browser and navigate to URL_ADDRESS_server_ip. You should see the Nginx default welcome page.\n\n\nSummary\nIn this tutorial, we le",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/"
  },
  {
    "content": "command reloads the Nginx service to apply the changes.\n\n\nOpen your web browser and navigate to URL_ADDRESS_server_ip. You should see the Nginx default welcome page.\n\n\nSummary\nIn this tutorial, we learned how to install and configure Nginx to serve static files.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025   PreviousServer StartupNext Nginx Rate Limit    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/"
  },
  {
    "content": "Advanced Node.js Logging | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Ngin",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/"
  },
  {
    "content": "i aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Installation    Configuration    Usage    Easy log messages    Summary    On this page   Overview    Installation    Configuration    Usage    Easy log messages    Summary           Advanced Node.js Logging      Node Logger is a powerful tool that allows you to log messages to the console, file, or other destinations. It provides a simple and flexible API for logging messages, making it easy to debug and monitor your Node.js applications. Console logs are great for quick debugging, but they can be difficult to manage and analyze.\nThis guide has",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/"
  },
  {
    "content": "ble API for logging messages, making it easy to debug and monitor your Node.js applications. Console logs are great for quick debugging, but they can be difficult to manage and analyze.\nThis guide has been carefully curated as a comprehensive reference for the “Advance logging with morgan and winston” section in the Complete Web Dev Course on Udemy course. For the best learning experience, we recommend following these docs alongside our video lectures.\n\n\nThis is my personal configuration for Winston logger. You can use it as a reference.\n\nInstallation\nTo install Winston, you can use the following command:\n         bun      pnpm      npm      yarn      Terminal windowbun add winston morgan  Terminal windowpnpm add winston morgan  Terminal windownpm install winston morgan  Terminal windowyarn add winston morgan      \nThis will install the winston and morgan packages, which are used to configure and use the Winston logger.\nConfiguration\nTo configure Winston, you can create a new file call",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/"
  },
  {
    "content": "n add winston morgan      \nThis will install the winston and morgan packages, which are used to configure and use the Winston logger.\nConfiguration\nTo configure Winston, you can create a new file called logger.js in the root directory of your project and add the following code:\nlogger.jsimport {createLogger, format, transports} from \"winston\";const {combine, timestamp, json, colorize} = format;\n// Custom format for console logging with colorsconst consoleLogFormat = format.combine(  format.colorize(),  format.printf(({ level, message, timestamp }) => {    return `${level}: ${message}`;  }));\n// Create a Winston loggerconst logger = createLogger({  level: \"info\",  format: combine(colorize(), timestamp(), json()),  transports: [    new transports.Console({      format: consoleLogFormat,    }),    new transports.File({ filename: \"app.log\" }),  ],});\nexport default logger;\nThis code configures Winston to log messages to the console and a file called app.log. It also sets the log level to i",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/"
  },
  {
    "content": "),    new transports.File({ filename: \"app.log\" }),  ],});\nexport default logger;\nThis code configures Winston to log messages to the console and a file called app.log. It also sets the log level to info and uses the colorize and timestamp formatters to add colors and timestamps to the console logs.\nUsage\nTo use the Winston logger, you can import it in your code and use it as follows:\nFirst go to your index.js file and add the following code:\nindex.jsimport logger from \"./logger\";import morgan from \"morgan\";\nconst morganFormat = \":method :url :status :response-time ms\";\napp.use(  morgan(morganFormat, {    stream: {      write: (message) => {        const logObject = {          method: message.split(\" \")[0],          url: message.split(\" \")[1],          status: message.split(\" \")[2],          responseTime: message.split(\" \")[3],        };        logger.info(JSON.stringify(logObject));      },    },  }));\nThis will log the messages to the console and the file app.log. The morgan package",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/"
  },
  {
    "content": "responseTime: message.split(\" \")[3],        };        logger.info(JSON.stringify(logObject));      },    },  }));\nThis will log the messages to the console and the file app.log. The morgan package is used to format the log messages and the stream option is used to write the log messages to the console.\nEasy log messages\nTo use the Winston logger, you can import it in your code and use it as follows:\nimport logger from \"./logger\";\nlogger.info(\"This is an info message\");logger.error(\"This is an error message\");logger.warn(\"This is a warning message\");logger.debug(\"This is a debug message\");\nThis will log the messages to the console and the file app.log.\nSummary\nIn this tutorial, we have learned how to use the advanced Node Logger such as Winston and morgan. We have also learned how to configure and use the Winston logger in our Node.js applications. By using the advanced Node Logger, we can easily log messages to the console, file, or other destinations, making it easier to debug and",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/"
  },
  {
    "content": "figure and use the Winston logger in our Node.js applications. By using the advanced Node Logger, we can easily log messages to the console, file, or other destinations, making it easier to debug and monitor our applications.\nNow, you can use the advanced Node Logger to log messages in your Node.js applications and make it easier to debug and monitor your applications.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 22, 2025   PreviousPostgreSQL on VPS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/"
  },
  {
    "content": "Relationships and Forms in Django | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startu",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    One-to-many    Many-to-many    One-to-one    Update the admin    Adding a form on frontend    Handle the view for the form    Add the template    Update the urls    Run the server    Summary    On this page   Overview    One-to-many    Many-to-many    One-to-one    Update the admin    Adding a form on frontend    Handle the view for the form    Add the template    Update the urls    Run the server    Summary           Relationships and Forms in Django      Django has a number of built-in relationships that you can use to connect your m",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "rm    Add the template    Update the urls    Run the server    Summary           Relationships and Forms in Django      Django has a number of built-in relationships that you can use to connect your models to each other. These relationships are used to create a more complex and powerful database.\nThe most common relationships are:\n\nOne-to-many\nMany-to-many\nOne-to-one\n\nOne-to-many\nOne-to-many relationships are used when you have a model that has a foreign key to another model. In a One-to-Many relationship, each instance of the parent model can be associated with multiple instances of the child model. For example, a Chai variety can have multiple reviews.\nIn the existing chai app, open models.py and add the following code:\nmodels.pyclass ChaiReview(models.Model):  chai = models.ForeignKey(ChaiVariety, on_delete=models.CASCADE, related_name='reviews')  user = models.ForeignKey(User, on_delete=models.CASCADE)  rating = models.IntegerField()  comment = models.TextField()  date_added = mode",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "haiVariety, on_delete=models.CASCADE, related_name='reviews')  user = models.ForeignKey(User, on_delete=models.CASCADE)  rating = models.IntegerField()  comment = models.TextField()  date_added = models.DateTimeField(default=timezone.now)\n  def __str__(self):    return f'{self.user.username} review for {self.chai.name}'\nThis code creates a new model called ChaiReview that has a foreign key to the ChaiVariety model. The user field is a foreign key to the User model, and the rating and comment fields are integers and text fields respectively.\nMany-to-many\nMany-to-many relationships are used when you have a model that has a many-to-many relationship with another model. In a Many-to-Many relationship, each instance of one model can be associated with multiple instances of another model, and vice versa. For example, a Chai variety can be featured in multiple stores, and each store can feature multiple chai varieties.\nIn the existing chai app, open models.py and add the following code:\nmodel",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "ce versa. For example, a Chai variety can be featured in multiple stores, and each store can feature multiple chai varieties.\nIn the existing chai app, open models.py and add the following code:\nmodels.pyclass Store(models.Model):  name = models.CharField(max_length=100)  location = models.CharField(max_length=100)  chai_varieties = models.ManyToManyField(ChaiVariety, related_name='stores')\n  def __str__(self):    return self.name\nOne-to-one\nOne-to-one relationships are used when you have a model that has a one-to-one relationship with another model. In a One-to-One relationship, each instance of one model is associated with one and only one instance of another model. For example, each Chai variety can have a unique certificate.\nIn the existing chai app, open models.py and add the following code:\nmodels.pyclass ChaiCertificate(models.Model):  chai = models.OneToOneField(ChaiVariety, on_delete=models.CASCADE, related_name='certificate')  certificate_number = models.CharField(max_length=",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "g code:\nmodels.pyclass ChaiCertificate(models.Model):  chai = models.OneToOneField(ChaiVariety, on_delete=models.CASCADE, related_name='certificate')  certificate_number = models.CharField(max_length=100)  issued_date = models.DateTimeField(default=timezone.now)  valid_until = models.DateTimeField()\n  def __str__(self):    return f'Certificate for {self.chai.name}'\nUpdate the admin\nIn the existing chai app, open admin.py and add the following code:\nadmin.pyfrom django.contrib import adminfrom .models import ChaiVariety, ChaiReview, Store, ChaiCertificate\nclass ChaiReviewInline(admin.TabularInline):  model = ChaiReview  extra = 1\nclass ChaiVarietyAdmin(admin.ModelAdmin):  list_display = ('name', 'type', 'date_added')  inlines = [ChaiReviewInline]\nclass StoreAdmin(admin.ModelAdmin):  list_display = ('name', 'location')  filter_horizontal = ('chai_varieties',)\nclass ChaiCertificateAdmin(admin.ModelAdmin):  list_display = ('chai', 'certificate_number', 'issued_date', 'valid_until')\nadmin.s",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "splay = ('name', 'location')  filter_horizontal = ('chai_varieties',)\nclass ChaiCertificateAdmin(admin.ModelAdmin):  list_display = ('chai', 'certificate_number', 'issued_date', 'valid_until')\nadmin.site.register(ChaiVariety, ChaiVarietyAdmin)admin.site.register(Store, StoreAdmin)admin.site.register(ChaiCertificate, ChaiCertificateAdmin)\nAdding a form on frontend\nIn the existing chai app, create a new file called forms.py in the chai app directory. In this file, add the following code:\nforms.pyfrom django import formsfrom .models import ChaiVariety\nclass ChaiVarietyForm(forms.Form):  chai_variety = forms.ModelChoiceField(queryset=ChaiVariety.objects.all(), label=\"Select Chai Variety\")\nHandle the view for the form\nIn the existing chai app, open views.py and add the following code:\nviews.pyfrom .models import ChaiVariety, Storefrom .forms import ChaiVarietyForm\ndef chai_store_view(request):  stores = None  if request.method == 'POST':    form = ChaiVarietyForm(request.POST)    if form.is",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "rom .models import ChaiVariety, Storefrom .forms import ChaiVarietyForm\ndef chai_store_view(request):  stores = None  if request.method == 'POST':    form = ChaiVarietyForm(request.POST)    if form.is_valid():      chai_variety = form.cleaned_data['chai_variety']      stores = Store.objects.filter(chai_varieties=chai_variety)  else:    form = ChaiVarietyForm()\n  return render(request, 'chai/chai_stores.html', {'form': form, 'stores': stores})\nAdd the template\nIn the existing chai app, create a new file called chai_stores.html in the chai app directory. In this file, add the following code:\nchai_stores.html{% extends 'layout.html' %}\n{% block content %}  Chai Stores     {% csrf_token %}      {{ form.as_p }}    Search Stores   {% if stores %}    Stores with selected Chai Variety       {% for store in stores %}      {{ store.name }} - {{ store.location }}      {% endfor %}      {% endif %}{% endblock %}\nUpdate the urls\nIn the urls.py file, add the following code to the urlpatterns list:\nu",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "store in stores %}      {{ store.name }} - {{ store.location }}      {% endfor %}      {% endif %}{% endblock %}\nUpdate the urls\nIn the urls.py file, add the following code to the urlpatterns list:\nurls.pypath('chai_stores/', views.chai_store_view, name='chai_stores'),\nRun the server\nIn the terminal, navigate to the chai directory and run the following command:\nTerminal windowpython manage.py runserver\nThat’s it! You have successfully created a form that allows users to search for stores that have a specific chai variety. You can now add more functionality to the form and the view to make it more useful.\nSummary\nIn this section, you learned how to create a form that allows users to search for stores that have a specific chai variety. We have also discussed about the different types of relationships in Django and how to use them in your models and views.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "ationships in Django and how to use them in your models and views.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 18, 2025   PreviousModelsNext Welcome    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/"
  },
  {
    "content": "Deploy Node API with Nginx | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Ng",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/"
  },
  {
    "content": "hai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Create a Small Express App    Do a reverse proxy with nginx    Summary    On this page   Overview    Prerequisites    Create a Small Express App    Do a reverse proxy with nginx    Summary           Deploy Node API with Nginx        Play    \nPrerequisites\nBefore going forward, make sure you have the following prerequisites:\n\nA server with root access\nA domain name or IP address\nA web server that can be used to serve static files\nNginx installed and configured on the machine\nSSL configured for the domain name or IP address\n\nCr",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/"
  },
  {
    "content": "rver with root access\nA domain name or IP address\nA web server that can be used to serve static files\nNginx installed and configured on the machine\nSSL configured for the domain name or IP address\n\nCreate a Small Express App\nWe will create a small express app to test the deployment. Here are the steps:\n\n\nInstall nodejs and npm on ubuntu\n\nTerminal windowsudo apt install nodejssudo apt install npm\n\n\nCreate a project dir and initialize a node app\n\nTerminal windowmkdir express-appcd express-appnpm init -y\n\n\nInstall basic dependencies\n\nTerminal windownpm install express nodemon\n\n\nUpdate the package.json\n\n{  \"name\": \"express-app\",  \"version\": \"1.0.0\",  \"description\": \"\",  \"main\": \"index.js\",  \"type\": \"module\",  \"scripts\": {    \"dev\": \"nodemon index.js\"  },  \"keywords\": [],  \"author\": \"\",  \"license\": \"ISC\",  \"dependencies\": {    \"express\": \"^4.19.2\",    \"nodemon\": \"^3.1.4\"  }}\n\n\nCreate an index.js file and add the following code\n\nTerminal windowtouch index.js\nimport express from \"express\";con",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/"
  },
  {
    "content": "se\": \"ISC\",  \"dependencies\": {    \"express\": \"^4.19.2\",    \"nodemon\": \"^3.1.4\"  }}\n\n\nCreate an index.js file and add the following code\n\nTerminal windowtouch index.js\nimport express from \"express\";const app = express();app.get(\"/api\", (req, res) => {  return res.status(200).json({    message: \"server working\",  });});app.listen(8080, () => console.log(\"Server is running on 8080\"));\n\n\nInstall pm2 to run this dummy app in the background\n\nTerminal windownpm install -g pm2 # if npm is not available use sudo npm install -g pm2\n\n\nRun the application with the following command:\n\nTerminal windowpm2 start \"npm run dev\"\nThis will start the application on port 8080.\n\n\nDo a reverse proxy with nginx\nNginx can also act as a reverse proxy, forwarding client requests to other servers. Here are the steps to configure Nginx as a reverse proxy:\n\n\nEdit your server block configuration:\n\nTerminal windowsudo vim /etc/nginx/sites-available/default\n\n\nConfigure the server block to act as a reverse proxy:\n\nserve",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/"
  },
  {
    "content": "o configure Nginx as a reverse proxy:\n\n\nEdit your server block configuration:\n\nTerminal windowsudo vim /etc/nginx/sites-available/default\n\n\nConfigure the server block to act as a reverse proxy:\n\nserver {  listen 80;  # Listen on port 80 for incoming HTTP requests  server_name localhost;  # Server name or domain name this block will respond to\n  location / {    proxy_pass http://127.0.0.1:8080;  # Proxy requests to the backend server running on localhost:8080    proxy_set_header Host $host;  # Set the Host header to the client's original host    proxy_set_header X-Real-IP $remote_addr;  # Set the X-Real-IP header to the client's IP address    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Append client's IP addresses to X-Forwarded-For header    proxy_set_header X-Forwarded-Proto $scheme;  # Set the X-Forwarded-Proto header to the client's protocol (http or https)  }}\n\n\nTest and reload Nginx:\n\nTerminal windowsudo nginx -tsudo systemctl reload nginx\n\n\nNow, when you reque",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/"
  },
  {
    "content": "-Proto $scheme;  # Set the X-Forwarded-Proto header to the client's protocol (http or https)  }}\n\n\nTest and reload Nginx:\n\nTerminal windowsudo nginx -tsudo systemctl reload nginx\n\n\nNow, when you request http:///api it will return the following response:\n\n{ \"message\": \"server working\" }\n\n\nSummary\nIn this guide, we learned how to deploy a Node API with Nginx on Ubuntu server. We also learned how to configure Nginx as a reverse proxy.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025   PreviousNginx SSL SetupNext PostgreSQL & Docker    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/"
  },
  {
    "content": "Emmet Crash Course | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Conf",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/"
  },
  {
    "content": "SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Some common Emmit shortcuts     ID and Class    Grouping    CSS shortcuts      Conclusion    On this page   Overview    Some common Emmit shortcuts     ID and Class    Grouping    CSS shortcuts      Conclusion           Emmet Crash Course      Emmit is a code snippets manager for VS Code. It is used to create HTML code faster. Emmit is a must-have tool for any web developer. In VS Code, Emmit is enabled by default. It works only after you have created a new HTML file.\n\nLearn the shortcuts and just press the tab or enter key to get the code you want.",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/"
  },
  {
    "content": "or any web developer. In VS Code, Emmit is enabled by default. It works only after you have created a new HTML file.\n\nLearn the shortcuts and just press the tab or enter key to get the code you want.\n\nSome common Emmit shortcuts\n\n! - Inserts a  tag\nh1 - Inserts a  tag\nh2 - Inserts a  tag\np - Inserts a  tag\nimg - Inserts an  tag\na - Inserts an  tag\nul - Inserts an  tag\nul>li - Inserts a  tag inside an  tag\nul>li>a - Inserts an  tag inside a  tag inside an  tag\nul>li*3 - Inserts 3  tags inside an  tag\ndiv - Inserts a  tag\ndiv>p - Inserts a  tag inside a  tag\ndiv>p*3 - Inserts 3  tags inside a  tag\n\nID and Class\n\n# - Inserts an id attribute\n. - Inserts a class attribute\n\nExample:\n\n\n#my-id - Inserts an id attribute with the value my-id\n\n\n.my-class - Inserts a class attribute with the value my-class\n\n\ndiv>(header>ul>li*2>a)+footer>p1 - expands into\n            \n\n\nGrouping\n\ndiv>(header>ul>li*2>a)+footer>p - Inserts a  tag with a  tag inside it, a  tag inside it, and 2  tags inside the  tag.",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/"
  },
  {
    "content": "class\n\n\ndiv>(header>ul>li*2>a)+footer>p1 - expands into\n            \n\n\nGrouping\n\ndiv>(header>ul>li*2>a)+footer>p - Inserts a  tag with a  tag inside it, a  tag inside it, and 2  tags inside the  tag. Then it inserts an  tag inside each  tag. Finally it inserts a  tag and a  tag inside it.\n\n\nYep, it can go little bit crazy. But you don’t have to worry about it. Rarely you will need to use it.\n\nCSS shortcuts\n\nstyle - Inserts a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/"
  },
  {
    "content": "Introduction to SQL | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Con",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/introduction/"
  },
  {
    "content": "SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    What is PostgreSQL?    Relational Database Concepts    Summary    On this page   Overview    What is PostgreSQL?    Relational Database Concepts    Summary           Introduction to SQL      SQL (Structured Query Language) is a standardized language used to manage and manipulate relational databases. SQL allows you to:\n\nQuery Data: Retrieve specific information from large datasets.\nInsert Data: Add new records to the database.\nUpdate Data: Modify existing data.\nDelete Data: Remove records from the database.\n\n\n   Real World Example   Imagine you own",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/introduction/"
  },
  {
    "content": "ormation from large datasets.\nInsert Data: Add new records to the database.\nUpdate Data: Modify existing data.\nDelete Data: Remove records from the database.\n\n\n   Real World Example   Imagine you own a chai business with stores in multiple cities. You want to store information about different chai varieties, their ingredients, prices, and the cities where they’re sold. SQL helps you manage and retrieve this information efficiently.  \n\n\n\nWhat is PostgreSQL?\nPostgreSQL is an open-source, powerful relational database management system (RDBMS) that supports advanced SQL features. It is known for:\n\nACID compliance: Ensures reliable transactions (Atomicity, Consistency, Isolation, Durability).\nSupport for JSON and Array data types.\nExtensibility: Custom functions, data types, etc.\n\n\n   Real World Example   You can use PostgreSQL to store chai data across cities and perform complex queries like “Which city sells the most varieties of chai?”  \n\n\n\nRelational Database Concepts\n\nTables: A table i",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/introduction/"
  },
  {
    "content": "d Example   You can use PostgreSQL to store chai data across cities and perform complex queries like “Which city sells the most varieties of chai?”  \n\n\n\nRelational Database Concepts\n\nTables: A table is like a spreadsheet where data is organized into rows and columns.\nRows: Each row represents a single record.\nColumns: Each column represents a specific attribute of the data.\n\nExample: A Chai table with the following columns: id, name, ingredients, price, city_sold.\n...    | id  | name         | ingredients            | price | city_sold |    |-----|--------------|------------------------|-------|-----------|    | 1   | Masala Chai  | Tea, Milk, Spices      | 50    | Mumbai    |    | 2   | Assam Chai   | Assam Tea, Milk, Sugar | 40    | Delhi     |...\nSummary\nIn this chapter we have learned about SQL and PostgreSQL. We have also learned about relational databases and their concepts. By the end of this chapter, you should have a good understanding of SQL and how it can be used to manage a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/introduction/"
  },
  {
    "content": "about SQL and PostgreSQL. We have also learned about relational databases and their concepts. By the end of this chapter, you should have a good understanding of SQL and how it can be used to manage and manipulate relational databases.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 19, 2025   PreviousWelcomeNext PostgreSQL    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/introduction/"
  },
  {
    "content": "Welcome | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/welcome/"
  },
  {
    "content": "elcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           Welcome      Haanji! Swagat hai Chai aur Docs mein. 🎉\nThis guide has been carefully curated as a comprehensive reference for the “Chai aur C++” series on the Chai aur Code YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\nHindi  Play    \nEnglish  Play   \nLet’s begin with the basics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated:",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/welcome/"
  },
  {
    "content": "with the basics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousCollaborate with GithubNext C++ Intro    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/welcome/"
  },
  {
    "content": "Welcome | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/welcome/"
  },
  {
    "content": "elcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           Welcome      Haanji! Swagat hai Chai aur Docs mein. 🎉\nThis guide has been carefully curated as a comprehensive reference for the “Master SQL for Web Development” section in the Complete Web Dev Course on Udemy course. For the best learning experience, we recommend following these docs alongside our video lectures.\n\nLet’s begin with the basics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/welcome/"
  },
  {
    "content": "the basics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 22, 2025   PreviousRelationships & FormsNext SQL Intro    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/welcome/"
  },
  {
    "content": "Setup SSL for Nginx | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Con",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/"
  },
  {
    "content": "SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Install Certbot and the Nginx Plugin    Configure Nginx    Create an A Record in Your Domain Registrar    Obtain an SSL Certificate    Access Your Site    Renewing the Certificate    Summary    On this page   Overview    Prerequisites    Install Certbot and the Nginx Plugin    Configure Nginx    Create an A Record in Your Domain Registrar    Obtain an SSL Certificate    Access Your Site    Renewing the Certificate    Summary           Setup SSL for Nginx      This guide will help you set up SSL for your Nginx server on Ubuntu using",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/"
  },
  {
    "content": "ar    Obtain an SSL Certificate    Access Your Site    Renewing the Certificate    Summary           Setup SSL for Nginx      This guide will help you set up SSL for your Nginx server on Ubuntu using Certbot. We will use a subdomain from GoDaddy, and the steps include installing Certbot, configuring Nginx, and generating an SSL certificate.\n  Play    \nPrerequisites\nBefore going forward, make sure you have the following prerequisites:\n\nA server with root access\nA domain name or IP address\nA web server that can be used to serve static files\nNginx installed and configured on the machine\n\nInstall Certbot and the Nginx Plugin\nFirst, install Certbot and the Nginx plugin using the following command:\nTerminal windowsudo apt install certbot python3-certbot-nginx\nConfigure Nginx\nEdit your Nginx configuration file to include your server name. Open the file with a text editor:\nTerminal windowsudo vim /etc/nginx/sites-available/default\nAdd your subdomain in the server_name directive:\nserver {  ...",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/"
  },
  {
    "content": "iguration file to include your server name. Open the file with a text editor:\nTerminal windowsudo vim /etc/nginx/sites-available/default\nAdd your subdomain in the server_name directive:\nserver {  ...  server_name test.chaicode.com;  ...}\nSave the file and exit the editor. Then, test your Nginx configuration:\nTerminal windowsudo nginx -t\nCreate an A Record in Your Domain Registrar\nLog in to your domain registrar (e.g., GoDaddy) and create an A record pointing to the IP address of your server.\n\nRecord Type: A\nName: test.chaicode.com\nValue: IPv4 address of the server\n\nNOTE: Its always a good idea to create a elastic/static IP for your server. This will make sure that your IP address doesn’t change on restart or reboot.\nObtain an SSL Certificate\nRun Certbot to obtain an SSL certificate for your subdomain:\nTerminal windowsudo certbot --nginx -d test.chaicode.com\nFollow the prompts:\n\nEnter the email address associated with your domain registrar account.\nAccept the terms of service.\nPress Ent",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/"
  },
  {
    "content": "r subdomain:\nTerminal windowsudo certbot --nginx -d test.chaicode.com\nFollow the prompts:\n\nEnter the email address associated with your domain registrar account.\nAccept the terms of service.\nPress Enter to continue.\n\nCertbot will automatically configure your Nginx to use the new certificate. You should see a message indicating that the certificate was successfully issued.\n\nAccess Your Site\nYou can now access your site using HTTPS:\nTerminal windowhttps://test.chaicode.com\n\nRenewing the Certificate\nTo check if the certificate is close to expiring, run:\nTerminal windowsudo certbot renew --dry-run\nTo renew the certificate, run:\nTerminal windowsudo certbot renew\nThis guide ensures that your Nginx server is secured with SSL, making your site accessible over HTTPS.\nSummary\nIn this guide, we learned how to set up SSL for Nginx on Ubuntu using Certbot. We installed Certbot and the Nginx plugin, configured Nginx, created an A record in your domain registrar, and obtained an SSL certificate. We a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/"
  },
  {
    "content": "ed how to set up SSL for Nginx on Ubuntu using Certbot. We installed Certbot and the Nginx plugin, configured Nginx, created an A record in your domain registrar, and obtained an SSL certificate. We also learned how to renew the certificate.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025   PreviousNginx Rate LimitNext Deploy Node API    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/"
  },
  {
    "content": "Welcome | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/welcome/"
  },
  {
    "content": "elcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           Welcome      Haanji! Swagat hai Chai aur Docs mein. 🎉\nThis guide has been carefully curated as a comprehensive reference for the “Chai aur Git” series on the Chai aur Code YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\n  Play    \nLet’s begin with the basics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   Previou",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/welcome/"
  },
  {
    "content": "next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousCommon HTML TagsNext Git and GitHub    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/welcome/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configu",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    What is Django?    Environment Setup    Django Project    Start a Django Server    Creating our first views    Adding Templates    Adding CSS and JavaScript    Summary    On this page   Overview    What is Django?    Environment Setup    Django Project    Start a Django Server    Creating our first views    Adding Templates    Adding CSS and JavaScript    Summary           Getting Started      Django is popular framework amongst python developers and used by many large companies, including Google, Facebook, and Instagram.\nIn this guide, we will learn ho",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "ummary           Getting Started      Django is popular framework amongst python developers and used by many large companies, including Google, Facebook, and Instagram.\nIn this guide, we will learn how to create a Django project, create a view, create a template, and add CSS and JavaScript to our project. We will also learn how to run the server and view the output.\nWhat is Django?\nDjango is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. It takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel.\nDjango is a full-featured web framework that follows the Model-View-Controller (MVC) architectural pattern. It provides a set of tools and libraries for building web applications, including an ORM, a templating engine, and a built-in admin interface.\nEnvironment Setup\nTo get started with Django, you’ll need to install it on your computer. You can do this by running the foll",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "ns, including an ORM, a templating engine, and a built-in admin interface.\nEnvironment Setup\nTo get started with Django, you’ll need to install it on your computer. You can do this by running the following command in your terminal, after setting up a virtual environment:\n       MacOS     Windows     Linux      Terminal windowpython3 -m venv .venv\n# to activate the virtual environmentsource .venv/bin/activate  Terminal windowpython -m venv .venv\n# to activate the virtual environment.venv\\Scripts\\activate  Terminal windowpython3 -m venv .venv\n# to activate the virtual environmentsource .venv/bin/activate     \nThis is regular way but these days I am using uv to manage virtual environment and other tools. It’s ridiculously easy and fast and cross-platform.\n       MacOS     Windows     Linux      Terminal windowbrew install uv\n# to create a virtual environmentuv venv\n# to activate the virtual environmentsource .venv/bin/activate  Terminal windowpowershell -c \"irm https://astral.sh/uv/instal",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "Terminal windowbrew install uv\n# to create a virtual environmentuv venv\n# to activate the virtual environmentsource .venv/bin/activate  Terminal windowpowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n# to create a virtual environmentuv venv\n# to activate the virtual environment.venv\\Scripts\\activate  Terminal windowpip install uv\n# to create a virtual environmentuv venv\n# to activate the virtual environmentsource .venv/bin/activate    \nNow for all installations, you can use uv pip install command. For example, to install Django, run the following command:\nTerminal windowuv pip install django\nuv pip install -r requirements.txt\n\nDjango Project\nA Django project is a collection of settings and configurations that define the structure and behavior of a web application. It includes the code for the application, as well as the templates, static files, and other resources that make up the application.\nTo create a new Django project, you can use the following command:\nTerminal wind",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "the code for the application, as well as the templates, static files, and other resources that make up the application.\nTo create a new Django project, you can use the following command:\nTerminal windowdjango-admin startproject chai-aur-django\ncd chai-aur-django\nThis will create a new directory called chai-aur-django with the basic structure of a Django project.\nStart a Django Server\nTo start the Django server, you can use the following command:\nTerminal windowpython manage.py runserver\nThis will start the server and make it accessible at localhost:8000.\nIgnore the unapplied migrations warning. This is a common issue when starting a new Django project. We will address this in a later section.\nCreating our first views\nCreate a new file called views.py in the chai-aur-django directory. In this file, we will define a few views that are simple functions that return a response. We want to have home page, about page, and contact page. Each of these pages will return html content.\nviews.pyfro",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "is file, we will define a few views that are simple functions that return a response. We want to have home page, about page, and contact page. Each of these pages will return html content.\nviews.pyfrom django.http import HttpResponse\ndef home(request):  return HttpResponse(\"Welcome to Chai's Django Project: Home page\")\ndef about(request):  return HttpResponse(\"Welcome to Chai's Django Project: About page\")\ndef contact(request):  return HttpResponse(\"Welcome to Chai's Django Project: Contact page\")\nNow, let’s create a new file called urls.py in the chai-aur-django directory. In this file, we will define the URL patterns for our application. If the file is already there, you can just add the following code to the end of the file:\nurls.pyfrom django.urls import pathfrom . import views\nurlpatterns = [  path('', views.home, name='home'),  path('about/', views.about, name='about'),  path('contact/', views.contact, name='contact'),]\nNow, let’s run the server again and visit the following URLs",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "erns = [  path('', views.home, name='home'),  path('about/', views.about, name='about'),  path('contact/', views.contact, name='contact'),]\nNow, let’s run the server again and visit the following URLs:\n\nlocalhost:8000\nlocalhost:8000/about\nlocalhost:8000/contact\n\nYou should see the following output:\nWelcome to Chai's Django Project: Home pageWelcome to Chai's Django Project: About pageWelcome to Chai's Django Project: Contact page\n\nAdding Templates\nIn Django, templates are used to generate HTML pages. They are used to display data and perform logic in a web application. To create a template, you can create a new file called templates/index.html in the chai-aur-django directory. Make sure that template folder is at same level as manage.py file. In this file, you can write HTML code that will be used to generate the HTML page.\ntemplates/index.html  Welcome to Chai's Django Project   Welcome to Chai's Django Project \nNow, let’s run the server again and visit the http://localhost:8000/ URL.",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "be used to generate the HTML page.\ntemplates/index.html  Welcome to Chai's Django Project   Welcome to Chai's Django Project \nNow, let’s run the server again and visit the http://localhost:8000/ URL. You should see the following output:\nWelcome to Chai's Django Project\n\nAdding CSS and JavaScript\nTo add CSS and JavaScript to your Django project, you can create a new file called static/css/style.css in the chai-aur-django directory. In this file, you can write CSS code that will be used to style the HTML page. You can also create a new file called static/js/script.js in the chai-aur-django directory. In this file, you can write JavaScript code that will be used to add interactivity to the HTML page.\nstatic/css/style.cssbody {  background-color: #161616;  font-family: Arial, sans-serif;  color: #fff;}\nstatic/js/script.jsconsole.log(\"Hello, world!\");\nTo add this css file go to settings.py and add the following line:\nsettings.pyimport os'DIRS': ['templates'], # inside template section\nSTAT",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "or: #fff;}\nstatic/js/script.jsconsole.log(\"Hello, world!\");\nTo add this css file go to settings.py and add the following line:\nsettings.pyimport os'DIRS': ['templates'], # inside template section\nSTATIC_URL = '/static/' # below this add the following lineSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nIn the index.html file, add the following line at the top of the file:\n{% load static %}\n\nNow, let’s change the home view to use the new template:\nfrom django.shortcuts import render\ndef home(request):  return render(request, 'index.html')\nNow, let’s run the server again and visit the localhost:8000 URL. You should see the following output:\nWelcome to Chai's Django Project\n\nSummary\nIn this tutorial, we have learned how to create a Django project, create a view, create a template, and add CSS and JavaScript to our project. We have also learned how to run the server and view the output. This is the end of the first part of the tutorial. We will surely have more fun in the next part. K",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "d CSS and JavaScript to our project. We have also learned how to run the server and view the output. This is the end of the first part of the tutorial. We will surely have more fun in the next part. Keep enjoying Chai aur Django!\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 18, 2025   PreviousWelcomeNext Jinja Templates App    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/"
  },
  {
    "content": "Introduction to HTML | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Co",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/introduction/"
  },
  {
    "content": "r SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    What is HTML?    What is HTML5?    How much HTML should you learn?    Text/Code Editor vs. Word Processor    Recommended Code Editors    Essential VS Code Extensions for HTML    Emmet for HTML Productivity    On this page   Overview    What is HTML?    What is HTML5?    How much HTML should you learn?    Text/Code Editor vs. Word Processor    Recommended Code Editors    Essential VS Code Extensions for HTML    Emmet for HTML Productivity           Introduction to HTML      HTML is the foundation of all websites. \nIn this guide, you’ll understand th",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/introduction/"
  },
  {
    "content": "ed Code Editors    Essential VS Code Extensions for HTML    Emmet for HTML Productivity           Introduction to HTML      HTML is the foundation of all websites. \nIn this guide, you’ll understand the essentials of HTML and get started with web development.\nWhat is HTML?\nHTML stands for HyperText Markup Language. It’s the standard markup language for creating and structuring web pages. HTML defines the structure and content of your web page, such as headings, paragraphs, images, and links.\nWhat is HTML5?\nHTML5 is the latest version of HTML. It introduces new tags, attributes, and features, making it simpler and more efficient to build modern, interactive web pages. HTML5 is also designed to be fully backward compatible with previous HTML versions.\nHow much HTML should you learn?\nYou only need the basics of HTML to start creating websites. Typically, mastering HTML essentials should not take more than a weekend. Understand the core tags and structure, and you’re all set to build web pa",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/introduction/"
  },
  {
    "content": "need the basics of HTML to start creating websites. Typically, mastering HTML essentials should not take more than a weekend. Understand the core tags and structure, and you’re all set to build web pages effectively.\nText/Code Editor vs. Word Processor\n\n\nText editors are specialized tools for writing and editing plain text files, including source code. They include essential features for coding such as syntax highlighting, auto-completion, and code formatting.\n\n\nWord processors like Microsoft Word or Google Docs are ideal for creating formatted documents such as letters, reports, or presentations—but they’re not suitable for coding.\n\n\nFor HTML development, always use a code editor.\nRecommended Code Editors\nHere are some recommended code editors for writing HTML efficiently:\n\nVisual Studio Code – Powerful, widely-used, and beginner-friendly.\nZed – Fast and collaborative editor for modern development.\nVIM – Highly customizable and efficient (but notoriously tricky to exit!).\nHelix – Simi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/introduction/"
  },
  {
    "content": "Code – Powerful, widely-used, and beginner-friendly.\nZed – Fast and collaborative editor for modern development.\nVIM – Highly customizable and efficient (but notoriously tricky to exit!).\nHelix – Similar to VIM, but easier to use right out of the box.\n\nEssential VS Code Extensions for HTML\nEnhance your HTML coding experience with these recommended VS Code extensions:\n\nHTML Snippets – Quickly insert common HTML structures.\nLive Server – Automatically refreshes your browser as you edit your HTML.\n\nEmmet for HTML Productivity\nEmmet is built-in with VS Code and allows you to rapidly generate HTML code using short abbreviations. This significantly speeds up your coding workflow. No need to manually type lengthy tags—let Emmet handle it for you.\nSpend some time getting familiar with Emmet shortcuts to greatly improve your productivity. Learn more about Emmet at the official website.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them ou",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/introduction/"
  },
  {
    "content": "uts to greatly improve your productivity. Learn more about Emmet at the official website.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousWelcomeNext Emmet Crash Course    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/introduction/"
  },
  {
    "content": "Loops | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "come    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    While Loop     Task    Solution    Going through the code:      Do-While Loop     Task    Solution    Going through the code      For Loop     Task    Solution    Going through the code:      Break Keyword     Task    Solution    Going through the code:      Continue Keyword     Task    Solution    Going through the code:      Nested Loops     Task    Solution    Going through the code:      Summary    On this page   Overview    While Loop     Task    Solution    Going through the code:      Do-While Loop     Task    Solution    Going through the code      For Lo",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "ng through the code:      Summary    On this page   Overview    While Loop     Task    Solution    Going through the code:      Do-While Loop     Task    Solution    Going through the code      For Loop     Task    Solution    Going through the code:      Break Keyword     Task    Solution    Going through the code:      Continue Keyword     Task    Solution    Going through the code:      Nested Loops     Task    Solution    Going through the code:      Summary           Loops      In this chapter, we will learn about loops in C++. Our learning will be based on the task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\nWhile Loop\nWhile loop is used to execute a block of code as long as a condition is true. The loop will continue to execute as long as the condition is true. The loop will execute at least once, even if the condition is initially false.\nTask\nWrite a program that keeps track of tea orders. Each time a c",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "continue to execute as long as the condition is true. The loop will execute at least once, even if the condition is initially false.\nTask\nWrite a program that keeps track of tea orders. Each time a cup of tea is made, decrease the number of cups remaining. The loop should run until all cups are served.\nSolution\nwhile.cpp#include #include using namespace std;int main(){  int teaCups;\n  cout << \"Enter the number of tea cups to server: \";  cin >> teaCups;\n  //while loop  while (teaCups > 0) {    teaCups--;    cout << \"Serving a cup of tea \\n\" << teaCups << \" remaining\" << endl;  }\n  cout << \"All tea cups are served. \" << endl;\n  return 0;}\nGoing through the code:\nWe have already gone through the basic code already many times, in this chapter we will focus on the while loop.\n\n\nwhile loop is used to execute a block of code as long as a condition is true.\n\n\nThe condition is checked before each iteration of the loop.\n\n\nThe loop will continue to execute as long as the condition is true.\n\n\nThe",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "sed to execute a block of code as long as a condition is true.\n\n\nThe condition is checked before each iteration of the loop.\n\n\nThe loop will continue to execute as long as the condition is true.\n\n\nThe loop will execute at least once, even if the condition is initially false.\n\n\nwhile (condition) {    // code to be executed}\nHere while checks if the teaCups is greater than 0, if it is true, it will execute the code inside the loop. If the teaCups is 0, the loop will not execute and the program will continue to the next line.\n\n\nDo-While Loop\nDo-while loop is used to execute a block of code as long as a condition is true. The loop will execute at least once, even if the condition is initially false.\nTask\nCreate a program that asks the user if they want more tea. Keep asking them until they type “no” (case-insensitive), using a do-while loop.\nSolution\ndo-while.cpp#include #include using namespace std;\nint main(){  string response;\n  do {    cout << \"Do you want more tea (yes/no): \";    getl",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "e “no” (case-insensitive), using a do-while loop.\nSolution\ndo-while.cpp#include #include using namespace std;\nint main(){  string response;\n  do {    cout << \"Do you want more tea (yes/no): \";    getline(cin, response);  } while (response != \"no\" || response != \"No\");}\nGoing through the code\nHere we have used the do-while loop. The loop will execute at least once, even if the condition is initially false.\ndo {    // code to be executed} while (condition);\nHere do prints the message and asks the user for input. Then it checks if the response is equal to “no” or “No”. If it is, it will execute the code inside the loop. If it is not, it will exit the loop and continue to the next line.\nFor Loop\nFor loop is used to execute a block of code for a specified number of times. The loop will execute the code inside the loop for the specified number of times.\nTask\nWrite a program that prints the brewing instructions for making 5 cups of tea. The brewing process should be printed once for each cup",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "the code inside the loop for the specified number of times.\nTask\nWrite a program that prints the brewing instructions for making 5 cups of tea. The brewing process should be printed once for each cup using a for loop.\nSolution\nfor.cpp#include #include using namespace std;\nint main(){  int teaCups = 5;  int i = 100;\n  for( int i = 1 ; i <= teaCups ; i++){      cout << \"Brewing cup \" << i << \" of tea...\" << endl;  }  cout << i;  cout << \"Outside of loop\";  return 0;}\nGoing through the code:\nHere we are using the for loop. The loop will execute the code inside the loop for the specified number of times.\nfor (initialization; condition; increment/decrement) {    // code to be executed}\nFor loop has three parts:\n\nInitialization: This is where you initialize the loop variable.\nCondition: This is where you check if the loop should continue or not.\nIncrement/Decrement: This is where you update the loop variable.\n\nIn our case, we are initializing the loop variable with i = 1 and checking if the",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "where you check if the loop should continue or not.\nIncrement/Decrement: This is where you update the loop variable.\n\nIn our case, we are initializing the loop variable with i = 1 and checking if the loop should continue with i <= teaCups. If the condition is true, the code inside the loop will be executed. If the condition is false, the loop will exit and the program will continue to the next line.\nBreak Keyword\nBreak keyword is used to exit the loop immediately, without executing the remaining code inside the loop.\nTask\nWrite a program that keeps serving tea until the user says they’ve had enough (input ‘stop’). Use a break statement to exit the loop when the user types ‘stop’.\nSolution\nbreak.cpp#include #include using namespace std;\nint main(){  string response;\n  while(true){    cout << \"Do you want more tea (type 'stop' to exit)?: \";    getline(cin, response);\n    if(response == \"stop\"){      //exit the loop      break;    }\n    cout << \"Here is your another cup of tea. \\n\";  }",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "< \"Do you want more tea (type 'stop' to exit)?: \";    getline(cin, response);\n    if(response == \"stop\"){      //exit the loop      break;    }\n    cout << \"Here is your another cup of tea. \\n\";  }\n  cout << \"No more tea will be served to you\";  return 0;}\nGoing through the code:\nIn this case, we are using the break keyword to exit the loop when the user types ‘stop’. The break keyword is used to exit the loop immediately, without executing the remaining code inside the loop.\nContinue Keyword\nContinue keyword is used to skip the remaining code inside the loop and move to the next iteration of the loop.\nTask\nWrite a program that skips brewing green tea if the user dislikes it. Use a continue statement to skip over green tea but brew other types of tea in a list.\nSolution\n#include #include using namespace std;\nint main(){  string teaTypes[5] = {\"Oolong tea\", \"Orange Tea\", \"Green Tea\", \"Black Tea\", \"Lemon Tea\"};\n  for(int i = 0 ; i < 5 ; i++){    if(teaTypes[i] == \"Green Tea\"){      cout",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "sing namespace std;\nint main(){  string teaTypes[5] = {\"Oolong tea\", \"Orange Tea\", \"Green Tea\", \"Black Tea\", \"Lemon Tea\"};\n  for(int i = 0 ; i < 5 ; i++){    if(teaTypes[i] == \"Green Tea\"){      cout << \"Skipping the \" << teaTypes[i] << endl;      continue;    }\n    cout << \"Brewing \" << teaTypes[i] << \"...\" << endl;  }\n  return 0;}\nGoing through the code:\nIn this code solution, we are introducing 2 new concepts:\nstring teaTypes[5] = {\"Oolong tea\", \"Orange Tea\", \"Green Tea\", \"Black Tea\", \"Lemon Tea\"}; This line declares an array of strings with 5 elements.\nArray is a collection of elements of the same type. In this case, we are declaring an array of strings. In memory, the array is stored as a contiguous block of memory.\nAlso we are using the continue keyword to skip over the green tea. The continue keyword is used to skip the remaining code inside the loop and move to the next iteration of the loop.\nNested Loops\nNested loops are loops inside of loops. The inner loop is executed for ea",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "e continue keyword is used to skip the remaining code inside the loop and move to the next iteration of the loop.\nNested Loops\nNested loops are loops inside of loops. The inner loop is executed for each iteration of the outer loop.\nTask\nWrite a program that brews multiple cups of different types of tea. For each type of tea, brew 3 cups using a nested loop.\nSolution\nnested-loops.cpp#include #include using namespace std;\nint main(){  string teaTypes[5] = {\"Oolong tea\", \"Orange Tea\", \"Green Tea\", \"Black Tea\", \"Lemon Tea\"};\n  for(int i = 0 ; i < 5 ; i++){    cout << \"Brewing \" << teaTypes[i] << \"...\" << endl;\n    for (int j = 1 ; j <= 3 ; j++){      cout << \"Brewing \" << j << \" cup of \" << teaTypes[i] << endl;    }  }\n  return 0;}\nGoing through the code:\nIn this code solution, we have already gone through the concept of Array. Further, we are using nested loops to brew multiple cups of different types of tea. The outer loop is used to iterate over the array of strings, and the inner loop",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "gone through the concept of Array. Further, we are using nested loops to brew multiple cups of different types of tea. The outer loop is used to iterate over the array of strings, and the inner loop is used to iterate over the number of cups to be brewed.\nFor every iteration of the outer loop, the inner loop will execute 3 times. The inner loop will print the number of cups being brewed and the type of tea being brewed.\nSummary\nIn this chapter, we have learned about loops in C++. We have also learned about the different types of loops and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousControl FlowNext Functions    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "unity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/loops/"
  },
  {
    "content": "Before You Start | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           Before You Start      Thank you for your interest in contributing to ChaiDocs! But here’s the deal: our quality bar is high.\nChaiDocs is built to help students build the habit of learning from documentation. Our vision is to offer well-structured guides with video explanations—so everything students need is in one place.\nWe expect every contribution to be well-written, in-depth, and genuinely helpful. Contributing isn’t about speed; it’s about im",
    "source": "https://docs.chaicode.com/contribute/guide"
  },
  {
    "content": "des with video explanations—so everything students need is in one place.\nWe expect every contribution to be well-written, in-depth, and genuinely helpful. Contributing isn’t about speed; it’s about impact.\nBefore You Start Contributing, Please Make Sure to:\n\nGo through Starter Kit.\nAvoid copyrighted content\nNo AI-Generated content.\nUse clear, beginner-friendly language.\nAim for clarity, using multiple coding examples and high-quality images to enhance the learning experience.\nOur team will review all submissions before they go live.\n\nThanks for helping us maintain excellence!\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 13, 2025  Next Project Structure    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/guide"
  },
  {
    "content": "Community\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/guide"
  },
  {
    "content": "Main Content | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Heading     How to structure page content    Automatic heading anchor links      Spacing    Branding    Inline Styles    Asides     Note aside    Custom aside titles    More aside types      Blockquotes    Code Blocks     Expressive Code features    Text markers    Frames and titles      Details    Other Markdown Features    On this page   Overview    Heading     How to structure page content    Automatic heading anchor links      Spacing    Branding    Inline Styles    Asides     No",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "Details    Other Markdown Features    On this page   Overview    Heading     How to structure page content    Automatic heading anchor links      Spacing    Branding    Inline Styles    Asides     Note aside    Custom aside titles    More aside types      Blockquotes    Code Blocks     Expressive Code features    Text markers    Frames and titles      Details    Other Markdown Features           Main Content      ChaiDocs supports the full range of Markdown syntax in .md files as well as frontmatter YAML to define metadata such as a title and description.\nPlease be sure to check the MDX guide as Markdown support and usage can differ.\nHeading\nYou can structure content using a heading. Headings in Markdown are indicated by a number of # at the start of the line.\nHow to structure page content\nChaiDocs platform is configured to automatically use your page title as a top-level heading and will include an “Overview” heading at top of each page’s table of contents.\nWe recommend starting each",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "t\nChaiDocs platform is configured to automatically use your page title as a top-level heading and will include an “Overview” heading at top of each page’s table of contents.\nWe recommend starting each page with regular paragraph text content and using on-page headings from  and down. For example:\n---title: Content Guidedescription: How to use structure content in ChaiDocs---\nThis page describes how to use Markdown in ChaiDocs.\nAutomatic heading anchor links\nUsing headings in Markdown will automatically give you anchor links so you can link directly to certain sections of your page:\n---title: My page of contentdescription: How to use ChaiDocs's built-in anchor links---\n## Introduction\nI can link to [my conclusion](#conclusion) lower on the same page.\n## Conclusion\n`https://my-site.com/page1/#introduction` navigates directly to my Introduction.\nSpacing\nTo maintain visual consistency in your documentation, it’s important to handle spacing properly, especially after specialized elements.\nA",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "/#introduction` navigates directly to my Introduction.\nSpacing\nTo maintain visual consistency in your documentation, it’s important to handle spacing properly, especially after specialized elements.\nAfter  or  elements, you may want to add extra spacing before continuing with regular text. For regular line breaks in MDX, you can simply use empty lines in the markdown. However, when you need additional spacing beyond what a regular line break provides, use the  tag. For example:\n---title: My page of contentdescription: How to use ChaiDocs's built-in anchor links---\n\nThe file tree looks like this -\n  - src/    - components/      - footer.tsx      - index.ts\nBranding\nEvery page should include the “Start Your Journey with ChaiCode” branding element at the end. This consistent branding helps maintain the identity of the documentation.\nAdd the StartJourney component at the end of your MDX file:\n---title: Your page titledescription: Your page description---......\nimport StartJourney from '@/c",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "intain the identity of the documentation.\nAdd the StartJourney component at the end of your MDX file:\n---title: Your page titledescription: Your page description---......\nimport StartJourney from '@/components/branding/start-journey.astro';\n\n\n\nNote: The branding element must be included on all documentation pages to maintain consistency across the documentation site.\n\nInline Styles\n\n\nText can be bold, italic, or strikethrough.\nText can be **bold**, _italic_, or ~~strikethrough~~.\n\n\nYou can link to another page.\nYou can [link to another page](/getting-started/).\n\n\nYou can highlight inline code with backticks.\nYou can highlight `inline code` with backticks.\n\n\nAsides\nAsides (also known as “admonitions” or “callouts”) are useful for displaying secondary information alongside a page’s main content.\nStarlight provides a custom Markdown syntax for rendering asides. Aside blocks are indicated using a pair of triple colons ::: to wrap your content, and can be of type note, tip, caution or dange",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "ent.\nStarlight provides a custom Markdown syntax for rendering asides. Aside blocks are indicated using a pair of triple colons ::: to wrap your content, and can be of type note, tip, caution or danger.\nYou can nest any other Markdown content types inside an aside, but asides are best suited to short and concise chunks of content.\nNote aside\nNoteShadcn now supports tailwind v4. You can get started with this command:         bun      pnpm      npm      yarn      Terminal windowbunx shadcn@latest init  Terminal windowpnpm dlx shadcn@latest init  Terminal windownpx shadcn@latest init  Terminal windowyarn dlx shadcn@latest init      \nimport {CodePackageManagers} from '@/components/code'\n:::noteShadcn now supports tailwind v4. You can get started with this command:\n:::\nCustom aside titles\nYou can specify a custom title for the aside in square brackets following the aside type, e.g. :::tip[Did you know?].\nDid you know?Astro helps you build faster websites with “Islands Architecture”.\n:::tip[",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "an specify a custom title for the aside in square brackets following the aside type, e.g. :::tip[Did you know?].\nDid you know?Astro helps you build faster websites with “Islands Architecture”.\n:::tip[Did you know?]Astro helps you build faster websites with [“Islands Architecture”](https://docs.astro.build/en/concepts/islands/).:::\nMore aside types\nCaution and danger asides are helpful for drawing a user’s attention to details that may trip them up.\nIf you find yourself using these a lot, it may also be a sign that the thing you are documenting could benefit from being redesigned.\nCautionIf you are not sure you want to become best developer, think twice before using ChaiDocs.\nDangerSide effects of Chai\nBecoming the office documentation hero\nHaving your colleagues actually understand your code.\nUse ChaiDocs at your own risk!\n:::cautionIf you are not sure you want to become best developer, think twice before using [ChaiDocs](/).:::\n:::dangerSide effects of Chai\n- Becoming the office docum",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "de.\nUse ChaiDocs at your own risk!\n:::cautionIf you are not sure you want to become best developer, think twice before using [ChaiDocs](/).:::\n:::dangerSide effects of Chai\n- Becoming the office documentation hero- Having your colleagues actually understand your code.\nUse [ChaiDocs](/) at your own risk!:::\nBlockquotes\n\nThis is a blockquote, which is commonly used when quoting another person or document.\nBlockquotes are indicated by a > at the start of each line.\n\n> This is a blockquote, which is commonly used when quoting another person or document.>> Blockquotes are indicated by a `>` at the start of each line.\nCode Blocks\nA code block is indicated by a block with three backticks ``` at the start and end. You can indicate the programming language being used after the opening backticks.\n// Javascript code with syntax highlighting.const chai = () => {  console.log(\"Welcome to ChaiDocs!\");}\nchai();\n```js// Javascript code with syntax highlighting.const chai = () => {  console.log(\"Welcom",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "Javascript code with syntax highlighting.const chai = () => {  console.log(\"Welcome to ChaiDocs!\");}\nchai();\n```js// Javascript code with syntax highlighting.const chai = () => {  console.log(\"Welcome to ChaiDocs!\");}\nchai();```\nExpressive Code features\nChaiDocs uses Expressive Code to extend formatting possibilities for code blocks.\nExpressive Code’s text markers and window frames plugins are enabled by default..\nText markers\nYou can highlight specific lines or parts of your code blocks using Expressive Code text markers on the opening line of your code block.\nUse curly braces ({ }) to highlight entire lines, and quotation marks to highlight strings of text.\nThere are three highlighting styles: neutral for calling attention to code, green for indicating inserted code, and red for indicating deleted code.\nBoth text and entire lines can be marked using the default marker, or in combination with ins= and del= to produce the desired highlighting.\nExpressive Code provides several options",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "ing deleted code.\nBoth text and entire lines can be marked using the default marker, or in combination with ins= and del= to produce the desired highlighting.\nExpressive Code provides several options for customizing the visual appearance of your code samples.\nMany of these can be combined, for highly illustrative code samples.\nPlease explore the Expressive Code documentation for the extensive options available.\nSome of the most common examples are shown below:\n\n\nMark entire lines & line ranges using the { } marker:\nconst demo = () => {  // This line (#2) and the next one are highlighted  return 'This is line #3 of this snippet';}\n```js {2-3}const demo = () => {  // This line (#2) and the next one are highlighted  return 'This is line #3 of this snippet';}```\n\n\nMark selections of text using the \" \" marker or regular expressions:\n// Individual terms can be highlighted, tooconst demo = () =>{  return 'Even regular expressions are supported';}\n```js \"Individual terms\" /Even.*supported/// I",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "the \" \" marker or regular expressions:\n// Individual terms can be highlighted, tooconst demo = () =>{  return 'Even regular expressions are supported';}\n```js \"Individual terms\" /Even.*supported/// Individual terms can be highlighted, tooconst demo = () => {  return 'Even regular expressions are supported';}```\n\n\nMark text or lines as inserted or deleted with ins or del:\nconst demo = () => {  console.log('These are inserted and deleted marker types');  // The return statement uses the default marker type  return true;}\n```js \"return true;\" ins=\"inserted\" del=\"deleted\"const demo = () => {  console.log('These are inserted and deleted marker types');  // The return statement uses the default marker type  return true;}```\n\n\nCombine syntax highlighting with diff-like syntax:\nconst thisIsJavaScript = () => {  // This entire block gets highlighted as JavaScript,  // and we can still add diff markers to it!  console.log('Old code to be removed')  console.log('New and shiny code!')}\n```diff la",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "ript = () => {  // This entire block gets highlighted as JavaScript,  // and we can still add diff markers to it!  console.log('Old code to be removed')  console.log('New and shiny code!')}\n```diff lang=\"js\"  const thisIsJavaScript = () => {    // This entire block gets highlighted as JavaScript,    // and we can still add diff markers to it!-   console.log('Old code to be removed')+   console.log('New and shiny code!')  }```\n\n\nFrames and titles\nCode blocks can be rendered inside a window-like frame.\nA frame that looks like a terminal window will be used for shell scripting languages (e.g. bash or sh).\nOther languages display inside a code editor-style frame if they include a title.\nA code block’s optional title can be set either with a title=\"...\" attribute following the code block’s opening backticks and language identifier, or with a file name comment in the first lines of the code.\n\n\nAdd a file name tab with a comment\nmy-test-file.jsconsole.log('Hello World!');\n```js// my-test-file",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "ing backticks and language identifier, or with a file name comment in the first lines of the code.\n\n\nAdd a file name tab with a comment\nmy-test-file.jsconsole.log('Hello World!');\n```js// my-test-file.jsconsole.log('Hello World!');```\n\n\nAdd a title to a Terminal window\nInstalling dependencies…npm install\n```bash title=\"Installing dependencies…\"npm install```\n\n\nDisable window frames with frame=\"none\"\necho \"This is not rendered as a terminal despite using the bash language\"\n```bash frame=\"none\"echo \"This is not rendered as a terminal despite using the bash language\"```\n\n\nDetails\nDetails (also known as “disclosures” or “accordions”) are useful to hide content that is not immediately relevant.\nUsers can click a short summary to expand and view the full content.\nUse the standard HTML  and  elements in your Markdown content to create a disclosure widget.\nYou can nest any other Markdown syntax inside a  element.\nWhat will I learn with ChaiCode?At ChaiCode, you’ll gain practical skills across",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "ents in your Markdown content to create a disclosure widget.\nYou can nest any other Markdown syntax inside a  element.\nWhat will I learn with ChaiCode?At ChaiCode, you’ll gain practical skills across key tech areas:\nWeb Development: Gain expertise in both front-end and back-end development, working with databases and deploying your projects.\nGenerative AI: Dive into the world of AI and learn how to build and work with generative models.\nDevOps for Developers: Explore the practices that combine software development and IT operations.\nData Science: Learn how to work with large datasets, build predictive models, and apply machine learning techniques to solve real-world problems.\nDSA: Understand the building blocks of efficient programming.\nThese courses provide the skills you need to launch your tech career, build real-world projects, and contribute to innovations in your chosen field.\n What will I learn with ChaiCode?\n  At ChaiCode, you'll gain practical skills across key tech areas:\n  -",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "our tech career, build real-world projects, and contribute to innovations in your chosen field.\n What will I learn with ChaiCode?\n  At ChaiCode, you'll gain practical skills across key tech areas:\n  - **Web Development**: Gain expertise in both front-end and back-end development, working with databases and deploying your projects.  - **Generative AI**: Dive into the world of AI and learn how to build and work with generative models.  - **DevOps for Developers**: Explore the practices that combine software development and IT operations.  - **Data Science**: Learn how to work with large datasets, build predictive models, and apply machine learning techniques to solve real-world problems.  - **DSA**: Understand the building blocks of efficient programming.\n  These courses provide the skills you need to launch your tech career, build real-world projects, and contribute to innovations in your chosen field.\nOther Markdown Features\nChaiDocs supports all other Markdown authoring syntax, such a",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "ou need to launch your tech career, build real-world projects, and contribute to innovations in your chosen field.\nOther Markdown Features\nChaiDocs supports all other Markdown authoring syntax, such as lists and tables. See the Markdown Cheat Sheet for a quick overview of all the Markdown syntax elements.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousAdding New ContentNext Page Metadata    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/authoring-content/"
  },
  {
    "content": "404 | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                               404 This page isn’t in our encyclopedia. Take me home.           \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/getting-started/"
  },
  {
    "content": "Before You Start | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           Before You Start      Thank you for your interest in contributing to ChaiDocs! But here’s the deal: our quality bar is high.\nChaiDocs is built to help students build the habit of learning from documentation. Our vision is to offer well-structured guides with video explanations—so everything students need is in one place.\nWe expect every contribution to be well-written, in-depth, and genuinely helpful. Contributing isn’t about speed; it’s about im",
    "source": "https://docs.chaicode.com/contribute/guide/"
  },
  {
    "content": "des with video explanations—so everything students need is in one place.\nWe expect every contribution to be well-written, in-depth, and genuinely helpful. Contributing isn’t about speed; it’s about impact.\nBefore You Start Contributing, Please Make Sure to:\n\nGo through Starter Kit.\nAvoid copyrighted content\nNo AI-Generated content.\nUse clear, beginner-friendly language.\nAim for clarity, using multiple coding examples and high-quality images to enhance the learning experience.\nOur team will review all submissions before they go live.\n\nThanks for helping us maintain excellence!\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 13, 2025  Next Project Structure    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/guide/"
  },
  {
    "content": "Community\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/guide/"
  },
  {
    "content": "Adding Content | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Adding Pages To Existing Track     Best Practices      Adding New Tracks    On this page   Overview    Adding Pages To Existing Track     Best Practices      Adding New Tracks           Adding Content      ChaiDocs organizes content using a hierarchy of tracks, sub-tracks, and individual pages. This guide will walk you through adding new content to existing tracks or creating entirely new tracks.\nAdding Pages To Existing Track\nAdd new pages in docs by creating .md or .mdx files in",
    "source": "https://docs.chaicode.com/contribute/starter-kit/adding-contnet/"
  },
  {
    "content": "al pages. This guide will walk you through adding new content to existing tracks or creating entirely new tracks.\nAdding Pages To Existing Track\nAdd new pages in docs by creating .md or .mdx files in src/content/docs/. The platform supports organizing files using sub-folders to create multiple path segments in the URL.\nFor example, the following file structure will generate pages at the following URLs:\n\ndocs.chaicode.com/web-dev/javascript/intro.md\ndocs.chaicode.com/devops/getting-started.md\n\nDirectorysrc/\nDirectorycontent/\nDirectorydocs/\nDirectoryweb-dev/\nDirectoryjavascript/\nintro.mdDirectorydevops/\ngetting-started.md\nBest Practices\n\nThe file name appears in the URL path, so choose descriptive names\nUse lowercase letters and hyphens for file names (e.g. getting-started.mdx, not Getting Started.mdx)\nPrefer using .mdx files over .md for enhanced content features and component support\nUse the frontmatter to add metadata to your pages\n\nAdding New Tracks\nTo create an entirely new track se",
    "source": "https://docs.chaicode.com/contribute/starter-kit/adding-contnet/"
  },
  {
    "content": "tarted.mdx)\nPrefer using .mdx files over .md for enhanced content features and component support\nUse the frontmatter to add metadata to your pages\n\nAdding New Tracks\nTo create an entirely new track section:\n\n\nCreate a new folder in src/content/docs/\n\n\nUpdate astro.config.mjs to add the new track to the sidebar configuration\nastro.config.mjsexport default defineConfig({  ...  sidebar: [    {label: \"contribute\", autogenerate: {directory: \"contribute\"}},    {label: \"web-dev\", autogenerate: {directory: \"web-dev\"}},    {label: \"data-science\", autogenerate: {directory: \"data-science\"}},  ],  ...})\n\n\nThis change will automatically generate a new sidebar group called “data-science” based on the contents of the data-science directory.\nThe new track will be accessible at docs.chaicode.com/data-science/introduction.\nDirectorysrc/\nDirectorycontent/\nDirectorydocs/\nDirectorydata-science/\nintroduction.mdx\n\nEvery documentation page needs frontmatter to define its metadata. We are going to understand a",
    "source": "https://docs.chaicode.com/contribute/starter-kit/adding-contnet/"
  },
  {
    "content": "ce/introduction.\nDirectorysrc/\nDirectorycontent/\nDirectorydocs/\nDirectorydata-science/\nintroduction.mdx\n\nEvery documentation page needs frontmatter to define its metadata. We are going to understand about frontmatter in the next section.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousManaging AssetsNext Authoring Content    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/adding-contnet/"
  },
  {
    "content": "Tracks | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                             Start Learning   Web Dev full-stack track.           DevOps for dummies.          Youtube guides for video courses.           Data Science the future is data.   \nYour browser does not support the video tag.\n      Gen Ai the next big thing.             more coming soon...       \n  Brought to you by ChaiCode            Chai aur Code is an unique initiative by Hitesh Choudhary where he mentors people who want to learn programming and grow in the field.Learn about ChaiCode         \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/tracks/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your",
    "source": "https://docs.chaicode.com/gen-ai/getting-started"
  },
  {
    "content": "eos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encount",
    "source": "https://docs.chaicode.com/gen-ai/getting-started"
  },
  {
    "content": "r additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/gen-ai/getting-started"
  },
  {
    "content": "ake the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next MacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/gen-ai/getting-started"
  },
  {
    "content": "Windows | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    WSL     Updating Linux    Mapping Your Linux Drive    Restarting WSL      Windows Terminal     Default Profile    Starting Directory      Zsh     Installing Zsh    OhMyZsh    cURL    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Python     Python Installation    Setting Up Your Python Environment      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References    On this pag",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "RN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References    On this page   Overview    Prerequisites    WSL     Updating Linux    Mapping Your Linux Drive    Restarting WSL      Windows Terminal     Default Profile    Starting Directory      Zsh     Installing Zsh    OhMyZsh    cURL    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Python     Python Installation    Setting Up Your Python Environment      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References           Windows      A question that comes to mind for every beginner: How to set up my development environment?\nThe following guide will teach you how to s",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "sion    Useful Extensions      References           Windows      A question that comes to mind for every beginner: How to set up my development environment?\nThe following guide will teach you how to set up a minimal development environment for Windows.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nWindows 11\nA GitHub account\n\nWSL\nThe first and most important part of setting up your Windows dev environment is installing the Windows Subsystem for Linux (WSL). We recommend sticking with Ubuntu but feel free to try out as many distributions as you like.\nThere used to be a handful of steps needed to install it, but we now only need to enter the following command into PowerShell or Command Prompt:\nTerminal windowwsl --install\nUpdating Linux\nIt is recommended that you regular",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "ful of steps needed to install it, but we now only need to enter the following command into PowerShell or Command Prompt:\nTerminal windowwsl --install\nUpdating Linux\nIt is recommended that you regularly update and upgrade your packages. In Ubuntu or Debian, we use the apt package manager:\nTerminal windowsudo apt update && sudo apt upgrade\nWindows does not automatically update or upgrade your Linux distribution(s). This is a task that most Linux users prefer to control themselves.\nMapping Your Linux Drive\nWhen you open the Windows file explorer, it displays your devices and drives. We are going to add our Ubuntu virtual drive as a network location for easy access.\n\n\nOpen the \\\\wsl$\\ location from file explorer:\n\n\n\nRight-click on the Ubuntu folder, and select Map network drive:\n\n\n\nSelect the drive letter you would like to use, leave Reconnect at sign-in checked and Connect using different credentials unchecked, and then click finish (mine will look slightly different because it’s already",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "drive letter you would like to use, leave Reconnect at sign-in checked and Connect using different credentials unchecked, and then click finish (mine will look slightly different because it’s already been done):\n\n\n\nThe result should look something like this:\n\n\n\nIf you wanted to access your Windows files from the Linux terminal, they are found in the /mnt/ directory, so your Windows user directory would be located at /mnt/c/Users/username.\nWith your Ubuntu drive mapped, you can easily drag/drop or copy/paste Windows files to the Linux file system by using the file explorer.\nPin Your Code Directory\nAnother quick tip I have is to create a code directory inside of Ubuntu, and then pin it to the quick access menu found on the left side of the file explorer. This comes in handy when transferring files quickly between Windows and Linux.\n\n\nOpen File Explorer and click on the Ubuntu network drive we created\n\n\nSelect the home dir, and then your user directory\n\n\nRight-click and create a new fold",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "g files quickly between Windows and Linux.\n\n\nOpen File Explorer and click on the Ubuntu network drive we created\n\n\nSelect the home dir, and then your user directory\n\n\nRight-click and create a new folder, name it code, or anything else you’d like\n\n\nDrag that new folder to the left, underneath the star icon that says Quick access.\n\n\n\nRestarting WSL\nIf for some reason WSL stops working, you can restart it with these two commands from PowerShell/Command Prompt:\nTerminal windowwsl.exe --shutdownwsl.exe\nWindows Terminal\nA few quick things we recommend setting up are the default profile and your starting home directory. These settings make it so launching Windows Terminal will open directly into WSL inside our user’s home directory.\nDefault Profile\nWindows Terminal will open a PowerShell or Command Prompt shell when launched by default, here is how to switch it to WSL:\n\n\nSelect the ˅ icon from Windows Terminal and go to the Settings menu:\n\n\n\nIn the Startup section you will find the Default pr",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "nd Prompt shell when launched by default, here is how to switch it to WSL:\n\n\nSelect the ˅ icon from Windows Terminal and go to the Settings menu:\n\n\n\nIn the Startup section you will find the Default profile dropdown, select Ubuntu. Below it, select Windows Terminal as the Default terminal application:\n\n\n\nStarting Directory\nA default Ubuntu terminal will open to the root directory. To make finding your files a little quicker we can have it open into your home directory instead.\n\n\nUnder the Profiles section in the settings menu click on Ubuntu\n\n\nAt the General tab, you will find a Starting directory input\n\n\nEnter the following replacing “username” with your Ubuntu user name: \\\\wsl$\\Ubuntu\\home\\username\n\n\nYou can leave the Use parent process directory box unchecked\n\n\nIf it is still opening into your / directory, change the Command line setting located right above the Starting directory input box to the following: wsl.exe -d Ubuntu\n\n\n\nZsh\nZ shell works almost identically to the standard BAS",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "o your / directory, change the Command line setting located right above the Starting directory input box to the following: wsl.exe -d Ubuntu\n\n\n\nZsh\nZ shell works almost identically to the standard BASH shell found on default Linux installs. What makes it different is its support for plugins and themes, along with some extra features like spelling correction and recursive path expansion. It’s time to throw BASH in the trash!\nInstalling Zsh\nZsh can be installed with one command:\nTerminal windowsudo apt install zsh\nAfter installing, type the zsh command. Zsh will ask you to choose some configurations. We will do this later on while installing oh-my-zsh, so choose option 0 to create the config file and prevent this message from showing again.\nOhMyZsh\nThe most popular plugin framework by far is OhMyZsh. It comes preloaded with loads of plugins, themes, helpers, and more. It can help with productivity for sure, but more importantly, it just looks cool 😎.\ncURL\nFirst off, we need to make sure",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "OhMyZsh. It comes preloaded with loads of plugins, themes, helpers, and more. It can help with productivity for sure, but more importantly, it just looks cool 😎.\ncURL\nFirst off, we need to make sure we have cURL installed. Short for “Client URL”, it’s a way to transfer data from the command line, and that’s how we will download OhMyZsh.\nTerminal windowsudo apt install curl\nInstalling OhMyZsh\nEnter the following command into your terminal to install OhMyZsh:\nTerminal windowsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\nThat’s it! You should now see a .oh-my-zsh directory inside of your home directory. To change your plugins and themes you will need to edit your .zshrc file, also found in your home dir.\nHere is a list of all the themes and plugins that come bundled with OhMyZsh.\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on histo",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "come bundled with OhMyZsh.\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\nTerminal windowplugins=(git zsh-autosuggestions)\n\n\nStart a new terminal session.\n\n\nzsh-syntax-highlighting\nThis package provides syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "al. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zshrc:\nTerminal windowplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n\n\nStart a new terminal session.\nA huge list of plugins can be found at the awesome zsh plugins repo.\n\n\nGit Config\nGit should come pre-installed on most, if not all of the WSL Linux distributions. To ensure you have the latest version, use the following command in an Ubuntu or Debian-based distro:\nTerminal windowsudo apt install git\nName\nTo set up your Git config file, open a WSL command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (repla",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "nd line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add your GitHub username to link it to git (case sensitive!):\nTerminal windowgit config --global user.username \"GitHub username\"\nMake sure you are inputting user.username and not user.name otherwise, you will overwrite your name and you will not be correctly synced to your GitHub account.\nYou can double-check any of your settings by typing git config --global user.name and so on. To make any changes just type the necessary command again as in the examples above.\nPython\nThis section covers setting up python environment for Windows. Python is one of the most powerful programming languages, mostly used in data science, machine learning, and big data anal",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "above.\nPython\nThis section covers setting up python environment for Windows. Python is one of the most powerful programming languages, mostly used in data science, machine learning, and big data analytics.\nPython Installation\n\n\nDownload an installer from the Python website. To do that, visit https://www.python.org/downloads/, it detects your operating system automatically and shows a big button for downloading the latest version of Python installer. If it doesn’t, click the Windows link and choose the latest Python release.\n\n\nOnce the download is complete, double-click the installer to start installing Python. The installer will walk you through a wizard to complete the installation, and in most cases, the default settings work well, so install it like the other applications on windows.\n\n\nThis will install the latest version of Python 3. You can verify the installation with:\nTerminal windowpython --version\n\n\nIf the installer does not include the Add Python to PATH checkbox or you have",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "This will install the latest version of Python 3. You can verify the installation with:\nTerminal windowpython --version\n\n\nIf the installer does not include the Add Python to PATH checkbox or you have not selected that option, add Python to PATH manually.\n\n\nSetting Up Your Python Environment\nOnce you’ve installed Python you might want to explore some additional tools that will make your Python development experience better. These tools help you manage different Python versions and keep your projects’ dependencies isolated.\nManaging Multiple Python Versions with uv\nIf you work on different Python projects, you might find yourself needing different Python versions. This is where uv comes in handy. It’s a tool that allows you to install and switch between multiple Python versions effortlessly.\n\n\nTo install uv use irm to download the script and execute it with iex:\nTerminal windowpowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n\nTo enable shell autocomple",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": ".\n\n\nTo install uv use irm to download the script and execute it with iex:\nTerminal windowpowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n\nTo enable shell autocompletion for uv, run this:\nTerminal window  if (!(Test-Path -Path $PROFILE)) {    New-Item -ItemType File -Path $PROFILE -Force  }  Add-Content -Path $PROFILE -Value '(& uv generate-shell-completion powershell) | Out-String | Invoke-Expression'\n\n\nTo enable shell autocompletion for uvx, run this:\nTerminal window  if (!(Test-Path -Path $PROFILE)) {    New-Item -ItemType File -Path $PROFILE -Force  }  Add-Content -Path $PROFILE -Value '(& uvx --generate-shell-completion powershell) | Out-String | Invoke-Expression'\nThen restart the shell or source the shell config file.\n\n\nInstall the Python version you need:\nTerminal windowuv python install 3.10.x\n\n\nWorking with Virtual Environments\nVirtual environments are an essential tool for modern Python development. They create isolated spaces where you can",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "ou need:\nTerminal windowuv python install 3.10.x\n\n\nWorking with Virtual Environments\nVirtual environments are an essential tool for modern Python development. They create isolated spaces where you can install packages without affecting your system-wide Python installation. This prevents dependency conflicts between different projects.\n\n\nCreate a new environment using uv:\nTerminal windowuv venv\n\n\nInstall a package in the new virtual environment\nTerminal windowuv pip install ruff\n\n\nThe virtual environment can be “activated” to make its packages available:\nTerminal windowsource .venv/bin/activate\n\n\nWhen you’re done, deactivate the environment:\nTerminal windowdeactivate\n\n\nDocker\nThis section covers setting docker desktop for MacOS. In the end, you will have a docker-daemon, docker-cli, docker-compose, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the e",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "compose, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the executable for docker-desktop.\n\n\nInstall the executable, and choose the appropriate virtualization environment while installing if the option shows up.\n\n\nDone with installation. Sign in with the docker account or skip for the time being.\n\n\nTest Docker CLI\nMake sure you at least launch docker-desktop once, and let it run in the background.\nTerminal windowdocker -v\nYou have successfully installed docker-desktop and all other necessary tools docker-cli, docker-compose, and more.\nPackage Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package man",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "ling, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gained popularity in the JavaScript community: NPM, Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js, you automatically get NPM installed on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTermi",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "ministic dependency resolution.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable\n\n\nYou can quickly check whether Corepack is enabled by running yarn exec env: if you get a path as output, Corepack is properly installed.\n\n\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable pnpm\n\n\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete wi",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "This is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable pnpm\n\n\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.\n\n\nIt aims to provide a high-performance alternative to Node.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       PowerShell/cmd.eve     npm     scoop      Terminal windowpowershell -c \"irm bun.sh/install.ps1|iex\"  Terminal windownpm install -g bun  Terminal windowscoop install bun   \n\n\nBasic commands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThi",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "nd run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThis will create a package.json file with the default settings.\n\n\nInstall a package\nTo install the required package, you can run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "pnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a script defined in your package.json file, run the following commands\n         bun      pnpm      npm      yarn      Terminal windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their tooling in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everyth",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "e lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything that is needed for coding (editor) and executing the code (integrated terminal).\n\n\nInstalling VS Code\nVS Code is available on Windows, macOS, and Linux. You can download the latest Windows installer here. We recommend using the stable build.\nChanging the Default Shell\nThe WSL2 shell can be chosen as the default VS Code terminal by pressing Ctrl + Shift + P and typing/choosing Terminal: Select Default Profile, then selecting zsh:\n\n\nRemote Extension\n\n\nInstall the Remote - WSL extension on VS Code.\n\n\nThis allows you to use WSL as your integrated development environment and will handle compatibility and pathing for you. Learn more.\n\n\nThis extension will also allow you to launch VS Code right from your WSL terminal by using the code command.\n\n\nIf I were inside the root directory of my repos",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "bility and pathing for you. Learn more.\n\n\nThis extension will also allow you to launch VS Code right from your WSL terminal by using the code command.\n\n\nIf I were inside the root directory of my repository, I would use code . to launch the entire directory inside VS Code.\nTerminal windowcd my-projectcode .\n\n\nUseful Extensions\n\n\nPython - Includes many useful features, such as code completion with IntelliSense, debugging, unit testing support, etc.\n\n\nDocker - Makes it easy to create, manage, and debug containerized applications.\n\n\nError Lens - Improve highlighting of errors, warnings and other language diagnostics.\n\n\nindent-rainbow - Makes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nvscode-icons - Icons for Visual Studio Code\n\n\nFluent Icons - Fluent product icons for Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nSet up a WSL development environment learn.microsoft.comS",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "l Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nSet up a WSL development environment learn.microsoft.comSet up a WSL development environment using best practices from this set-by-step guide. Learn how to run Ubuntu, Visual Studio Code or Visual Studio, Git, Windows Credential Manager, MongoDB, MySQL, Docker remote containers and more.Install WSL learn.microsoft.comInstall Windows Subsystem for Linux with the command, wsl --install. Use a Bash terminal on your Windows machine run by your preferred Linux distribution - Ubuntu, Debian, SUSE, Kali, Fedora, Pengwin, Alpine, and more are available.WSL2 Tutorial: The Complete Guide for Windows 10 & 11 — SitePoint sitepoint.comLearn how to install, set up, manage, and use a full Linux environment on Windows 10 & 11 PCs with Windows Subsystem for Linux 2 (WSL2). Complete WSL2 Tutorial.Git a Grip Series' Articles dev.toView Git a Grip Series' Articles",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "p, manage, and use a full Linux environment on Windows 10 & 11 PCs with Windows Subsystem for Linux 2 (WSL2). Complete WSL2 Tutorial.Git a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosystem/git-credential-managerZSH and Oh-My-Zsh on Windows Subsystem for Linux (WSL) kevinprogramming.comIn this posting, I will show how to install ZSH and Oh-My-Zsh on Windows PC (WSL). This will be helpful if you want to setup a Linux development environment on Windows PC.\n\nI have already installed Ubuntu 20.04 on Windows Subsystem for Linux (WSL). Bash is the default shellSet up Node.js on WSL 2 learn.microsoft.comA guide to help you get your Node.js",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "nt on Windows PC.\n\nI have already installed Ubuntu 20.04 on Windows Subsystem for Linux (WSL). Bash is the default shellSet up Node.js on WSL 2 learn.microsoft.comA guide to help you get your Node.js development environment set up on Windows Subsystem for Linux (WSL).Installing Chocolatey chocolatey.orgChocolatey is software management automation for Windows that wraps installers, executables, zips, and scripts into compiled packages. Chocolatey integrates w/SCCM, Puppet, Chef, etc. Chocolatey is trusted by businesses to manage software deployments.Windows Terminal installation learn.microsoft.comLearn how to install and set up Windows Terminal.uv docs.astral.sh\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousMacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "y: Akash Kadlag Last updated: Apr 13, 2025   PreviousMacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/windows/"
  },
  {
    "content": "MacOS | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Python     Python Installation    Setting Up Your Python Environment      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    MacOs integration    Useful Extensions      References    On this page   Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "ng VS Code    MacOs integration    Useful Extensions      References    On this page   Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Python     Python Installation    Setting Up Your Python Environment      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    MacOs integration    Useful Extensions      References           MacOS      A question that comes to mind for every beginner: How to set up my development environment?\nThe following guide will teach you how to set up a minimal development environment for MacOS.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it wi",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "nment for MacOS.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nApple Silicon Device 🫠\nMacOs 11 or later\nA GitHub account\n\nHomebrew\nHomebrew calls itself The missing package manager for macOS and is an essential tool for any developer.\n\n\nInstallation script\nTerminal window/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\nThe Homebrew installation script will ask you to enter your Mac user password. This is the password you used to sign into your Mac.\nTerminal windowPassword:\nYou won’t see the characters as you type. Press enter when you are done.\n\n\nOption to install XCode Command Line Tools\nIf you haven’t already installed XCode Command Line Tools, you’ll see a message that The XCode Command Line Tools will be installed.\nP",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "r when you are done.\n\n\nOption to install XCode Command Line Tools\nIf you haven’t already installed XCode Command Line Tools, you’ll see a message that The XCode Command Line Tools will be installed.\nPress return to continue when prompted by the Homebrew installation script.\n\n\nAdd to the $PATH shell configuration\nHomebrew files are installed into the /opt/homebrew folder. But the folder is not part of the default $PATH.\nTerminal windowecho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/ak/.zprofileeval \"$(/opt/homebrew/bin/brew shellenv)\"\nBe very careful to copy the commands exactly. It’s best to copy and paste.\n\n\nUpdate everything in Homebrew to recent version:\nTerminal windowbrew updatebrew outdatedbrew upgrade\n\n\nTerminal\niTerm2 is an open source replacement for Apple’s Terminal. It’s highly customizable and comes with a lot of useful features.\nInstallation\nUse Homebrew to download and install:\nTerminal windowbrew install --cask iterm2\nCustomization\nHere are some suggested sett",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "t’s highly customizable and comes with a lot of useful features.\nInstallation\nUse Homebrew to download and install:\nTerminal windowbrew install --cask iterm2\nCustomization\nHere are some suggested settings you can change or set, they are all optional.\n\n\nSet hot-key to open and close the terminal to command + option + i\n\n\nGo to profiles -> Default -> Terminal -> Check silence bell to disable the terminal session from making any sound\n\n\nDownload one of iTerm2 color schemes and then set these to your default profile colors\n\n\nChange the cursor text and cursor color to yellow make it more visible\n\n\nChange the font to 14pt Source Code Pro Lite. Source Code Pro can be downloaded using Homebrew\nTerminal windowbrew tap homebrew/cask-fonts && brew install --cask font-source-code-pro\n\n\nZsh\nThe Z shell (also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS) with additional features. It’s recommended to use zsh over bash. It’s also highly recommended to install",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "(also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS) with additional features. It’s recommended to use zsh over bash. It’s also highly recommended to install a framework with zsh as it makes dealing with configuration, plugins and themes a lot nicer.\nInstalling Zsh\nInstall zsh using Homebrew:\nTerminal windowbrew install zsh\nNow you should install a framework, we recommend to use OhMyZsh.\nOhMyZsh\nOhMyZsh is an open source, community-driven framework for managing your zsh configuration. It comes with a bunch of features out of the box and improves your terminal experience.\nInstalling OhMyZsh\nEnter the following command into your terminal to install OhMyZsh:\nTerminal windowsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\nThe installation script should set zsh to your default shell, but if it doesn’t you can do it manually:\nTerminal windowchsh -s $(which zsh)\nPlugins\nThere are countless plugins",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "aster/tools/install.sh)\"\nThe installation script should set zsh to your default shell, but if it doesn’t you can do it manually:\nTerminal windowchsh -s $(which zsh)\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\nTerminal windowplugins=(git zsh-autosuggestions)\n\n\nStart a new terminal session.\n\n\nzsh-syntax-highlighting\nThis package provides syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, part",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "x highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zshrc:\nTerminal windowplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n\n\nStart a new terminal session.\nA huge list of plugins can be found at the awesome zsh plugins repo.\n\n\nGit Config\nGit should come pre-installed on mac, if not run:\nTerminal windowbrew install git\nName\nTo set up your Git config file, open a WSL command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (repla",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "nd line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add your GitHub username to link it to git (case sensitive!):\nTerminal windowgit config --global user.username \"GitHub username\"\nMake sure you are inputting user.username and not user.name otherwise, you will overwrite your name and you will not be correctly synced to your GitHub account.\nYou can double-check any of your settings by typing git config --global user.name and so on. To make any changes just type the necessary command again as in the examples above.\nPython\nThis section covers setting up python environment for MacOS. Python is one of the most powerful programming languages, mostly used in data science, machine learning, and big data analyt",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "above.\nPython\nThis section covers setting up python environment for MacOS. Python is one of the most powerful programming languages, mostly used in data science, machine learning, and big data analytics.\nPython Installation\nTerminal windowbrew install python\nThis will install the latest version of Python 3. You can verify the installation with:\nTerminal windowpython3 --version\nSetting Up Your Python Environment\nOnce you’ve installed Python you might want to explore some additional tools that will make your Python development experience better. These tools help you manage different Python versions and keep your projects’ dependencies isolated.\nManaging Multiple Python Versions with uv\nIf you work on different Python projects, you might find yourself needing different Python versions. This is where uv comes in handy. It’s a tool that allows you to install and switch between multiple Python versions effortlessly.\n\n\nInstall uv using Homebrew:\nTerminal windowbrew install uv\n\n\nTo enable she",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "is where uv comes in handy. It’s a tool that allows you to install and switch between multiple Python versions effortlessly.\n\n\nInstall uv using Homebrew:\nTerminal windowbrew install uv\n\n\nTo enable shell autocompletion for uv, run this:\nTerminal window  echo 'eval \"$(uv generate-shell-completion zsh)\"' >> ~/.zshrc\n\n\nTo enable shell autocompletion for uvx, run this:\nTerminal windowecho 'eval \"$(uvx --generate-shell-completion zsh)\"' >> ~/.zshrc\nThen restart the shell or source the shell config file.\n\n\nInstall the Python version you need:\nTerminal windowuv python install 3.10.x\n\n\nWorking with Virtual Environments\nVirtual environments are an essential tool for modern Python development. They create isolated spaces where you can install packages without affecting your system-wide Python installation. This prevents dependency conflicts between different projects.\n\n\nCreate a new environment using uv:\nTerminal windowuv venv\n\n\nInstall a package in the new virtual environment\nTerminal windowuv p",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "ation. This prevents dependency conflicts between different projects.\n\n\nCreate a new environment using uv:\nTerminal windowuv venv\n\n\nInstall a package in the new virtual environment\nTerminal windowuv pip install ruff\n\n\nThe virtual environment can be “activated” to make its packages available:\nTerminal windowsource .venv/bin/activate\n\n\nWhen you’re done, deactivate the environment:\nTerminal windowdeactivate\n\n\nDocker\nThis section covers setting docker desktop for MacOS. In the end, you will have a docker-daemon, docker-cli, docker-compose, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the executable for docker-desktop.\n\n\nInstall the executable, and choose the appropriate virtualization environment while installing if the option shows up.\n\n\nDone with installation. Sign in with the docker account or skip for the time being.\n\n\nTest Docker CLI\nMake sure yo",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "the appropriate virtualization environment while installing if the option shows up.\n\n\nDone with installation. Sign in with the docker account or skip for the time being.\n\n\nTest Docker CLI\nMake sure you at least launch docker-desktop once, and let it run in the background.\nTerminal windowdocker -v\nYou have successfully installed docker-desktop and all other necessary tools docker-cli, docker-compose, and more.\nPackage Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gained popularity in the JavaScript community: NPM, Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": ", PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js, you automatically get NPM installed on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\nTerminal windowbrew install yarn\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\nTerminal windowbrew install p",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\nTerminal windowbrew install pnpm\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.\n\n\nIt aims to provide a high-performance alternative to Node.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       curl     homebrew     npm      Terminal windowcurl -fsSL https://bun.sh/install | bash  Terminal windowbrew install oven-sh/bun/bun  Terminal windownpm install -g bun   \n\n\nBasic commands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Ter",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "ds\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThis will create a package.json file with the default settings.\n\n\nInstall a package\nTo install the required package, you can run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a script defined in your package.json file, run the following commands\n         bun      pnpm      npm      yarn      Terminal windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their tooling in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginne",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "ne Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything that is needed for coding (editor) and executing the code (integrated terminal).\n\n\nInstalling VS Code\nTo install the latest version, use Homebrew:\nTerminal windowbrew install --cask visual-studio-code\nMacOs integration\nLaunch VS Code from the command line.\nAfter that, you can launch VS Code from your terminal:\n\ncode . will open VS Code in the current directory\ncode myfile.txt will open myfile.txt in VS Code\n\nUseful Extensions\n\n\nPython - Includes many useful features, such as code completion with IntelliSense, debugging, unit testing support, etc.\n\n\nDocker - Makes it easy to create, manage, and debug containerized applications.\n\n\nError Lens - Improve highlighting of errors, warnings and other lang",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "lliSense, debugging, unit testing support, etc.\n\n\nDocker - Makes it easy to create, manage, and debug containerized applications.\n\n\nError Lens - Improve highlighting of errors, warnings and other language diagnostics.\n\n\nindent-rainbow - Makes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nvscode-icons - Icons for Visual Studio Code\n\n\nFluent Icons - Fluent product icons for Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nGit a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityIntroduction · macOS Setup Guide sourabhbajaj.comGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosy",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "e Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosystem/git-credential-managerHow to Set up an Apple Mac for Software Development stuartellis.nameSetting up an Apple Mac for development and systems administrationuv docs.astral.sh\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousGetting StartedNext Windows    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/gen-ai/environmnet-setup/mac-os/"
  },
  {
    "content": "404 Not Found\n\n404 Not Found\ncloudflare",
    "source": "https://docs.chaicode.com/cdn-cgi/l/email-protection"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your",
    "source": "https://docs.chaicode.com/gen-ai/getting-started/"
  },
  {
    "content": "eos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encount",
    "source": "https://docs.chaicode.com/gen-ai/getting-started/"
  },
  {
    "content": "r additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/gen-ai/getting-started/"
  },
  {
    "content": "ake the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next MacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/gen-ai/getting-started/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your",
    "source": "https://docs.chaicode.com/web-dev/getting-started"
  },
  {
    "content": "eos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encount",
    "source": "https://docs.chaicode.com/web-dev/getting-started"
  },
  {
    "content": "r additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/web-dev/getting-started"
  },
  {
    "content": "ake the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next MacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/web-dev/getting-started"
  },
  {
    "content": "Windows | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    WSL     Updating Linux    Mapping Your Linux Drive    Restarting WSL      Windows Terminal     Default Profile    Starting Directory      Zsh     Installing Zsh    OhMyZsh    cURL    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Node.js     NVM    Changing Node Versions      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      Chrome Extensions    References    On this page   Overview    Prerequisites    WSL     Updating Linux    Ma",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "stalling VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      Chrome Extensions    References    On this page   Overview    Prerequisites    WSL     Updating Linux    Mapping Your Linux Drive    Restarting WSL      Windows Terminal     Default Profile    Starting Directory      Zsh     Installing Zsh    OhMyZsh    cURL    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Node.js     NVM    Changing Node Versions      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      Chrome Extensions    References           Windows      A question that comes to mind for every web development beginner: How to set up my web development environment as a web developer?\nThe following guide will teach you how to set up a minimal web development environment for Windows.\n   Tip   \nSetting up your",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "eginner: How to set up my web development environment as a web developer?\nThe following guide will teach you how to set up a minimal web development environment for Windows.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nWindows 11\nA GitHub account\n\nWSL\nThe first and most important part of setting up your Windows dev environment is installing the Windows Subsystem for Linux (WSL). We recommend sticking with Ubuntu but feel free to try out as many distributions as you like.\nThere used to be a handful of steps needed to install it, but we now only need to enter the following command into PowerShell or Command Prompt:\nTerminal windowwsl --install\nUpdating Linux\nIt is recommended that you regularly update and upgrade your packages. In Ubuntu or Debian, we use the apt packag",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "command into PowerShell or Command Prompt:\nTerminal windowwsl --install\nUpdating Linux\nIt is recommended that you regularly update and upgrade your packages. In Ubuntu or Debian, we use the apt package manager:\nTerminal windowsudo apt update && sudo apt upgrade\nWindows does not automatically update or upgrade your Linux distribution(s). This is a task that most Linux users prefer to control themselves.\nMapping Your Linux Drive\nWhen you open the Windows file explorer, it displays your devices and drives. We are going to add our Ubuntu virtual drive as a network location for easy access.\n\n\nOpen the \\\\wsl$\\ location from file explorer:\n\n\n\nRight-click on the Ubuntu folder, and select Map network drive:\n\n\n\nSelect the drive letter you would like to use, leave Reconnect at sign-in checked and Connect using different credentials unchecked, and then click finish (mine will look slightly different because it’s already been done):\n\n\n\nThe result should look something like this:\n\n\n\nIf you wanted to",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "nect using different credentials unchecked, and then click finish (mine will look slightly different because it’s already been done):\n\n\n\nThe result should look something like this:\n\n\n\nIf you wanted to access your Windows files from the Linux terminal, they are found in the /mnt/ directory, so your Windows user directory would be located at /mnt/c/Users/username.\nWith your Ubuntu drive mapped, you can easily drag/drop or copy/paste Windows files to the Linux file system by using the file explorer.\nPin Your Code Directory\nAnother quick tip I have is to create a code directory inside of Ubuntu, and then pin it to the quick access menu found on the left side of the file explorer. This comes in handy when transferring files quickly between Windows and Linux.\n\n\nOpen File Explorer and click on the Ubuntu network drive we created\n\n\nSelect the home dir, and then your user directory\n\n\nRight-click and create a new folder, name it code, or anything else you’d like\n\n\nDrag that new folder to the lef",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "e Ubuntu network drive we created\n\n\nSelect the home dir, and then your user directory\n\n\nRight-click and create a new folder, name it code, or anything else you’d like\n\n\nDrag that new folder to the left, underneath the star icon that says Quick access.\n\n\n\nRestarting WSL\nIf for some reason WSL stops working, you can restart it with these two commands from PowerShell/Command Prompt:\nTerminal windowwsl.exe --shutdownwsl.exe\nWindows Terminal\nA few quick things we recommend setting up are the default profile and your starting home directory. These settings make it so launching Windows Terminal will open directly into WSL inside our user’s home directory.\nDefault Profile\nWindows Terminal will open a PowerShell or Command Prompt shell when launched by default, here is how to switch it to WSL:\n\n\nSelect the ˅ icon from Windows Terminal and go to the Settings menu:\n\n\n\nIn the Startup section you will find the Default profile dropdown, select Ubuntu. Below it, select Windows Terminal as the Default",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "lect the ˅ icon from Windows Terminal and go to the Settings menu:\n\n\n\nIn the Startup section you will find the Default profile dropdown, select Ubuntu. Below it, select Windows Terminal as the Default terminal application:\n\n\n\nStarting Directory\nA default Ubuntu terminal will open to the root directory. To make finding your files a little quicker we can have it open into your home directory instead.\n\n\nUnder the Profiles section in the settings menu click on Ubuntu\n\n\nAt the General tab, you will find a Starting directory input\n\n\nEnter the following replacing “username” with your Ubuntu user name: \\\\wsl$\\Ubuntu\\home\\username\n\n\nYou can leave the Use parent process directory box unchecked\n\n\nIf it is still opening into your / directory, change the Command line setting located right above the Starting directory input box to the following: wsl.exe -d Ubuntu\n\n\n\nZsh\nZ shell works almost identically to the standard BASH shell found on default Linux installs. What makes it different is its support",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "rting directory input box to the following: wsl.exe -d Ubuntu\n\n\n\nZsh\nZ shell works almost identically to the standard BASH shell found on default Linux installs. What makes it different is its support for plugins and themes, along with some extra features like spelling correction and recursive path expansion. It’s time to throw BASH in the trash!\nInstalling Zsh\nZsh can be installed with one command:\nTerminal windowsudo apt install zsh\nAfter installing, type the zsh command. Zsh will ask you to choose some configurations. We will do this later on while installing oh-my-zsh, so choose option 0 to create the config file and prevent this message from showing again.\nOhMyZsh\nThe most popular plugin framework by far is OhMyZsh. It comes preloaded with loads of plugins, themes, helpers, and more. It can help with productivity for sure, but more importantly, it just looks cool 😎.\ncURL\nFirst off, we need to make sure we have cURL installed. Short for “Client URL”, it’s a way to transfer data fro",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "It can help with productivity for sure, but more importantly, it just looks cool 😎.\ncURL\nFirst off, we need to make sure we have cURL installed. Short for “Client URL”, it’s a way to transfer data from the command line, and that’s how we will download OhMyZsh.\nTerminal windowsudo apt install curl\nInstalling OhMyZsh\nEnter the following command into your terminal to install OhMyZsh:\nTerminal windowsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\nThat’s it! You should now see a .oh-my-zsh directory inside of your home directory. To change your plugins and themes you will need to edit your .zshrc file, also found in your home dir.\nHere is a list of all the themes and plugins that come bundled with OhMyZsh.\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by defaul",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "hese two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\nTerminal windowplugins=(git zsh-autosuggestions)\n\n\nStart a new terminal session.\n\n\nzsh-syntax-highlighting\nThis package provides syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugin",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "ing syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zshrc:\nTerminal windowplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n\n\nStart a new terminal session.\nA huge list of plugins can be found at the awesome zsh plugins repo.\n\n\nGit Config\nGit should come pre-installed on most, if not all of the WSL Linux distributions. To ensure you have the latest version, use the following command in an Ubuntu or Debian-based distro:\nTerminal windowsudo apt install git\nName\nTo set up your Git config file, open a WSL command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "eferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add your GitHub username to link it to git (case sensitive!):\nTerminal windowgit config --global user.username \"GitHub username\"\nMake sure you are inputting user.username and not user.name otherwise, you will overwrite your name and you will not be correctly synced to your GitHub account.\nYou can double-check any of your settings by typing git config --global user.name and so on. To make any changes just type the necessary command again as in the examples above.\nNode.js\nNode.js is a JavaScript runtime environment that executes JavaScript code outside a web browser. It allows us to install packages, run local web servers, create APIs, and more.\nNVM\nYou will likely need to switch between multiple versions of Node.js based on the n",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "cript code outside a web browser. It allows us to install packages, run local web servers, create APIs, and more.\nNVM\nYou will likely need to switch between multiple versions of Node.js based on the needs of the different projects you’re working on. Node Version Manager allows you to quickly install and use different versions of Node via the command line.\nInstalling NVM\n\n\nOpen your terminal and install NVM with curl or wget:\n      curl     wget      Terminal windowcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash  Terminal windowwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash   \nTo verify installation, enter: command -v nvm. This should return ‘nvm’, if you receive ‘command not found’ or no response at all, close your current terminal, reopen it, and try again.\n\n\nList which versions of Node are currently installed (should be none at this point):\nTerminal windownvm ls\n\n\nInstall both the current and stable LTS versions of Nod",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "erminal, reopen it, and try again.\n\n\nList which versions of Node are currently installed (should be none at this point):\nTerminal windownvm ls\n\n\nInstall both the current and stable LTS versions of Node.js.\nInstall the current stable LTS release of Node.js (recommended for production applications):\nTerminal windownvm install --lts\nInstall the current release of Node.js (for testing the latest Node.js features and improvements, but more likely to have issues):\nTerminal windownvm install node\n\n\nVerify that Node.js is installed and the current version:\nTerminal windownode --version\nThen verify that you have NPM installed as well:\nTerminal windownpm --version\n\n\nChanging Node Versions\nUse the following commands to change the version of Node you would like to use for any given project:\nTerminal window# switch to the current versionnvm use node\n# switch to the LTS version:nvm use --lts\n# switch to the specific version:nvm use v8.2.1\n# to list all of the versionsnvm ls-remote.\nPackage Managers",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "indow# switch to the current versionnvm use node\n# switch to the LTS version:nvm use --lts\n# switch to the specific version:nvm use v8.2.1\n# to list all of the versionsnvm ls-remote.\nPackage Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gained popularity in the JavaScript community: NPM, Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js, you automatically get NPM installed on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "stalled on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable\n\n\nYou can quickly check whether Corepack is enabled by running yarn exec env: if you get a path as output, Corepack is properly installed.\n\n\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly dis",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable pnpm\n\n\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.\n\n\nIt aims to provide a high-performance alternative to Node.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       PowerShell/cmd.eve     npm     scoop      Terminal windowpowershell -c \"irm bun.sh/install.ps1|iex\"  Terminal windownpm install -g bun  Terminal windowscoop install bun",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "ry.\n\n\nInstallation\n       PowerShell/cmd.eve     npm     scoop      Terminal windowpowershell -c \"irm bun.sh/install.ps1|iex\"  Terminal windownpm install -g bun  Terminal windowscoop install bun   \n\n\nBasic commands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y     \nThis will create a package.json file with the default settings.\n\n\nInstall a package\nTo install the required package, you can run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the followin",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "dd      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a script defined in your package.json file, run the following commands\n         bun      pnpm      npm      yarn      Terminal windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their t",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "on file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their tooling in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything that is needed for coding (editor) and executing the code (integrated terminal).\n\n\nInstalling VS Code\nVS Code is available on Windows, macOS, and Linux. You can download the latest Windows installer here. We recommend using the stable build.\nChanging the Default Shell\nThe WSL2 shell can be chosen as the default VS Code terminal by pressing Ctrl + Shift + P and typing/choosing Terminal: Select Default Profile, then selecting zsh:\n\n\nRemote Extension\n\n\nInstall the Remote - WSL extension on VS",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "sen as the default VS Code terminal by pressing Ctrl + Shift + P and typing/choosing Terminal: Select Default Profile, then selecting zsh:\n\n\nRemote Extension\n\n\nInstall the Remote - WSL extension on VS Code.\n\n\nThis allows you to use WSL as your integrated development environment and will handle compatibility and pathing for you. Learn more.\n\n\nThis extension will also allow you to launch VS Code right from your WSL terminal by using the code command.\n\n\nIf I were inside the root directory of my repository, I would use code . to launch the entire directory inside VS Code.\nTerminal windowcd my-projectcode .\n\n\nUseful Extensions\nThe number of extensions available for VS Code can be overwhelming, here are some of the ones I use the most.\n\n\nLive Server - Launch a local development server with a live reload feature for static & dynamic pages.\n\n\nPrettier - Prettier is an opinionated code formatter.\n\n\nESLint - Find and fix problems in your code\n\n\nHTML CSS Support - CSS Intellisense for HTML\n\n\nAuto",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "e reload feature for static & dynamic pages.\n\n\nPrettier - Prettier is an opinionated code formatter.\n\n\nESLint - Find and fix problems in your code\n\n\nHTML CSS Support - CSS Intellisense for HTML\n\n\nAuto Rename Tag - Auto rename paired HTML/XML tag\n\n\nCSS Pick - Allow peeking to css ID and class strings as definitions from html files to respective CSS.\n\n\nBabel JavaScript - VSCode syntax highlighting for today’s JavaScript\n\n\nJavaScript (ES6) code snippets - Code snippets for JavaScript in ES6 syntax.\n\n\nES7+ React/Redux/React-Native snippets - Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax.\n\n\nTailwind CSS IntelliSense - Intelligent Tailwind CSS tooling for VS Code\n\n\nError Lens - Improve highlighting of errors, warnings and other language diagnostics.\n\n\nindent-rainbow - Makes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nPrisma - Adds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.\n\n\nvscode-icons - Ic",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "kes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nPrisma - Adds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.\n\n\nvscode-icons - Icons for Visual Studio Code\n\n\nFluent Icons - Fluent product icons for Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n   Note   You will need to install any VS Code extensions for your Remote - WSL. Extensions already installed locally on VS Code will not automatically be available. Learn more.  \n\n\nChrome Extensions\nThese are all available as Firefox extensions as well.\n\n\nReact Dev tools - Adds React debugging tools to the Chrome Developer Tools.\n\n\nColorZilla - Advanced Eyedropper, Color Picker, Gradient Generator, and other colorful goodies\n\n\nAxe Accessibility - Accessibility Checker for Developers, Testers, and Designers in Chrome.\n\n\nNimbus Capture - Screen Capture full Web page or any part.\n\n\nWhatFont",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "rator, and other colorful goodies\n\n\nAxe Accessibility - Accessibility Checker for Developers, Testers, and Designers in Chrome.\n\n\nNimbus Capture - Screen Capture full Web page or any part.\n\n\nWhatFont - With this extension, you could inspect web fonts by just hovering on them.\n\n\nJSON Formatter - Makes JSON easy to read.\n\n\nReferences\nSet up a WSL development environment learn.microsoft.comSet up a WSL development environment using best practices from this set-by-step guide. Learn how to run Ubuntu, Visual Studio Code or Visual Studio, Git, Windows Credential Manager, MongoDB, MySQL, Docker remote containers and more.Install WSL learn.microsoft.comInstall Windows Subsystem for Linux with the command, wsl --install. Use a Bash terminal on your Windows machine run by your preferred Linux distribution - Ubuntu, Debian, SUSE, Kali, Fedora, Pengwin, Alpine, and more are available.WSL2 Tutorial: The Complete Guide for Windows 10 & 11 — SitePoint sitepoint.comLearn how to install, set up, manage",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "bution - Ubuntu, Debian, SUSE, Kali, Fedora, Pengwin, Alpine, and more are available.WSL2 Tutorial: The Complete Guide for Windows 10 & 11 — SitePoint sitepoint.comLearn how to install, set up, manage, and use a full Linux environment on Windows 10 & 11 PCs with Windows Subsystem for Linux 2 (WSL2). Complete WSL2 Tutorial.Git a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosystem/git-credential-managerZSH and Oh-My-Zsh on Windows Subsystem for Linux (WSL) kevinprogramming.comIn this posting, I will show how to install ZSH and Oh-My-Zsh on Windows PC (WSL). This will be helpful if you want to setup a Linux development environment on Win",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "for Linux (WSL) kevinprogramming.comIn this posting, I will show how to install ZSH and Oh-My-Zsh on Windows PC (WSL). This will be helpful if you want to setup a Linux development environment on Windows PC.\n\nI have already installed Ubuntu 20.04 on Windows Subsystem for Linux (WSL). Bash is the default shellSet up Node.js on WSL 2 learn.microsoft.comA guide to help you get your Node.js development environment set up on Windows Subsystem for Linux (WSL).Installing Chocolatey chocolatey.orgChocolatey is software management automation for Windows that wraps installers, executables, zips, and scripts into compiled packages. Chocolatey integrates w/SCCM, Puppet, Chef, etc. Chocolatey is trusted by businesses to manage software deployments.Windows Terminal installation learn.microsoft.comLearn how to install and set up Windows Terminal.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updat",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "how to install and set up Windows Terminal.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousMacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/windows/"
  },
  {
    "content": "MacOS | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Node.js     NVM    Changing Node Versions      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    MacOs integration    Useful Extensions      Chrome Extensions    References    On this page   Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "erences    On this page   Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Node.js     NVM    Changing Node Versions      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    MacOs integration    Useful Extensions      Chrome Extensions    References           MacOS      A question that comes to mind for every web development beginner: How to set up my web development environment as a web developer?\nThe following guide will teach you how to set up a minimal web development environment for MacOS.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisi",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "elf is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nApple Silicon Device 🫠\nMacOs 11 or later\nA GitHub account\n\nHomebrew\nHomebrew calls itself The missing package manager for macOS and is an essential tool for any developer.\n\n\nInstallation script\nTerminal window/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\nThe Homebrew installation script will ask you to enter your Mac user password. This is the password you used to sign into your Mac.\nTerminal windowPassword:\nYou won’t see the characters as you type. Press enter when you are done.\n\n\nOption to install XCode Command Line Tools\nIf you haven’t already installed XCode Command Line Tools, you’ll see a message that The XCode Command Line Tools will be installed.\nPress return to continue when prompted by the Homebrew installation script.\n\n\nAd",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "t already installed XCode Command Line Tools, you’ll see a message that The XCode Command Line Tools will be installed.\nPress return to continue when prompted by the Homebrew installation script.\n\n\nAdd to the $PATH shell configuration\nHomebrew files are installed into the /opt/homebrew folder. But the folder is not part of the default $PATH.\nTerminal windowecho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/ak/.zprofileeval \"$(/opt/homebrew/bin/brew shellenv)\"\nBe very careful to copy the commands exactly. It’s best to copy and paste.\n\n\nUpdate everything in Homebrew to recent version:\nTerminal windowbrew updatebrew outdatedbrew upgrade\n\n\nTerminal\niTerm2 is an open source replacement for Apple’s Terminal. It’s highly customizable and comes with a lot of useful features.\nInstallation\nUse Homebrew to download and install:\nTerminal windowbrew install --cask iterm2\nCustomization\nHere are some suggested settings you can change or set, they are all optional.\n\n\nSet hot-key to open and cl",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "se Homebrew to download and install:\nTerminal windowbrew install --cask iterm2\nCustomization\nHere are some suggested settings you can change or set, they are all optional.\n\n\nSet hot-key to open and close the terminal to command + option + i\n\n\nGo to profiles -> Default -> Terminal -> Check silence bell to disable the terminal session from making any sound\n\n\nDownload one of iTerm2 color schemes and then set these to your default profile colors\n\n\nChange the cursor text and cursor color to yellow make it more visible\n\n\nChange the font to 14pt Source Code Pro Lite. Source Code Pro can be downloaded using Homebrew\nTerminal windowbrew tap homebrew/cask-fonts && brew install --cask font-source-code-pro\n\n\nZsh\nThe Z shell (also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS) with additional features. It’s recommended to use zsh over bash. It’s also highly recommended to install a framework with zsh as it makes dealing with configuration, plugins and theme",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "shell for macOS) with additional features. It’s recommended to use zsh over bash. It’s also highly recommended to install a framework with zsh as it makes dealing with configuration, plugins and themes a lot nicer.\nInstalling Zsh\nInstall zsh using Homebrew:\nTerminal windowbrew install zsh\nNow you should install a framework, we recommend to use OhMyZsh.\nOhMyZsh\nOhMyZsh is an open source, community-driven framework for managing your zsh configuration. It comes with a bunch of features out of the box and improves your terminal experience.\nInstalling OhMyZsh\nEnter the following command into your terminal to install OhMyZsh:\nTerminal windowsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\nThe installation script should set zsh to your default shell, but if it doesn’t you can do it manually:\nTerminal windowchsh -s $(which zsh)\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestio",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "shell, but if it doesn’t you can do it manually:\nTerminal windowchsh -s $(which zsh)\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\nTerminal windowplugins=(git zsh-autosuggestions)\n\n\nStart a new terminal session.\n\n\nzsh-syntax-highlighting\nThis package provides syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plug",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "t they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zshrc:\nTerminal windowplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n\n\nStart a new terminal session.\nA huge list of plugins can be found at the awesome zsh plugins repo.\n\n\nGit Config\nGit should come pre-installed on mac, if not run:\nTerminal windowbrew install git\nName\nTo set up your Git config file, open a WSL command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "eferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add your GitHub username to link it to git (case sensitive!):\nTerminal windowgit config --global user.username \"GitHub username\"\nMake sure you are inputting user.username and not user.name otherwise, you will overwrite your name and you will not be correctly synced to your GitHub account.\nYou can double-check any of your settings by typing git config --global user.name and so on. To make any changes just type the necessary command again as in the examples above.\nNode.js\nNode.js is a JavaScript runtime environment that executes JavaScript code outside a web browser. It allows us to install packages, run local web servers, create APIs, and more.\nNVM\nYou will likely need to switch between multiple versions of Node.js based on the n",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "cript code outside a web browser. It allows us to install packages, run local web servers, create APIs, and more.\nNVM\nYou will likely need to switch between multiple versions of Node.js based on the needs of the different projects you’re working on. Node Version Manager allows you to quickly install and use different versions of Node via the command line.\nInstalling NVM\n\n\nOpen your terminal and install NVM with curl or wget:\nTerminal windowbrew install nvm\nTo verify installation, enter: command -v nvm. This should return ‘nvm’, if you receive ‘command not found’ or no response at all, close your current terminal, reopen it, and try again.\n\n\nList which versions of Node are currently installed (should be none at this point):\nTerminal windownvm ls\n\n\nInstall both the current and stable LTS versions of Node.js.\nInstall the current stable LTS release of Node.js (recommended for production applications):\nTerminal windownvm install --lts\nInstall the current release of Node.js (for testing the",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "sions of Node.js.\nInstall the current stable LTS release of Node.js (recommended for production applications):\nTerminal windownvm install --lts\nInstall the current release of Node.js (for testing the latest Node.js features and improvements, but more likely to have issues):\nTerminal windownvm install node\n\n\nVerify that Node.js is installed and the current version:\nTerminal windownode --version\nThen verify that you have NPM installed as well:\nTerminal windownpm --version\n\n\nChanging Node Versions\nUse the following commands to change the version of Node you would like to use for any given project:\nTerminal window# switch to the current versionnvm use node\n# switch to the LTS version:nvm use --lts\n# switch to the specific version:nvm use v8.2.1\n# to list all of the versionsnvm ls-remote.\nPackage Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are c",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "ge Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gained popularity in the JavaScript community: NPM, Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js, you automatically get NPM installed on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\nTerminal windowbrew install yarn\n\n\nPNP",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\nTerminal windowbrew install yarn\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\nTerminal windowbrew install pnpm\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.\n\n\nIt aims to provide a high-performance alternative to Node.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       cu",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "e.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       curl     homebrew     npm      Terminal windowcurl -fsSL https://bun.sh/install | bash  Terminal windowbrew install oven-sh/bun/bun  Terminal windownpm install -g bun   \n\n\nBasic commands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThis will create a package.json file with the default settings.\n\n\nInstall a package\nTo install the required package, you can run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install an",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "he following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a script defined in your package.json file, run the following commands\n         bun      pnpm      npm      yarn      Terminal windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Develop",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their tooling in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything that is needed for coding (editor) and executing the code (integrated terminal).\n\n\nInstalling VS Code\nTo install the latest version, use Homebrew:\nTerminal windowbrew install --cask visual-studio-code\nMacOs integration\nLaunch VS Code from the command line.\nAfter that, you can launch VS Code from your terminal:\n\ncode . wil",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "version, use Homebrew:\nTerminal windowbrew install --cask visual-studio-code\nMacOs integration\nLaunch VS Code from the command line.\nAfter that, you can launch VS Code from your terminal:\n\ncode . will open VS Code in the current directory\ncode myfile.txt will open myfile.txt in VS Code\n\nUseful Extensions\nThe number of extensions available for VS Code can be overwhelming, here are some of the ones I use the most.\n\n\nLive Server - Launch a local development server with a live reload feature for static & dynamic pages.\n\n\nPrettier - Prettier is an opinionated code formatter.\n\n\nESLint - Find and fix problems in your code\n\n\nHTML CSS Support - CSS Intellisense for HTML\n\n\nAuto Rename Tag - Auto rename paired HTML/XML tag\n\n\nCSS Pick - Allow peeking to css ID and class strings as definitions from html files to respective CSS.\n\n\nBabel JavaScript - VSCode syntax highlighting for today’s JavaScript\n\n\nJavaScript (ES6) code snippets - Code snippets for JavaScript in ES6 syntax.\n\n\nES7+ React/Redux/Rea",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "ml files to respective CSS.\n\n\nBabel JavaScript - VSCode syntax highlighting for today’s JavaScript\n\n\nJavaScript (ES6) code snippets - Code snippets for JavaScript in ES6 syntax.\n\n\nES7+ React/Redux/React-Native snippets - Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax.\n\n\nTailwind CSS IntelliSense - Intelligent Tailwind CSS tooling for VS Code\n\n\nError Lens - Improve highlighting of errors, warnings and other language diagnostics.\n\n\nindent-rainbow - Makes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nPrisma - Adds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for .prisma files.\n\n\nvscode-icons - Icons for Visual Studio Code\n\n\nFluent Icons - Fluent product icons for Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nChrome Extensions\nThese are all available as Firefox extensions as well.\n\n\nReact Dev tools - Adds React debugging too",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "heme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nChrome Extensions\nThese are all available as Firefox extensions as well.\n\n\nReact Dev tools - Adds React debugging tools to the Chrome Developer Tools.\n\n\nColorZilla - Advanced Eyedropper, Color Picker, Gradient Generator, and other colorful goodies\n\n\nAxe Accessibility - Accessibility Checker for Developers, Testers, and Designers in Chrome.\n\n\nNimbus Capture - Screen Capture full Web page or any part.\n\n\nWhatFont - With this extension, you could inspect web fonts by just hovering on them.\n\n\nJSON Formatter - Makes JSON easy to read.\n\n\nReferences\nGit a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityIntroduction · macOS Setup Guide sourabhbajaj.comGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosystem/git-credential-managerHow to Set up an Apple Mac for Software Development stuartellis.nameSetting up an Apple Mac for development and systems administration\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousGetting StartedNext Windows    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/web-dev/environmnet-setup/mac-os/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your",
    "source": "https://docs.chaicode.com/web-dev/getting-started/"
  },
  {
    "content": "eos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encount",
    "source": "https://docs.chaicode.com/web-dev/getting-started/"
  },
  {
    "content": "r additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/web-dev/getting-started/"
  },
  {
    "content": "ake the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next MacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/web-dev/getting-started/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your",
    "source": "https://docs.chaicode.com/devops/getting-started"
  },
  {
    "content": "eos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encount",
    "source": "https://docs.chaicode.com/devops/getting-started"
  },
  {
    "content": "r additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/devops/getting-started"
  },
  {
    "content": "ake the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next MacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/devops/getting-started"
  },
  {
    "content": "MacOS | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    MacOs integration    Useful Extensions      References    On this page   Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Ema",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "this page   Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    MacOs integration    Useful Extensions      References           MacOS      A question that comes to mind for every devops beginner: How to set up my environment for devops?\nThe following guide will teach you how to set up a minimal devops environment for MacOS.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nApple Silicon Device 🫠\nMacOs 11 or later\nA GitHub account\n\nHome",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nApple Silicon Device 🫠\nMacOs 11 or later\nA GitHub account\n\nHomebrew\nHomebrew calls itself The missing package manager for macOS and is an essential tool for any developer.\n\n\nInstallation script\nTerminal window/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\nThe Homebrew installation script will ask you to enter your Mac user password. This is the password you used to sign into your Mac.\nTerminal windowPassword:\nYou won’t see the characters as you type. Press enter when you are done.\n\n\nOption to install XCode Command Line Tools\nIf you haven’t already installed XCode Command Line Tools, you’ll see a message that The XCode Command Line Tools will be installed.\nPress return to continue when prompted by the Homebrew installation script.\n\n\nAdd to the $PATH shell configuration\nHomebrew files are installed into",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "hat The XCode Command Line Tools will be installed.\nPress return to continue when prompted by the Homebrew installation script.\n\n\nAdd to the $PATH shell configuration\nHomebrew files are installed into the /opt/homebrew folder. But the folder is not part of the default $PATH.\nTerminal windowecho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/ak/.zprofileeval \"$(/opt/homebrew/bin/brew shellenv)\"\nBe very careful to copy the commands exactly. It’s best to copy and paste.\n\n\nUpdate everything in Homebrew to recent version:\nTerminal windowbrew updatebrew outdatedbrew upgrade\n\n\nTerminal\niTerm2 is an open source replacement for Apple’s Terminal. It’s highly customizable and comes with a lot of useful features.\nInstallation\nUse Homebrew to download and install:\nTerminal windowbrew install --cask iterm2\nCustomization\nHere are some suggested settings you can change or set, they are all optional.\n\n\nSet hot-key to open and close the terminal to command + option + i\n\n\nGo to profiles -> Default",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "ask iterm2\nCustomization\nHere are some suggested settings you can change or set, they are all optional.\n\n\nSet hot-key to open and close the terminal to command + option + i\n\n\nGo to profiles -> Default -> Terminal -> Check silence bell to disable the terminal session from making any sound\n\n\nDownload one of iTerm2 color schemes and then set these to your default profile colors\n\n\nChange the cursor text and cursor color to yellow make it more visible\n\n\nChange the font to 14pt Source Code Pro Lite. Source Code Pro can be downloaded using Homebrew\nTerminal windowbrew tap homebrew/cask-fonts && brew install --cask font-source-code-pro\n\n\nZsh\nThe Z shell (also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS) with additional features. It’s recommended to use zsh over bash. It’s also highly recommended to install a framework with zsh as it makes dealing with configuration, plugins and themes a lot nicer.\nInstalling Zsh\nInstall zsh using Homebrew:\nTerminal w",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "sh over bash. It’s also highly recommended to install a framework with zsh as it makes dealing with configuration, plugins and themes a lot nicer.\nInstalling Zsh\nInstall zsh using Homebrew:\nTerminal windowbrew install zsh\nNow you should install a framework, we recommend to use OhMyZsh.\nOhMyZsh\nOhMyZsh is an open source, community-driven framework for managing your zsh configuration. It comes with a bunch of features out of the box and improves your terminal experience.\nInstalling OhMyZsh\nEnter the following command into your terminal to install OhMyZsh:\nTerminal windowsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\nThe installation script should set zsh to your default shell, but if it doesn’t you can do it manually:\nTerminal windowchsh -s $(which zsh)\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and co",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "h -s $(which zsh)\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\nTerminal windowplugins=(git zsh-autosuggestions)\n\n\nStart a new terminal session.\n\n\nzsh-syntax-highlighting\nThis package provides syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zshrc:\nTerminal windowplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n\n\nStart a new terminal session.\nA huge list of plugins can be found at the awesome zsh plugins repo.\n\n\nGit Config\nGit should come pre-installed on mac, if not run:\nTerminal windowbrew install git\nName\nTo set up your Git config file, open a WSL command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add yo",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "r Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add your GitHub username to link it to git (case sensitive!):\nTerminal windowgit config --global user.username \"GitHub username\"\nMake sure you are inputting user.username and not user.name otherwise, you will overwrite your name and you will not be correctly synced to your GitHub account.\nYou can double-check any of your settings by typing git config --global user.name and so on. To make any changes just type the necessary command again as in the examples above.\nDocker\nThis section covers setting docker desktop for MacOS. In the end, you will have a docker-daemon, docker-cli, docker-compose, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the executable for do",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "e.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the executable for docker-desktop.\n\n\nInstall the executable, and choose the appropriate virtualization environment while installing if the option shows up.\n\n\nDone with installation. Sign in with the docker account or skip for the time being.\n\n\nTest Docker CLI\nMake sure you at least launch docker-desktop once, and let it run in the background.\nTerminal windowdocker -v\nYou have successfully installed docker-desktop and all other necessary tools docker-cli, docker-compose, and more.\nPackage Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gaine",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gained popularity in the JavaScript community: NPM, Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js, you automatically get NPM installed on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\nTerminal windowbrew install yarn\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM an",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "ncy resolution.\n\n\nInstallation\nTerminal windowbrew install yarn\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\nTerminal windowbrew install pnpm\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.\n\n\nIt aims to provide a high-performance alternative to Node.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       curl     homebrew     npm      Terminal windowcurl -fsSL https://bun.sh/install | bash  Terminal windowbrew install oven-sh/bun/bun",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "taining compatibility with the npm registry.\n\n\nInstallation\n       curl     homebrew     npm      Terminal windowcurl -fsSL https://bun.sh/install | bash  Terminal windowbrew install oven-sh/bun/bun  Terminal windownpm install -g bun   \n\n\nBasic commands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThis will create a package.json file with the default settings.\n\n\nInstall a package\nTo install the required package, you can run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package fo",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "indownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a script defined in your package.json file, run the following commands\n         bun      pnpm      npm      yarn      Terminal windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are d",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "n the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their tooling in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything that is needed for coding (editor) and executing the code (integrated terminal).\n\n\nInstalling VS Code\nTo install the latest version, use Homebrew:\nTerminal windowbrew install --cask visual-studio-code\nMacOs integration\nLaunch VS Code from the command line.\nAfter that, you can launch VS Code from your terminal:\n\ncode . will open VS Code in the current directory\ncode myfile.txt will open myfile.txt in VS Code\n\nUseful Extensions\n\n\nPrettier - Prettier is",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "e.\nAfter that, you can launch VS Code from your terminal:\n\ncode . will open VS Code in the current directory\ncode myfile.txt will open myfile.txt in VS Code\n\nUseful Extensions\n\n\nPrettier - Prettier is an opinionated code formatter.\n\n\nESLint - Find and fix problems in your code\n\n\nDocker - Makes it easy to create, manage, and debug containerized applications.\n\n\nError Lens - Improve highlighting of errors, warnings and other language diagnostics.\n\n\nindent-rainbow - Makes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nvscode-icons - Icons for Visual Studio Code\n\n\nFluent Icons - Fluent product icons for Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nGit a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityIntroduction · macOS Setup Guide sourabhbajaj.comGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "v.toView Git a Grip Series' Articles on DEV CommunityIntroduction · macOS Setup Guide sourabhbajaj.comGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosystem/git-credential-managerHow to Set up an Apple Mac for Software Development stuartellis.nameSetting up an Apple Mac for development and systems administration\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousGetting StartedNext Windows    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "s    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/mac-os/"
  },
  {
    "content": "Windows | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    WSL     Updating Linux    Mapping Your Linux Drive    Restarting WSL      Windows Terminal     Default Profile    Starting Directory      Zsh     Installing Zsh    OhMyZsh    cURL    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References    On this page   Overview    Prerequisites    WSL     Updating Linux    Mapping Your Li",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "t     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References    On this page   Overview    Prerequisites    WSL     Updating Linux    Mapping Your Linux Drive    Restarting WSL      Windows Terminal     Default Profile    Starting Directory      Zsh     Installing Zsh    OhMyZsh    cURL    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References           Windows      A question that comes to mind for every devops beginner: How to set up my environment as a devops developer?\nThe following guide will teach you how to set up a minimal devops environment for Windows.\n   Tip   \nSetting up your development environment all by yourself is your first cha",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "nt as a devops developer?\nThe following guide will teach you how to set up a minimal devops environment for Windows.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nWindows 11\nA GitHub account\n\nWSL\nThe first and most important part of setting up your Windows dev environment is installing the Windows Subsystem for Linux (WSL). We recommend sticking with Ubuntu but feel free to try out as many distributions as you like.\nThere used to be a handful of steps needed to install it, but we now only need to enter the following command into PowerShell or Command Prompt:\nTerminal windowwsl --install\nUpdating Linux\nIt is recommended that you regularly update and upgrade your packages. In Ubuntu or Debian, we use the apt package manager:\nTerminal windowsudo apt update && sudo apt upg",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "wwsl --install\nUpdating Linux\nIt is recommended that you regularly update and upgrade your packages. In Ubuntu or Debian, we use the apt package manager:\nTerminal windowsudo apt update && sudo apt upgrade\nWindows does not automatically update or upgrade your Linux distribution(s). This is a task that most Linux users prefer to control themselves.\nMapping Your Linux Drive\nWhen you open the Windows file explorer, it displays your devices and drives. We are going to add our Ubuntu virtual drive as a network location for easy access.\n\n\nOpen the \\\\wsl$\\ location from file explorer:\n\n\n\nRight-click on the Ubuntu folder, and select Map network drive:\n\n\n\nSelect the drive letter you would like to use, leave Reconnect at sign-in checked and Connect using different credentials unchecked, and then click finish (mine will look slightly different because it’s already been done):\n\n\n\nThe result should look something like this:\n\n\n\nIf you wanted to access your Windows files from the Linux terminal, they",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "k finish (mine will look slightly different because it’s already been done):\n\n\n\nThe result should look something like this:\n\n\n\nIf you wanted to access your Windows files from the Linux terminal, they are found in the /mnt/ directory, so your Windows user directory would be located at /mnt/c/Users/username.\nWith your Ubuntu drive mapped, you can easily drag/drop or copy/paste Windows files to the Linux file system by using the file explorer.\nPin Your Code Directory\nAnother quick tip I have is to create a code directory inside of Ubuntu, and then pin it to the quick access menu found on the left side of the file explorer. This comes in handy when transferring files quickly between Windows and Linux.\n\n\nOpen File Explorer and click on the Ubuntu network drive we created\n\n\nSelect the home dir, and then your user directory\n\n\nRight-click and create a new folder, name it code, or anything else you’d like\n\n\nDrag that new folder to the left, underneath the star icon that says Quick access.\n\n\n\nRe",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "and then your user directory\n\n\nRight-click and create a new folder, name it code, or anything else you’d like\n\n\nDrag that new folder to the left, underneath the star icon that says Quick access.\n\n\n\nRestarting WSL\nIf for some reason WSL stops working, you can restart it with these two commands from PowerShell/Command Prompt:\nTerminal windowwsl.exe --shutdownwsl.exe\nWindows Terminal\nA few quick things we recommend setting up are the default profile and your starting home directory. These settings make it so launching Windows Terminal will open directly into WSL inside our user’s home directory.\nDefault Profile\nWindows Terminal will open a PowerShell or Command Prompt shell when launched by default, here is how to switch it to WSL:\n\n\nSelect the ˅ icon from Windows Terminal and go to the Settings menu:\n\n\n\nIn the Startup section you will find the Default profile dropdown, select Ubuntu. Below it, select Windows Terminal as the Default terminal application:\n\n\n\nStarting Directory\nA default Ub",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "ngs menu:\n\n\n\nIn the Startup section you will find the Default profile dropdown, select Ubuntu. Below it, select Windows Terminal as the Default terminal application:\n\n\n\nStarting Directory\nA default Ubuntu terminal will open to the root directory. To make finding your files a little quicker we can have it open into your home directory instead.\n\n\nUnder the Profiles section in the settings menu click on Ubuntu\n\n\nAt the General tab, you will find a Starting directory input\n\n\nEnter the following replacing “username” with your Ubuntu user name: \\\\wsl$\\Ubuntu\\home\\username\n\n\nYou can leave the Use parent process directory box unchecked\n\n\nIf it is still opening into your / directory, change the Command line setting located right above the Starting directory input box to the following: wsl.exe -d Ubuntu\n\n\n\nZsh\nZ shell works almost identically to the standard BASH shell found on default Linux installs. What makes it different is its support for plugins and themes, along with some extra features l",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "untu\n\n\n\nZsh\nZ shell works almost identically to the standard BASH shell found on default Linux installs. What makes it different is its support for plugins and themes, along with some extra features like spelling correction and recursive path expansion. It’s time to throw BASH in the trash!\nInstalling Zsh\nZsh can be installed with one command:\nTerminal windowsudo apt install zsh\nAfter installing, type the zsh command. Zsh will ask you to choose some configurations. We will do this later on while installing oh-my-zsh, so choose option 0 to create the config file and prevent this message from showing again.\nOhMyZsh\nThe most popular plugin framework by far is OhMyZsh. It comes preloaded with loads of plugins, themes, helpers, and more. It can help with productivity for sure, but more importantly, it just looks cool 😎.\ncURL\nFirst off, we need to make sure we have cURL installed. Short for “Client URL”, it’s a way to transfer data from the command line, and that’s how we will download OhMyZ",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "tly, it just looks cool 😎.\ncURL\nFirst off, we need to make sure we have cURL installed. Short for “Client URL”, it’s a way to transfer data from the command line, and that’s how we will download OhMyZsh.\nTerminal windowsudo apt install curl\nInstalling OhMyZsh\nEnter the following command into your terminal to install OhMyZsh:\nTerminal windowsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\nThat’s it! You should now see a .oh-my-zsh directory inside of your home directory. To change your plugins and themes you will need to edit your .zshrc file, also found in your home dir.\nHere is a list of all the themes and plugins that come bundled with OhMyZsh.\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone h",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "estions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\nTerminal windowplugins=(git zsh-autosuggestions)\n\n\nStart a new terminal session.\n\n\nzsh-syntax-highlighting\nThis package provides syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zsh",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zshrc:\nTerminal windowplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n\n\nStart a new terminal session.\nA huge list of plugins can be found at the awesome zsh plugins repo.\n\n\nGit Config\nGit should come pre-installed on most, if not all of the WSL Linux distributions. To ensure you have the latest version, use the following command in an Ubuntu or Debian-based distro:\nTerminal windowsudo apt install git\nName\nTo set up your Git config file, open a WSL command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd fina",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "r.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add your GitHub username to link it to git (case sensitive!):\nTerminal windowgit config --global user.username \"GitHub username\"\nMake sure you are inputting user.username and not user.name otherwise, you will overwrite your name and you will not be correctly synced to your GitHub account.\nYou can double-check any of your settings by typing git config --global user.name and so on. To make any changes just type the necessary command again as in the examples above.\nDocker\nThis section covers setting docker desktop for MacOS. In the end, you will have a docker-daemon, docker-cli, docker-compose, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the execut",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "se, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the executable for docker-desktop.\n\n\nInstall the executable, and choose the appropriate virtualization environment while installing if the option shows up.\n\n\nDone with installation. Sign in with the docker account or skip for the time being.\n\n\nTest Docker CLI\nMake sure you at least launch docker-desktop once, and let it run in the background.\nTerminal windowdocker -v\nYou have successfully installed docker-desktop and all other necessary tools docker-cli, docker-compose, and more.\nPackage Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gained popularity in the JavaScript community: NPM, Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js, you automatically get NPM installed on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal w",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "tic dependency resolution.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable\n\n\nYou can quickly check whether Corepack is enabled by running yarn exec env: if you get a path as output, Corepack is properly installed.\n\n\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable pnpm\n\n\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "is is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable pnpm\n\n\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.\n\n\nIt aims to provide a high-performance alternative to Node.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       PowerShell/cmd.eve     npm     scoop      Terminal windowpowershell -c \"irm bun.sh/install.ps1|iex\"  Terminal windownpm install -g bun  Terminal windowscoop install bun   \n\n\nBasic commands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThis wil",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "n the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThis will create a package.json file with the default settings.\n\n\nInstall a package\nTo install the required package, you can run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a scr",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a script defined in your package.json file, run the following commands\n         bun      pnpm      npm      yarn      Terminal windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their tooling in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything t",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "htweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything that is needed for coding (editor) and executing the code (integrated terminal).\n\n\nInstalling VS Code\nVS Code is available on Windows, macOS, and Linux. You can download the latest Windows installer here. We recommend using the stable build.\nChanging the Default Shell\nThe WSL2 shell can be chosen as the default VS Code terminal by pressing Ctrl + Shift + P and typing/choosing Terminal: Select Default Profile, then selecting zsh:\n\n\nRemote Extension\n\n\nInstall the Remote - WSL extension on VS Code.\n\n\nThis allows you to use WSL as your integrated development environment and will handle compatibility and pathing for you. Learn more.\n\n\nThis extension will also allow you to launch VS Code right from your WSL terminal by using the code command.\n\n\nIf I were inside the root directory of my repository",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "y and pathing for you. Learn more.\n\n\nThis extension will also allow you to launch VS Code right from your WSL terminal by using the code command.\n\n\nIf I were inside the root directory of my repository, I would use code . to launch the entire directory inside VS Code.\nTerminal windowcd my-projectcode .\n\n\nUseful Extensions\n\n\nPrettier - Prettier is an opinionated code formatter.\n\n\nESLint - Find and fix problems in your code\n\n\nDocker - Makes it easy to create, manage, and debug containerized applications.\n\n\nError Lens - Improve highlighting of errors, warnings and other language diagnostics.\n\n\nindent-rainbow - Makes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nvscode-icons - Icons for Visual Studio Code\n\n\nFluent Icons - Fluent product icons for Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nSet up a WSL development environment learn.microsoft.comSet up a WSL development en",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "heme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nSet up a WSL development environment learn.microsoft.comSet up a WSL development environment using best practices from this set-by-step guide. Learn how to run Ubuntu, Visual Studio Code or Visual Studio, Git, Windows Credential Manager, MongoDB, MySQL, Docker remote containers and more.Install WSL learn.microsoft.comInstall Windows Subsystem for Linux with the command, wsl --install. Use a Bash terminal on your Windows machine run by your preferred Linux distribution - Ubuntu, Debian, SUSE, Kali, Fedora, Pengwin, Alpine, and more are available.WSL2 Tutorial: The Complete Guide for Windows 10 & 11 — SitePoint sitepoint.comLearn how to install, set up, manage, and use a full Linux environment on Windows 10 & 11 PCs with Windows Subsystem for Linux 2 (WSL2). Complete WSL2 Tutorial.Git a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityGitHub - g",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "Linux environment on Windows 10 & 11 PCs with Windows Subsystem for Linux 2 (WSL2). Complete WSL2 Tutorial.Git a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosystem/git-credential-managerZSH and Oh-My-Zsh on Windows Subsystem for Linux (WSL) kevinprogramming.comIn this posting, I will show how to install ZSH and Oh-My-Zsh on Windows PC (WSL). This will be helpful if you want to setup a Linux development environment on Windows PC.\n\nI have already installed Ubuntu 20.04 on Windows Subsystem for Linux (WSL). Bash is the default shellInstalling Chocolatey chocolatey.orgChocolatey is software management automation for Windows that wraps in",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "already installed Ubuntu 20.04 on Windows Subsystem for Linux (WSL). Bash is the default shellInstalling Chocolatey chocolatey.orgChocolatey is software management automation for Windows that wraps installers, executables, zips, and scripts into compiled packages. Chocolatey integrates w/SCCM, Puppet, Chef, etc. Chocolatey is trusted by businesses to manage software deployments.Windows Terminal installation learn.microsoft.comLearn how to install and set up Windows Terminal.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousMacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/devops/environmnet-setup/windows/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your",
    "source": "https://docs.chaicode.com/devops/getting-started/"
  },
  {
    "content": "eos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encount",
    "source": "https://docs.chaicode.com/devops/getting-started/"
  },
  {
    "content": "r additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/devops/getting-started/"
  },
  {
    "content": "ake the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next MacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/devops/getting-started/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configu",
    "source": "https://docs.chaicode.com/youtube/getting-started"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything",
    "source": "https://docs.chaicode.com/youtube/getting-started"
  },
  {
    "content": "rom the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate",
    "source": "https://docs.chaicode.com/youtube/getting-started"
  },
  {
    "content": "ize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are ava",
    "source": "https://docs.chaicode.com/youtube/getting-started"
  },
  {
    "content": "By following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next Welcome    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/getting-started"
  },
  {
    "content": "Database Design Exercise | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Ngin",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/"
  },
  {
    "content": "i aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Client Requirements:    SQL Solution:    Additional Resources:    Summary    On this page   Overview    Client Requirements:    SQL Solution:    Additional Resources:    Summary           Database Design Exercise      In this exercise, we’ll explore practical database design using a real-world scenario. We’ll learn how to structure and manage data effectively by implementing a database solution for a chai store business.\nClient Requirements:\nYou’ve been approached by a client who runs a small chai store and wants to set up a simple database to",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/"
  },
  {
    "content": "effectively by implementing a database solution for a chai store business.\nClient Requirements:\nYou’ve been approached by a client who runs a small chai store and wants to set up a simple database to manage their chai offerings. The client has provided the following requirements:\n\n\nDatabase Setup:\nCreate a new database named chai_store_db for managing chai products.\n\n\nChai Table:\nCreate a table called chai_store with the following columns:\n\nid: A unique identifier for each chai (auto-incrementing).\nchai_name: The name of the chai (e.g., “Masala Chai”, “Green Chai”).\nprice: The price of each chai.\nchai_type: Type of chai (e.g., “Spiced”, “Herbal”, “Cold”).\navailable: Boolean value indicating if the chai is currently available or not.\n\n\n\n\nInitial Data Insertion:\nThe client provides a list of their chai offerings and wants you to insert the following data:\n\nMasala Chai - ₹30 - Spiced - Available\nGreen Chai - ₹25 - Herbal - Available\nBlack Chai - ₹20 - Classic - Available\nIced Chai - ₹35 -",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/"
  },
  {
    "content": "their chai offerings and wants you to insert the following data:\n\nMasala Chai - ₹30 - Spiced - Available\nGreen Chai - ₹25 - Herbal - Available\nBlack Chai - ₹20 - Classic - Available\nIced Chai - ₹35 - Cold - Not Available\nOolong Chai - ₹40 - Specialty - Available\n\n\n\n\nData Queries:\nThe client needs some reports:\n\nDisplay all chai names and prices, using column aliases like “Chai Name” and “Cost in INR”.\nFind all chai varieties that have the word “Chai” in their name.\nList all chai varieties that cost less than ₹30.\nShow chai varieties sorted by price from highest to lowest.\n\n\n\n\nData Updates:\nThe client wants to update the price of “Iced Chai” to ₹38 and mark it as available.\n\n\nData Deletions:\nThe client decides to discontinue “Black Chai” and requests its removal from the database.\n\n\nSQL Solution:\n\n\nCreate a new Database for the chai store:\nCREATE DATABASE chai_store_db;\n\n\nCreate a new table for the chai store:\nCREATE TABLE chai_store (    id SERIAL PRIMARY KEY,    chai_name VARCHAR(100",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/"
  },
  {
    "content": "lution:\n\n\nCreate a new Database for the chai store:\nCREATE DATABASE chai_store_db;\n\n\nCreate a new table for the chai store:\nCREATE TABLE chai_store (    id SERIAL PRIMARY KEY,    chai_name VARCHAR(100) NOT NULL,    price DECIMAL(5, 2) NOT NULL,    chai_type VARCHAR(100) NOT NULL,    available BOOLEAN NOT NULL);\n\n\nInsert the initial data into the chai store table:\nINSERT INTO chai_store (chai_name, price, chai_type, available)VALUES ('Masala Chai', 30, 'Spiced', TRUE),       ('Green Chai', 25, 'Herbal', TRUE),       ('Black Chai', 20, 'Classic', TRUE),       ('Iced Chai', 35, 'Cold', FALSE),       ('Oolong Chai', 40, 'Specialty', TRUE);\n\n\nDisplay all chai names and prices, using column aliases:\nSELECT chai_name AS \"Chai Name\", price AS \"Cost in INR\"FROM chai_store;\n\n\nFind all chai varieties that have the word “Chai” in their name:\nSELECT * FROM chai_storeWHERE chai_name LIKE '%Chai%';\n\n\nList all chai varieties that cost less than ₹30:\nSELECT * FROM chai_storeWHERE price < 30;\n\n\nShow cha",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/"
  },
  {
    "content": "that have the word “Chai” in their name:\nSELECT * FROM chai_storeWHERE chai_name LIKE '%Chai%';\n\n\nList all chai varieties that cost less than ₹30:\nSELECT * FROM chai_storeWHERE price < 30;\n\n\nShow chai varieties sorted by price from highest to lowest:\nSELECT * FROM chai_storeORDER BY price DESC;\n\n\nUpdate the price of “Iced Chai” to ₹38 and mark it as available:\nUPDATE chai_storeSET price = 38, available = TRUEWHERE chai_name = 'Iced Chai';\n\n\nDelete “Black Chai” from the database:\nDELETE FROM chai_storeWHERE chai_name = 'Black Chai';\n\n\nAdditional Resources:\nTo delete entire table:\nDROP TABLE chai_store;\nAlso, you can use the TRUNCATE command to delete all rows from a table:\nTRUNCATE TABLE chai_store;\nMost of the time you will see that DROP command is used with IF Exists clause to avoid accidental errors:\nDROP TABLE IF EXISTS chai_store;\nSummary\nIn this chapter, we have learned about the basics of SQL and how to use it to manage and manipulate relational databases. We have also learned a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/"
  },
  {
    "content": "dental errors:\nDROP TABLE IF EXISTS chai_store;\nSummary\nIn this chapter, we have learned about the basics of SQL and how to use it to manage and manipulate relational databases. We have also learned about the different types of relationships in SQL and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 19, 2025   PreviousDatabase DesignNext SQL Joins and Keys    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/"
  },
  {
    "content": "Setting up VPC for deployment | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Server Selection    Server Configuration    OS Configuration    Get an account on any cloud provider    Change password (optional)    Add Non-root User    Connect to the server using SSH    Disable password login    Firewall Configuration    Summary    On this page   Overview    Server Selection    Server Configuration    OS Configuration    Get an account on any cloud provider    Change password (optional)    Add Non-root User    Connect to the server using SSH    Disable password login    Firewall Configuration    Summary           Setti",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "et an account on any cloud provider    Change password (optional)    Add Non-root User    Connect to the server using SSH    Disable password login    Firewall Configuration    Summary           Setting up VPC for deployment      In this tutorial, we will learn how to set up a server for hosting. We will cover topics such as server selection, server configuration, and server hardening.\n  Play    \nServer Selection\nBefore setting up a server, it’s important to choose the right server for your needs. There are several factors to consider when selecting a server, including:\n\nBudget: Determine how much you can afford to spend on a server.\nPurpose: Decide what you want to use the server for, such as hosting a website, running a business, or running a development environment.\nLocation: Choose a server that is close to your users and has good connectivity.\nSecurity: Ensure that the server is secure and protected against potential threats.\n\nServer Configuration\nOnce you have chosen a server, yo",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "erver that is close to your users and has good connectivity.\nSecurity: Ensure that the server is secure and protected against potential threats.\n\nServer Configuration\nOnce you have chosen a server, you need to configure it properly. This involves setting up the server’s operating system, configuring the server’s network settings, and setting up any necessary software or applications.\nOS Configuration\nThe first step in configuring a server is to set up the operating system. This involves installing the operating system and any necessary software packages. Here are some steps to follow:\n\n\nChoose an operating system\nSelect an operating system that is compatible with your needs and budget. Some popular options include Ubuntu, CentOS, and Debian.\n\n\nUpdate the operating system\nUse a package manager like apt or yum to update the operating system on the server.\n\n\nConfigure the network settings\nSet up the network settings, such as IP address, subnet mask, and gateway, to ensure that the server",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "ger like apt or yum to update the operating system on the server.\n\n\nConfigure the network settings\nSet up the network settings, such as IP address, subnet mask, and gateway, to ensure that the server can communicate with other devices on the network.\n\n\nInstall any necessary software\nInstall any necessary software packages, such as web servers, database servers, or development tools, on the server.\n\n\nGet an account on any cloud provider\nWe will use Linode as our cloud provider. Linode is a cloud hosting provider that offers a wide range of virtual private servers (VPS) with varying configurations and prices. It is a popular choice for hosting web applications and other types of software.\nOnce the account is created, you can choose the plan that best suits your needs. The plan will determine the number of servers you can create, the amount of storage space available, and the price per month.\nOnce the machine is created and up and running, you can connect to it using your terminal, in my",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "the number of servers you can create, the amount of storage space available, and the price per month.\nOnce the machine is created and up and running, you can connect to it using your terminal, in my case I am using warp terminal. You can use warp to connect to your machine and manage it remotely.\nTerminal windowssh [email protected]\nNow we are inside our machine and we can start installing the necessary packages and software but before that let’s upgrade our system.\nTerminal windowapt updateapt upgradeapt update\nAlways run the apt update command before apt upgrade to ensure that you have the latest packages available.\nChange password (optional)\nAlthough most cloud providers offer a way to change the password of your machine directly from the control panel but in case you want to do it manually, you can use the following command:\nTerminal windowpasswd\nThis will prompt you to enter your current password and then you will be prompted to enter a new password. Once you have entered the new",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "ually, you can use the following command:\nTerminal windowpasswd\nThis will prompt you to enter your current password and then you will be prompted to enter a new password. Once you have entered the new password, you will be prompted to confirm it. After that, the password will be changed.\nAdd Non-root User\nTo add a non-root user, you can use the following command:\nTerminal windowuseradd -m -s /bin/bash usernamegroups username\nThis will create a new user with the specified username and you can check the groups of the user using the groups command. After that, you can add the user to the sudoers group using the following command:\nTerminal windowusermod -aG sudo username\nThis will add the user to the sudoers group, giving them the ability to run commands with sudo privileges. Now lets create a password for the user:\nTerminal windowsudo passwd username\nThis will prompt you to enter a new password for the user. After that, you can log in as the user using the following command:\nTerminal wind",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "password for the user:\nTerminal windowsudo passwd username\nThis will prompt you to enter a new password for the user. After that, you can log in as the user using the following command:\nTerminal windowssh [email protected]\nFinally, logged in as the user.\nConnect to the server using SSH\nSetting up SSH key on your machine is fairly easy and you need to do it once. You can generate it once as your machine identification and then you can use it to connect to the server. Here is a link to the official documentation on how to generate SSH keys on Linux and MacOS.\nHere are some simple steps to follow:\nTerminal windowssh-keygen -t ed25519 -C \"[email protected]\"\nto view the public key\nTerminal windowcat ~/.ssh/id_ed25519.pub\nOnce you have generated the SSH keys, you can add them to your server using the following command (assuming you have copied the public key to your clipboard):\nOn your server, run the following command to copy the public key to the server. Create a new directory called .ssh",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "ng the following command (assuming you have copied the public key to your clipboard):\nOn your server, run the following command to copy the public key to the server. Create a new directory called .ssh in your home directory if it doesn’t already exist. Then create a new file called authorized_keys in the .ssh directory and paste the public key into the file.\nTerminal windownano ~/.ssh/authorized_keys\nPaste the public key into the file.\nadd it to the ssh utility\nTerminal windowssh-add -k ~/.ssh/id_ed25519\nDisable password login\nAfter this, no one will be able to log in to your server using the username and password. Be careful with this.\nTerminal windowsudo nano /etc/ssh/sshd_config\nOpen this file in nano editor and search for PasswordAuthentication and change it to no. Optionally, you can also change the PermitRootLogin to no to prevent root user from logging in.\nNow, restart the ssh service using the following command:\nTerminal windowsudo service ssh restart\nFirewall Configuration\nYou",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "also change the PermitRootLogin to no to prevent root user from logging in.\nNow, restart the ssh service using the following command:\nTerminal windowsudo service ssh restart\nFirewall Configuration\nYou can install firewall package to protect your server from external attacks. In my case I will use linode firewall that I can easily configure from the control panel. Some people prefer to use ufw (Uncomplicated Firewall) which is a simple and easy to use firewall.\nTo install ufw, run the following command:\nTerminal windowsudo apt install ufw\nOnce the package is installed, you can configure the firewall using the following command:\nTerminal windowsudo ufw status\nThis will show the current status of the firewall. To enable the firewall, run the following command:\nTerminal windowsudo ufw enable\nThis will enable the firewall and allow all incoming and outgoing traffic. To allow incoming traffic on a specific port, run the following command:\nTerminal windowsudo ufw allow \nFor example, to allow",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "his will enable the firewall and allow all incoming and outgoing traffic. To allow incoming traffic on a specific port, run the following command:\nTerminal windowsudo ufw allow \nFor example, to allow incoming traffic on port 22, run the following command:\nTerminal windowsudo ufw allow 22\nTo allow incoming traffic on multiple ports, run the following command:\nTerminal windowsudo ufw allow ,,\nFor example, to allow incoming traffic on ports 22, 80, and 443, run the following command:\nTerminal windowsudo ufw allow 22,80,443\nSummary\nIn this tutorial, we have learned how to set up a server for hosting. We have covered topics such as server selection, server configuration, and server hardening.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025   PreviousWelcomeNext Nginx Configuration    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025   PreviousWelcomeNext Nginx Configuration    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/"
  },
  {
    "content": "Setting Up PostgreSQL On VPS | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/"
  },
  {
    "content": "Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Install PostgreSQL    Check PostgreSQL is running    Use psql to connect to the database    List databases    Create a database    List databases    List tables    Setup PostgreSQL server    Connection Settings    Restart the PostgreSQL server:    Summary    On this page   Overview    Install PostgreSQL    Check PostgreSQL is running    Use psql to connect to the database    List databases    Create a database    List databases    List tables    Setup PostgreSQL server    Connection Settings    Restart the PostgreSQL server:    Summary",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/"
  },
  {
    "content": "l to connect to the database    List databases    Create a database    List databases    List tables    Setup PostgreSQL server    Connection Settings    Restart the PostgreSQL server:    Summary           Setting Up PostgreSQL On VPS      PostgreSQL is a powerful, open-source object-relational database system. It is a highly scalable, SQL-compliant database management system that is used to handle large workloads. PostgreSQL is a popular choice for many developers and organizations due to its robust features, extensibility, and reliability.\nIn this tutorial, we will walk you through the process of setting up PostgreSQL on Ubuntu on a VPS.\nInstall PostgreSQL\nTerminal windowsudo apt updatesudo apt install postgresqlsudo service postgresql start # start the service\nCheck PostgreSQL is running\nTerminal windowsudo service postgresql status\nMake sure the service is running\nUse psql to connect to the database\nTerminal windowsudo -u postgres psql\nThis will open a CLI where you can run SQL com",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/"
  },
  {
    "content": "g\nTerminal windowsudo service postgresql status\nMake sure the service is running\nUse psql to connect to the database\nTerminal windowsudo -u postgres psql\nThis will open a CLI where you can run SQL commands.\nAfter first launching psql, you may check the details of your connection by typing \\conninfo into the interpreter.\nTerminal windowpostgres=# \\conninfoConnection to database \"postgres\" by user \"postgres\".  Host: localhost  Port: 5432  Username: postgres  Database: postgres  SSL off\nList databases\nTerminal windowpostgres=# \\l                                  List of databases    Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges  ----------+----------+----------+------------+------------+-----------------------  postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 |  template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +            |          |          |            |            | postgres=CTc/postgres  template1 | postgres |",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/"
  },
  {
    "content": "US.utf8 |  template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +            |          |          |            |            | postgres=CTc/postgres  template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +            |          |          |            |            | postgres=CTc/postgres\n  (3 rows)\nCreate a database\nTerminal windowpostgres=# CREATE DATABASE mydb;CREATE DATABASE\nList databases\nTerminal windowpostgres=# \\l                                List of databases     Name   |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges  ----------+----------+----------+------------+------------+-----------------------  mydb      | postgres | UTF8     | en_US.utf8 | en_US.utf8 |  postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 |  template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +            |          |          |            |            | postgres=CTc/postgres  template1 | post",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/"
  },
  {
    "content": "| en_US.utf8 |  template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +            |          |          |            |            | postgres=CTc/postgres  template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +            |          |          |            |            | postgres=CTc/postgres\n  (4 rows)\nList tables\nTerminal windowpostgres=# \\dt\n          List of relations  Schema | Name | Type  |  Owner  -------+------+-------+----------  public | foo  | table | postgres  public | bar  | table | postgres\n  (2 rows)\nSetup PostgreSQL server\nOpen the file /etc/postgresql//main/postgresql.conf and add the following lines:\nlisten_addresses = '*'\nThis will allow connections from any IP address. This is not recommended for production environments.\nConnection Settings\nAdd the following lines in /etc/postgresql//main/pg_hba.conf:\n# Allow connections from any IP addresshost    all             all             0.0.0.0/0               md5\nRest",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/"
  },
  {
    "content": "ments.\nConnection Settings\nAdd the following lines in /etc/postgresql//main/pg_hba.conf:\n# Allow connections from any IP addresshost    all             all             0.0.0.0/0               md5\nRestart the PostgreSQL server:\nTerminal windowsudo service postgresql restart# orsudo systemctl restart postgresql\nThis server will be accessible at localhost:5432 if your backend server is running on the same machine. If you are running the backend server on a different machine, you will need to configure the host and port settings in the .env file.\nSummary\nIn this tutorial, we have learned how to set up PostgreSQL on Ubuntu on a VPS. We have also learned how to create a database, list tables and configure connection settings.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 22, 2025   PreviousPostgreSQL & DockerNext Advance Node Logger    \nContribute\n    \nCommunity\n   \nSponso",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/"
  },
  {
    "content": "chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 22, 2025   PreviousPostgreSQL & DockerNext Advance Node Logger    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/"
  },
  {
    "content": "Nginx Rate Limit | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Config",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/"
  },
  {
    "content": "L       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Adding Rate Limiting    Summary    References    On this page   Overview    Prerequisites    Adding Rate Limiting    Summary    References           Nginx Rate Limit      Rate limiting can be implemented in two primary ways: directly in your application’s server code, or at the infrastructure level on the machine where your server is running.\nIn this tutorial, we will learn how to do rate limit via Nginx.\n  Play    \nPrerequisites\nBefore going forward, make sure you have the following prerequisites:\n\nA server with root access\nA domain n",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/"
  },
  {
    "content": "ng.\nIn this tutorial, we will learn how to do rate limit via Nginx.\n  Play    \nPrerequisites\nBefore going forward, make sure you have the following prerequisites:\n\nA server with root access\nA domain name or IP address\nA web server that can be used to serve static files\nNginx installed and configured on the machine\n\nAdding Rate Limiting\nNginx provides a simple way to add rate limiting using the limit_req_zone and limit_req directives.\n\n\nEdit the main configuration file to define a rate limit zone:\n\nTerminal windowsudo vim /etc/nginx/nginx.conf\n\n\nAdd the following to the http block:\n\nhttp {  limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;\n  ...}\nThe directive limit_req_zone is used in Nginx to define a shared memory zone that will be used to store the state of rate limits for incoming requests. Here’s a breakdown of the specific directive you provided:\nlimit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;\n\n$binary_remote_addr: This is a variable that holds the cli",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/"
  },
  {
    "content": "incoming requests. Here’s a breakdown of the specific directive you provided:\nlimit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;\n\n$binary_remote_addr: This is a variable that holds the client’s IP address in a binary format. Using the binary format saves memory, which is important when dealing with large numbers of requests.\nzone=mylimit:10m: This specifies the name and size of the shared memory zone used to store the state of rate limits.\n\nmylimit is the name of the zone.\n10m means that the size of the zone is 10 megabytes. This size dictates how many IP addresses and their request states can be stored in memory. A 10MB zone can typically store about 160,000 states (given that each state takes about 64 bytes).\n\n\nrate=2r/s: This sets the request rate limit.\n\n2r/s means that each IP address is allowed to make 2 requests per second.\n\n\n\nWhen you configure limit_req_zone in your Nginx configuration, it sets up a system to control how many requests a client can make to your serv",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/"
  },
  {
    "content": "h IP address is allowed to make 2 requests per second.\n\n\n\nWhen you configure limit_req_zone in your Nginx configuration, it sets up a system to control how many requests a client can make to your server in a given time frame. This can help protect your server from being overwhelmed by too many requests from a single client, which can be a form of denial-of-service attack.\n\n\nEdit your server block configuration to apply the rate limit:\n\nTerminal windowsudo vim /etc/nginx/sites-available/default\n\n\nAdd the following inside the server block:\nserver {  ...\n  location / {    limit_req zone=mylimit burst=20 nodelay;    try_files $uri $uri/ =404;  }\n  ...}\nabove code applies the rate limiting defined by the mylimit zone.\n\nburst=20 allows a burst of up to 20 requests beyond the defined rate. So, even if the rate limit is set to 2 requests per second, the burst allows up to 20 requests to be made in a second. The requests exceeding the rate limit will be rejected immediately.\nnodelay means that",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/"
  },
  {
    "content": "en if the rate limit is set to 2 requests per second, the burst allows up to 20 requests to be made in a second. The requests exceeding the rate limit will be rejected immediately.\nnodelay means that requests that exceed the rate limit should be rejected immediately rather than delayed.\n\n\n\n\nTest and reload Nginx:\n\nTerminal windowsudo nginx -tsudo systemctl reload nginx\n\n\nSummary\nIn this tutorial, we have learned how to do rate limit via Nginx.\nReferences\nModule ngx_http_limit_req_module nginx.orgRate Limiting with NGINX – NGINX Community Blog blog.nginx.org\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025   PreviousNginx ConfigurationNext Nginx SSL Setup    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/"
  },
  {
    "content": "bute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/"
  },
  {
    "content": "Hello World | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configurati",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/hello-world/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Writing Hello World    Compiling Hello World    Running Hello World    Hello World with Comments    Summary    On this page   Overview    Writing Hello World    Compiling Hello World    Running Hello World    Hello World with Comments    Summary           Hello World      In this chapter, we will learn how to write a simple “Hello World” program in C++. We will start by writing a program that prints “Hello World” to the console, and then we will add some comments and formatting to make the code more readable.\nWriting Hello World\nTo write a “Hello World” pro",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/hello-world/"
  },
  {
    "content": "start by writing a program that prints “Hello World” to the console, and then we will add some comments and formatting to make the code more readable.\nWriting Hello World\nTo write a “Hello World” program in C++, we need to create a new hello.cpp file and write the following code:\nhello.cpp#include using namespace std;\nint main() {  cout << \"Hello World!\" << endl;  return 0;}\nLet’s break down the code:\n\n#include : This line includes the iostream header file, which provides input and output functionality.\nint main(): This line defines the main function, which is the entry point of the program. furthermore, it specifies the return type of the function as int. The int data type is used to represent integers and this function returns an integer value.\nusing namespace std;: This line allows us to use the cout object from the std namespace without having to prefix it with std::. The concept of namespace is important in C++ and it helps to avoid naming conflicts. In this case, we are using th",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/hello-world/"
  },
  {
    "content": "to use the cout object from the std namespace without having to prefix it with std::. The concept of namespace is important in C++ and it helps to avoid naming conflicts. In this case, we are using the cout & endl object from the std namespace.\ncout << \"Hello World!\" << endl;: This line prints the string “Hello World!” to the console. endl is a manipulator that adds a newline character to the output.\nreturn 0;: This line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\nCompiling Hello World\nTo compile the “Hello World” program, we need to use a C++ compiler. A C++ compiler is a software tool that translates the C++ code into machine code that can be executed by a computer. You can use runner extension in VS Code to compile and run the code.\nRunning Hello World\nTo run the “Hello World” program, we need to compile it and then run the compi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/hello-world/"
  },
  {
    "content": "t can be executed by a computer. You can use runner extension in VS Code to compile and run the code.\nRunning Hello World\nTo run the “Hello World” program, we need to compile it and then run the compiled executable. Here are the steps to do this:\n\n\nOpen a terminal.\n\n\nNavigate to the directory where the “Hello World” program is saved.\n\n\nCompile the program using the following command:\nTerminal windowg++ hello.cpp -o hello\nOR you can use runner extension in VS Code to compile and run the code.\n\n\nRun the program using the following command:\nTerminal window./hello\n\n\nThe program should print “Hello World!” to the console.\n\n\nHello World with Comments\nNow that we have written a “Hello World” program, let’s add some comments to make the code more readable. Here’s the updated code:\nhello.cpp#include using namespace std;\nint main() {  // Print \"Hello World!\" to the console  cout << \"Hello World!\" << endl;  return 0;}\nIn above code:\n\nThe // symbol is used to add comments to the code.\nComments are",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/hello-world/"
  },
  {
    "content": "e using namespace std;\nint main() {  // Print \"Hello World!\" to the console  cout << \"Hello World!\" << endl;  return 0;}\nIn above code:\n\nThe // symbol is used to add comments to the code.\nComments are ignored by the compiler and are only meant for human readers.\n\nSummary\nIn this chapter, we have learned how to write a simple “Hello World” program in C++. We have also learned how to compile and run the program.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousC++ IntroNext Variables & Constants    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/hello-world/"
  },
  {
    "content": "Common HTML Tags | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Config",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "L       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Basic Terminology    HTML Tags for Text Content    HTML Tags for Lists    HTML Tags for Tables    HTML Tags for Forms    HTML Tags for Media    HTML Tags for Linking and Metadata     Script Tag Variations      HTML Tags for Semantic and Meta Content    Attributes for HTML Tags     HTML5 attributes      HTML5 tags    Conclusion    On this page   Overview    Basic Terminology    HTML Tags for Text Content    HTML Tags for Lists    HTML Tags for Tables    HTML Tags for Forms    HTML Tags for Media    HTML Tags for Linking and Metadata     Script Tag Varia",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "Basic Terminology    HTML Tags for Text Content    HTML Tags for Lists    HTML Tags for Tables    HTML Tags for Forms    HTML Tags for Media    HTML Tags for Linking and Metadata     Script Tag Variations      HTML Tags for Semantic and Meta Content    Attributes for HTML Tags     HTML5 attributes      HTML5 tags    Conclusion           Common HTML Tags         Focus on the Essentials   Remember, you don’t need to master HTML to become a web developer. Focus on the basics and move on quickly. HTML5 only adds a few new tags and attributes to the classic HTML vocabulary. Although accessibility is very important, we’ll cover that later—especially if you plan to build web applications with JavaScript or modern frameworks.  \nBasic Terminology\n\nTag – A piece of text enclosed in angle brackets (e.g., ) that defines an HTML element.\nAttribute – Extra information provided inside an opening tag to modify an element (e.g., id=\"main\").\nElement – A complete HTML structure, typically including an o",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "e.g., ) that defines an HTML element.\nAttribute – Extra information provided inside an opening tag to modify an element (e.g., id=\"main\").\nElement – A complete HTML structure, typically including an opening tag, content, and a closing tag.\n\nHTML Tags for Text Content\n\n – Paragraph\n – Inline container for text\n – Generic container (block-level element)\n – Anchor (hyperlink)\n – Image\n – Line break\n – Horizontal rule\n – Bold text\n – Italic text\n – Underlined text\n – Strong importance (semantically bold)\n – Emphasized text (typically italicized)\n – Code snippet\n – Preformatted text\n\nHTML Tags for Lists\n\n – Unordered list\n – Ordered list\n – List item\n\nHTML Tags for Tables\n\n – Table container\n – Table row\n – Table cell\n\nHTML Tags for Forms\n\n – Form container\n – Input field\n – Multi-line text input\n – Drop-down list\n – Option within a drop-down\n – Button\n\nHTML Tags for Media\n\n – Image element\n – Media resource (used within  or )\n – Container for multiple image sources\n – Video element\n – Audi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "ut\n – Drop-down list\n – Option within a drop-down\n – Button\n\nHTML Tags for Media\n\n – Image element\n – Media resource (used within  or )\n – Container for multiple image sources\n – Video element\n – Audio element\n\nHTML Tags for Linking and Metadata\n\n – Links external resources (e.g., CSS files, favicons)\n – Provides metadata about the document\n – External script\n – Asynchronously loaded script\n – Deferred script execution\n – JavaScript module\n\nHTML Tags for Semantic and Meta Content\nModern HTML (HTML5) introduces several semantic tags that enhance the meaning and structure of your document:\n\n – Defines a header for a document or section\n – Defines a footer for a document or section\n – Defines navigation links\n – Specifies the main content of a document\n – Encloses self-contained content\n – Groups related content together\n – Represents content aside from the main content\n – Defines additional details the user can view or hide\n – Provides a summary for the  element\n – Represents a specific",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "oups related content together\n – Represents content aside from the main content\n – Defines additional details the user can view or hide\n – Provides a summary for the  element\n – Represents a specific period in time\n\nAdditionally, standard meta tags include:\n\n – Sets the character encoding\n – Ensures responsiveness\n – Provides a page description\n – Identifies the author\n – Supplies SEO keywords\n – Guides search engine indexing\n – Specific for Googlebot\n\nAttributes for HTML Tags\nAttributes provide additional information for HTML elements. Here are some common examples:\nHello WorldVisit GoogleClick me\n\nid=\"my-id\" - Adds an id attribute with the value my-id\n.my-class - Adds a class attribute with the value my-class\nsrc=\"image.jpg\" - Adds a src attribute with the value image.jpg\nalt=\"Image\" - Adds an alt attribute with the value Image\nhref=\"https://www.google.com\" - Adds a href attribute with the value https://www.google.com\ntype=\"text\" - Adds a type attribute with the value text\nplaceholde",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "dds an alt attribute with the value Image\nhref=\"https://www.google.com\" - Adds a href attribute with the value https://www.google.com\ntype=\"text\" - Adds a type attribute with the value text\nplaceholder=\"Enter your name\" - Adds a placeholder attribute with the value Enter your name\n\nSome attributes are global attributes and can be used on any HTML tag. Some attributes are specific to certain tags and can only be used with that tag. For example, the href attribute is a specific attribute for the  tag, and the title attribute is a global attribute that can be used on any HTML tag.\nHTML5 attributes\nSome examples of HTML5 attributes are:\n\nautofocus - Adds an autofocus attribute to an input field\nrequired - Adds a required attribute to an input field\nreadonly - Adds a readonly attribute to an input field\nsection - Adds a section attribute to a section element\nfooter - Adds a footer attribute to a footer element\n\n\nfooter, section, and header are new HTML5 attributes. They are used to define t",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "put field\nsection - Adds a section attribute to a section element\nfooter - Adds a footer attribute to a footer element\n\n\nfooter, section, and header are new HTML5 attributes. They are used to define the structure of a web page. Fundamentally, they are used to group related content together, just like the  tag is used to group related content together.\n\nHTML5 tags\n\n - Header\n - Footer\n - Navigation\n - Main\n - Article\n - Section\n - Aside\n - Details\n - Summary\n - Time\n - Mark\n - Meter\n - Progress\n - Video\n - Audio\n - Source\n\nConclusion\nYou don’t need to do a PhD in HTML to be a web developer. You just need to know the basics and get out of here ASAP. HTML5 just adds a few new tags and attributes to HTML. Rest all the stuff like Web APIs (local storage, session storage, etc.) are just JavaScript stuff. You can learn them later.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: A",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "pt stuff. You can learn them later.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousEmmet Crash CourseNext Welcome    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/"
  },
  {
    "content": "Setting Up PostgreSQL with Docker | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startu",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Installing Docker    Create Storage Directory    Docker Compose File    Environment Variables    Start the PostgreSQL Container    Connect with PostgreSQL    Summary    On this page   Overview    Prerequisites    Installing Docker    Create Storage Directory    Docker Compose File    Environment Variables    Start the PostgreSQL Container    Connect with PostgreSQL    Summary           Setting Up PostgreSQL with Docker      PostgreSQL is a powerful, open-source object-relational database system. It is a highly scalable",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "greSQL Container    Connect with PostgreSQL    Summary           Setting Up PostgreSQL with Docker      PostgreSQL is a powerful, open-source object-relational database system. It is a highly scalable, SQL-compliant database management system that is used to handle large workloads. PostgreSQL is a popular choice for many developers and organizations due to its robust features, extensibility, and reliability.\nIn this tutorial, we will walk you through the process of setting up PostgreSQL on your system. In this modern age, you can take advantage of Docker to easily set up and run PostgreSQL on your local machine. Docker is a platform that allows you to package, distribute, and run applications in containers. It provides a lightweight and efficient way to run applications in isolated environments. Docker is available for Windows, macOS, and Linux, making it a versatile tool for developers.\n  Play    \nPrerequisites\nBefore you begin, you will need to have the following prerequisites:\n\nA sy",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "ments. Docker is available for Windows, macOS, and Linux, making it a versatile tool for developers.\n  Play    \nPrerequisites\nBefore you begin, you will need to have the following prerequisites:\n\nA system running Windows, macOS, or Linux\nDocker installed on your system\nBasic knowledge of using the command line\n\nInstalling Docker\nIf you don’t have Docker installed on your system, you can download and install it from the official Docker website. Follow the instructions provided on the website to install Docker on your system.\nOnce the docker is installed, you can verify the installation by running the following command in your terminal:\nTerminal windowdocker --version\nThis command will display the version of Docker installed on your system.\nCreate Storage Directory\nNow that you have Docker installed, create a new directory for your PostgreSQL data. This directory will be used to store the data files for your PostgreSQL instance. I usually keep this directory in my project folder so that",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "nstalled, create a new directory for your PostgreSQL data. This directory will be used to store the data files for your PostgreSQL instance. I usually keep this directory in my project folder so that it is easy to manage.\nDocker Compose File\nNow, create a new file named compose.yml in the same directory. This file will contain the configuration for your PostgreSQL container.\nInsert the following content into the compose.yml file:\ncompose.ymlservices:  db:    image: postgres:alpine    container_name: postgres    restart: always    environment:      POSTGRES_DB: ${DB_NAME}      POSTGRES_USER: ${DB_USER}      POSTGRES_PASSWORD: ${DB_PASSWORD}    ports:      - ${DB_PORT}:5432  # make sure you don't have another container running on DB_PORT    healthcheck:      test: [\"CMD-SHELL\", \"pg_isready -d $${DB_NAME} -U $${DB_USER}\"]      interval: 10s      timeout: 30s      retries: 5    volumes:      - ./data/db:/var/lib/postgresql/data    attach: false\n  adminer:    image: adminer    restart: alwa",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "d $${DB_NAME} -U $${DB_USER}\"]      interval: 10s      timeout: 30s      retries: 5    volumes:      - ./data/db:/var/lib/postgresql/data    attach: false\n  adminer:    image: adminer    restart: always    ports:      - 8080:8080\nIn this configuration file, we define two services: db and adminer. The db service is responsible for running the PostgreSQL instance, while the adminer service is responsible for running the Adminer web interface. It is a lightweight database management tool that allows you to interact with your databases through a web interface.\nThe db service uses the postgres image from the Docker Hub registry. We specify the volume mapping to store the data files in the ./data/db directory. The ports section maps the container port 5432 to the host port 5432, allowing you to access the PostgreSQL instance from your local machine.\nWe also set the environment variables POSTGRES_DB, POSTGRES_USER, and POSTGRES_PASSWORD to configure the database name, username, and password,",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "access the PostgreSQL instance from your local machine.\nWe also set the environment variables POSTGRES_DB, POSTGRES_USER, and POSTGRES_PASSWORD to configure the database name, username, and password, respectively.\nThe adminer service uses the adminer image from the Docker Hub registry. We map the container port 8080 to the host port 8080 to access the Adminer web interface.\nEnvironment Variables\nTo configure the database name, username, and password, you can create a .env file in the same directory as the compose.yml file. Add the following content to the .env file:\n.envDB_NAME=chai-dbDB_USER=chaicodeDB_PASSWORD=chaiaurcodeDB_PORT=5432\nReplace the values of DB_NAME, DB_USER, and DB_PASSWORD with your desired database name, username, and password, respectively.\nStart the PostgreSQL Container\nNow that you have created the compose.yml file, you can start the PostgreSQL container by running the following command in the terminal:\nTerminal windowdocker compose up -d\nThis command will downloa",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "r\nNow that you have created the compose.yml file, you can start the PostgreSQL container by running the following command in the terminal:\nTerminal windowdocker compose up -d\nThis command will download the necessary images and start the PostgreSQL and Adminer containers in the background. You can verify that the containers are running by executing the following command:\nTerminal windowdocker ps\nThis command will display a list of running containers on your system. You should see the db and adminer containers listed in the output.\nYou can now access the Adminer web interface by opening a web browser and navigating to http://localhost:8080. In the login page, enter the database name, username, and password that you specified in the compose.yml file. You should now be able to interact with your PostgreSQL database through the Adminer web interface.\nConnect with PostgreSQL\nIf you want to connect with database url, you can use the following url:\npostgresql://chaicode:chaiaurcode@localhost:5",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "ur PostgreSQL database through the Adminer web interface.\nConnect with PostgreSQL\nIf you want to connect with database url, you can use the following url:\npostgresql://chaicode:chaiaurcode@localhost:5432/chai-db\nThat’s it! You have successfully set up PostgreSQL using Docker on your system. You can now start developing applications that use PostgreSQL as the backend database.\nSummary\nIn this tutorial, we have learned how to set up PostgreSQL using Docker on your system. We have also learned how to connect with the database using the Adminer web interface.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025   PreviousDeploy Node APINext PostgreSQL on VPS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "Community\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/"
  },
  {
    "content": "Welcome | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/welcome/"
  },
  {
    "content": "elcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           Welcome      Haanji! Swagat hai Chai aur Docs mein. 🎉\nThis guide has been carefully curated as a comprehensive reference for the “Chai aur Django” series on the Chai aur Code YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\n  Play    \nLet’s begin with the basics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 18, 2025   Prev",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/welcome/"
  },
  {
    "content": "the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 18, 2025   PreviousFunctionsNext Django Intro    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/welcome/"
  },
  {
    "content": "Django Models | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configura",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Defining a Model    Adding Data to DB    Create a View    Get Data in Template    Add Description    Add a Details View    Configure urls.py    Create chai_detail.html Template    Summary    On this page   Overview    Defining a Model    Adding Data to DB    Create a View    Get Data in Template    Add Description    Add a Details View    Configure urls.py    Create chai_detail.html Template    Summary           Django Models      Django models are the heart of the Django framework. They are used to define the structure of the database and the relationshi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "Create chai_detail.html Template    Summary           Django Models      Django models are the heart of the Django framework. They are used to define the structure of the database and the relationships between different models. In this section, we will explore the basics of Django models and how to create them.\nDefining a Model\nSo far, we have created a same chai app and it’s time to add some data to it. To do this, we need to define a model. A model is a Python class that represents a table in the database. It contains fields that define the structure of the table and methods that define the behavior of the table.\nTo define a model, we need to use the models.py file in our Django project. Add the following code to the models.py file:\nmodels.pyfrom django.db import modelsfrom django.utils import timezone\n# Create your models here.class ChaiVariety(models.Model):  CHAI_TYPE_CHOICES = [    ('ML', 'MASALA'),    ('GR', 'GINGER'),    ('KL', 'KIWI'),    ('PL', 'PLAIN'),    ('EL', 'ELAICHI')",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "import timezone\n# Create your models here.class ChaiVariety(models.Model):  CHAI_TYPE_CHOICES = [    ('ML', 'MASALA'),    ('GR', 'GINGER'),    ('KL', 'KIWI'),    ('PL', 'PLAIN'),    ('EL', 'ELAICHI'),  ]\n  name = models.CharField(max_length=100)  image = models.ImageField(upload_to='chais/')  date_added = models.DateTimeField(default=timezone.now)  type = models.CharField(max_length=2, choices=CHAI_TYPE_CHOICES, default='ML')\n  def __str__(self):    return self.name\nIn this code, we have defined a ChaiVariety model with the following fields:\n\nname: A CharField that stores the name of the chai variety.\nimage: An ImageField that stores the image of the chai variety.\ndate_added: A DateTimeField that stores the date and time when the chai variety was added.\ntype: A CharField that stores the type of the chai variety (e.g., ‘ML’, ‘GR’, ‘KL’, ‘PL’, ‘EL’).\ndescription: A TextField that stores the description of the chai variety.\n\nThe __str__ method is used to return a string representation of",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "ype of the chai variety (e.g., ‘ML’, ‘GR’, ‘KL’, ‘PL’, ‘EL’).\ndescription: A TextField that stores the description of the chai variety.\n\nThe __str__ method is used to return a string representation of the object. In this case, it returns the name of the chai variety.\nSince we are using image field, we need to install Pillow library to use it.\nTerminal windowpython -m pip install Pillow\nThen we need add some settings to our settings.py file to use the image field.\nsettings.pyMEDIA_URL = '/media/'MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nNow, let’s configure our projects urls.py file to reflect media files.\nurls.pyfrom django.conf import settingsfrom django.conf.urls.static import static\nurlpatterns = [    path('admin/', admin.site.urls),    #...    #...] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\nAdding Data to DB\nNow that we have defined our model, we can add some data to the database. Lets migrate the database and add some data to the ChaiVariety model.\nTermina",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "ment_root=settings.MEDIA_ROOT)\nAdding Data to DB\nNow that we have defined our model, we can add some data to the database. Lets migrate the database and add some data to the ChaiVariety model.\nTerminal windowpython manage.py makemigrations chaipython manage.py migrate\nNow, let’s add some data to the database. You can go to admin.py file and add the following code to the ChaiVariety model.\nadmin.pyfrom django.contrib import adminfrom .models import ChaiVariety\nadmin.site.register(ChaiVariety)\nNow, go to the admin page and you should see the ChaiVariety model listed. Add some data to the model and save it.\nCreate a View\nNow that we have added some data to the database, we can create a view to display the data. Go to the views.py file and add the following code.\ndef all_chai(request):  chais = ChaiVariety.objects.all()  return render(request, 'chai/all_chai.html', {'chais': chais})\nGet Data in Template\nIn the all_chai.html template, we can use the chais variable to display the data. Add t",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "= ChaiVariety.objects.all()  return render(request, 'chai/all_chai.html', {'chais': chais})\nGet Data in Template\nIn the all_chai.html template, we can use the chais variable to display the data. Add the following code to the all_chai.html template.\n{% for chai in chais %}    {{ chai.name }} {{ chai.description }} {% endfor %}\nAdd Description\nWe can add a description to the ChaiVariety model by adding a description field to the model. Add the following code to the models.py file.\nmodels.pyclass ChaiVariety(models.Model):  CHAI_TYPE_CHOICES = [    ('ML', 'MASALA'),    ('GR', 'GINGER'),    ('KL', 'KIWI'),    ('PL', 'PLAIN'),    ('EL', 'ELAICHI'),  ]\n  name = models.CharField(max_length=100)  image = models.ImageField(upload_to='chais/')  date_added = models.DateTimeField(default=timezone.now)  type = models.CharField(max_length=2, choices=CHAI_TYPE_CHOICES, default='ML')  description = models.TextField(default='')\n  def __str__(self):    return self.name\nAdd a Details View\nNow that we hav",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "type = models.CharField(max_length=2, choices=CHAI_TYPE_CHOICES, default='ML')  description = models.TextField(default='')\n  def __str__(self):    return self.name\nAdd a Details View\nNow that we have added a description to the ChaiVariety model, we can create a view to display the details of a specific chai variety. Go to the views.py file and add the following code.\nviews.pyfrom django.shortcuts import render, get_object_or_404\ndef chai_detail(request, chai_id):  chai = get_object_or_404(ChaiVariety, pk=chai_id)  return render(request, 'chai/chai_detail.html', {'chai': chai})\nIn the all_chai.html template, we can use the url to display the details of a specific chai variety.\nall_chai.html{% for chai in chais %}    {{ chai.name }} {{ chai.description }} Details \n{% endfor %}\nConfigure urls.py\nNow that we have created a view to display the details of a specific chai variety, we need to configure the urls.py file to reflect this. Go to the urls.py file and add the following code.\nurls.",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "ls.py\nNow that we have created a view to display the details of a specific chai variety, we need to configure the urls.py file to reflect this. Go to the urls.py file and add the following code.\nurls.pyfrom django.urls import pathfrom . import views\nurlpatterns = [  path('', views.all_chai, name='all_chai'),  path('/', views.chai_detail, name='chai_detail'),]\nCreate chai_detail.html Template\nNow that we have created a view to display the details of a specific chai variety, we need to create a template to display the details. Go to the chai folder and create a new file called chai_detail.html. Add the following code to the chai_detail.html template.\nchai_detail.html{{ chai.name }}{{ chai.description }}\nSummary\nIn this section, we have learned how to create a model, add data to the database, create a view to display the data, and create a view to display the details of a specific chai variety. We have also learned how to configure the urls.py file to reflect the views and how to create a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "create a view to display the data, and create a view to display the details of a specific chai variety. We have also learned how to configure the urls.py file to reflect the views and how to create a template to display the details.\nWith these concepts, we can create a complete web application that allows users to add and view chai varieties.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 18, 2025   PreviousTailwind IntegrationNext Relationships & Forms    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/models/"
  },
  {
    "content": "Operators | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Types of Operators    Arithmetic Operators     Task    Solution    Going through the code:      Assignment Operators     Task    Solution    Going through the code:      Relational Operators     Task    Solution    Going through the code      Logical Operators     Task    Solution    Going through the code      Bitwise Operators    Summary    On this page   Overview    Types of Operators    Arithmetic Operators     Task    Solution    Going through the code:      Assignment Operators     Task    Solution    Going through the code:      Relational Operators",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "iew    Types of Operators    Arithmetic Operators     Task    Solution    Going through the code:      Assignment Operators     Task    Solution    Going through the code:      Relational Operators     Task    Solution    Going through the code      Logical Operators     Task    Solution    Going through the code      Bitwise Operators    Summary           Operators      In this chapter, we will learn about operators in C++. We will start by learning about the different types of operators in C++ and how to use them. Operators are used to perform operations on variables and values.\nTypes of Operators\nC++ provides several types of operators that are used to perform operations on variables and values. Some of the types of operators in C++ include:\n\nArithmetic Operators: These are operators that are used to perform arithmetic operations on variables and values.\nAssignment Operators: These are operators that are used to assign values to variables.\nComparison Operators: These are operators t",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "at are used to perform arithmetic operations on variables and values.\nAssignment Operators: These are operators that are used to assign values to variables.\nComparison Operators: These are operators that are used to compare values and determine if they are equal or not.\nLogical Operators: These are operators that are used to perform logical operations on variables and values.\nIncrement and Decrement Operators: These are operators that are used to increment or decrement the value of a variable.\nBitwise Operators: These are operators that are used to perform bitwise operations on variables and values.\n\n\n   Task Time   To learn these operators, we will use tasks based approach. Each task will help you to understand the requirements and then you will be able to implement the code.  \nArithmetic Operators\nArithmetic operators are used to perform arithmetic operations on variables and values.\nTask\nCreate a program that calculates the total price of tea cups. The user inputs the number of cups",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "Operators\nArithmetic operators are used to perform arithmetic operations on variables and values.\nTask\nCreate a program that calculates the total price of tea cups. The user inputs the number of cups they want and the price per cup. The program should calculate the total price, apply a 5% discount if the total is above a certain amount, and show the final price.\nSolution\narithmetic-operators.cpp#include using namespace std;\nint main(){  int cups;  double pricePerCup, totalPrice, discountedPrice;\n  cout << \"Enter the number of tea cups: \";  cin >> cups;  cout << \"Enter the price per cups: \";  cin >> pricePerCup;\n  totalPrice = cups * pricePerCup;\n  // apply 5% discount if total price is above 100  if (totalPrice > 100) {    discountedPrice = totalPrice - (totalPrice * 0.05);    cout << \"Discounted price is: \" << discountedPrice << endl;  } else {    cout << \"Total price is \" << totalPrice << endl;  }\n  return 0;}\nGoing through the code:\n\nThe int cups; line declares a variable named cup",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "scounted price is: \" << discountedPrice << endl;  } else {    cout << \"Total price is \" << totalPrice << endl;  }\n  return 0;}\nGoing through the code:\n\nThe int cups; line declares a variable named cups of type int and does not assign a value to it.\nThe double pricePerCup, totalPrice, discountedPrice; line declares three variables named pricePerCup, totalPrice, and discountedPrice of type double and does not assign a value to them.\nThe cout << \"Enter the number of tea cups: \"; line prints the string “Enter the number of tea cups: ” to the console.\nThe cin >> cups; line reads an integer from the console and assigns it to the cups variable.\nThe cout << \"Enter the price per cups: \"; line prints the string “Enter the price per cups: ” to the console.\nThe cin >> pricePerCup; line reads a double from the console and assigns it to the pricePerCup variable.\nThe totalPrice = cups * pricePerCup; line calculates the total price by multiplying the cups and pricePerCup variables.\nThe if (totalPrice",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "from the console and assigns it to the pricePerCup variable.\nThe totalPrice = cups * pricePerCup; line calculates the total price by multiplying the cups and pricePerCup variables.\nThe if (totalPrice > 100) { line starts an if statement that checks if the totalPrice variable is greater than 100.\nThe discountedPrice = totalPrice - (totalPrice * 0.05); line calculates the discounted price by subtracting the totalPrice multiplied by 0.05 from the totalPrice variable.\nThe cout << \"Discounted price is: \" << discountedPrice << endl; line prints the string “Discounted price is: ” followed by the value of the discountedPrice variable to the console.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe cout << \"Total price is \" << totalPrice << endl; line prints the string “Total price is ” followed by the value of the totalPrice variable to the console.\nThe } line ends the if statement.\n\nAssignment Operators\nAssignment operators are used to assign values to",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "the string “Total price is ” followed by the value of the totalPrice variable to the console.\nThe } line ends the if statement.\n\nAssignment Operators\nAssignment operators are used to assign values to variables.\nTask\nWrite a program that allows a user to input the number of tea bags they have. Assign additional bags to them based on certain conditions (e.g., if they have fewer than 10 bags, give them 5 extra). Update the original number using assignment operators.\nSolution\nassignment-operators.cpp#include using namespace std;\nint main(){  int teaBags;\n  cout << \"Enter the number of tea bags you have: \";  cin >> teaBags;\n  if (teaBags < 10) {    // teaBags = teaBags + 5    teaBags += 5;  }  cout << \"Your total bags are: \" << teaBags;\n  return 0;}\nGoing through the code:\n\nThe int teaBags; line declares a variable named teaBags of type int and does not assign a value to it.\nThe cout << \"Enter the number of tea bags you have: \"; line prints the string “Enter the number of tea bags you have",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "ne declares a variable named teaBags of type int and does not assign a value to it.\nThe cout << \"Enter the number of tea bags you have: \"; line prints the string “Enter the number of tea bags you have: ” to the console.\nThe cin >> teaBags; line reads an integer from the console and assigns it to the teaBags variable.\nThe if (teaBags < 10) { line starts an if statement that checks if the teaBags variable is less than 10.\nThe // teaBags = teaBags + 5 line adds 5 to the teaBags variable.\nThe teaBags += 5; line adds 5 to the teaBags variable.\nThe }  line ends the if statement.\nThe cout << \"Your total bags are: \" << teaBags; line prints the string “Your total bags are: ” followed by the value of the teaBags variable to the console.\n\nRelational Operators\nRelational operators are used to compare values and determine if they are equal or not.\nTask\nA tea shop offers a loyalty program. Customers who buy more than 20 cups of tea get a special “Gold” badge, and those who buy 10 to 20 cups get a “S",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "values and determine if they are equal or not.\nTask\nA tea shop offers a loyalty program. Customers who buy more than 20 cups of tea get a special “Gold” badge, and those who buy 10 to 20 cups get a “Silver” badge. Write a program to display the badge they will receive based on the number of cups they buy.\nSolution\nrelational-operators.cpp#include using namespace std;\nint main(){  int cups;\n  cout << \"Enter the number of cups you have\";  cin >> cups;\n  if (cups > 20) {    cout << \"You will get a GOLD badge\" << endl;  } else if (cups >= 10 && cups <= 20) {    cout << \"You will get a SILVER badge\" << endl;  } else {    cout << \"NO BADGE for you\" << endl;  }\n  return 0;}\nGoing through the code\n\nThe int cups; line declares a variable named cups of type int and does not assign a value to it.\nThe cout << \"Enter the number of cups you have\"; line prints the string “Enter the number of cups you have” to the console.\nThe cin >> cups; line reads an integer from the console and assigns it to the c",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "cout << \"Enter the number of cups you have\"; line prints the string “Enter the number of cups you have” to the console.\nThe cin >> cups; line reads an integer from the console and assigns it to the cups variable.\nThe if (cups > 20) { line starts an if statement that checks if the cups variable is greater than 20.\nThe cout << \"You will get a GOLD badge\" << endl; line prints the string “You will get a GOLD badge” followed by a newline character to the console.\nThe } else if (cups >= 10 && cups <= 20) { line starts an else if block that is executed if the if statement is false.\nThe cout << \"You will get a SILVER badge\" << endl; line prints the string “You will get a SILVER badge” followed by a newline character to the console.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe cout << \"NO BADGE for you\" << endl; line prints the string “NO BADGE for you” followed by a newline character to the console.\nThe } line ends the if statement.\n\nLogical Operat",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "statement is false.\nThe cout << \"NO BADGE for you\" << endl; line prints the string “NO BADGE for you” followed by a newline character to the console.\nThe } line ends the if statement.\n\nLogical Operators\nLogical operators are used to perform logical operations on variables and values.\nTask\nCreate a program that checks if a user is eligible for a tea subscription discount. The discount applies if the user is either a student or has purchased more than 15 cups. Ask the user to input their status (student or not) and their cup count.\nSolution\nlogical-operators.cpp#include using namespace std;\nint main(){  bool isStudent;  int cups;\n  cout << \"Are you a student (1 for yes and 0 for No) ?\";  cin >> isStudent;  cout << \"How many cups of tea have you purchased ?\";  cin >> cups;\n  if (isStudent || cups > 15) {    cout << \"You are elegible for a discount \" << endl;  } else {    cout << \"You are NOT elegible for a discount \" << endl;  }\n  return 0;}\nGoing through the code\n\nThe bool isStudent; li",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "cups > 15) {    cout << \"You are elegible for a discount \" << endl;  } else {    cout << \"You are NOT elegible for a discount \" << endl;  }\n  return 0;}\nGoing through the code\n\nThe bool isStudent; line declares a variable named isStudent of type bool and does not assign a value to it.\nThe int cups; line declares a variable named cups of type int and does not assign a value to it.\nThe cout << \"Are you a student (1 for yes and 0 for No) ?\"; line prints the string “Are you a student (1 for yes and 0 for No) ?” to the console.\nThe cin >> isStudent; line reads a boolean value from the console and assigns it to the isStudent variable.\nThe cout << \"How many cups of tea have you purchased ?\"; line prints the string “How many cups of tea have you purchased ?” to the console.\nThe cin >> cups; line reads an integer from the console and assigns it to the cups variable.\nThe if (isStudent || cups > 15) { line starts an if statement that checks if the isStudent variable is true or if the cups variab",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "reads an integer from the console and assigns it to the cups variable.\nThe if (isStudent || cups > 15) { line starts an if statement that checks if the isStudent variable is true or if the cups variable is greater than 15.\nThe cout << \"You are elegible for a discount \" << endl; line prints the string “You are elegible for a discount ” followed by a newline character to the console.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe cout << \"You are NOT elegible for a discount \" << endl; line prints the string “You are NOT elegible for a discount ” followed by a newline character to the console.\nThe } line ends the if statement.\n\nBitwise Operators\nBitwise operators are used to perform bitwise operations on variables and values. Bitwise operations are used to manipulate individual bits of a binary number. Decimal numbers are represented using binary numbers, which are made up of 1s and 0s. Bitwise operators are used to perform operations on these bi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "sed to manipulate individual bits of a binary number. Decimal numbers are represented using binary numbers, which are made up of 1s and 0s. Bitwise operators are used to perform operations on these binary numbers.\nYou can learn more about bitwise operators by visiting Bitwisecmd.com.\nWe talked about it in the video, watch it for more information.\nSummary\nIn this chapter, we have learned about operators in C++. We have also learned about the different types of operators and how to use them. By the end of this chapter, you should have a good understanding of how to use operators in C++.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousData TypesNext Control Flow    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "Flow    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/operators/"
  },
  {
    "content": "Tailwind with Django | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Co",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": "r SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Hot Reloading    Enable the admin panel in Django    Conclusion    On this page   Overview    Hot Reloading    Enable the admin panel in Django    Conclusion           Tailwind with Django      Tailwind CSS is a CSS framework that allows you to build custom styles for your web pages. It provides a set of pre-built classes that you can use to style your HTML elements.\nBefore we run the next command we need pip to be installed in your system. So far, we have been using uv to install packages, which is new and not yet supported by many packages.\nTermi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": "HTML elements.\nBefore we run the next command we need pip to be installed in your system. So far, we have been using uv to install packages, which is new and not yet supported by many packages.\nTerminal windowpython -m ensurepip --upgrade\n# alternativelypython -m pip install --upgrade pip\nTo install Tailwind CSS in your Django project, you can use the following steps:\nTerminal windowpip install django-tailwindpip install 'django-tailwind[reload]'\nThis will install the django-tailwind package and the django-tailwind[reload] package, which includes the tailwind-django command-line tool.\nOnce you have installed Tailwind CSS, you can use the tailwind-django command to generate the necessary files for your project. This command will create a tailwind.config.js file in your project directory, as well as a static/css/tailwind.css file that contains the compiled Tailwind CSS.\nNow, add tailwind to your INSTALLED_APPS in your settings.py file:\nsettings.pyINSTALLED_APPS = [  # ...  'tailwind',",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": "s well as a static/css/tailwind.css file that contains the compiled Tailwind CSS.\nNow, add tailwind to your INSTALLED_APPS in your settings.py file:\nsettings.pyINSTALLED_APPS = [  # ...  'tailwind',  # ...]\nNext, run the tailwind-django command to generate the necessary files for your project:\nTerminal windowpython manage.py tailwind init\nAdd the newly create theme to your INSTALLED_APPS in your settings.py file:\nsettings.pyINSTALLED_APPS = [  # ...  'theme',  # ...]TAILWIND_APP_NAME = 'theme' # This is the name of the app that will be used to generate the tailwind filesINTERNAL_IPS = ['127.0.0.1']\nNow run the following command to generate the necessary files for your project:\nTerminal windowpython manage.py tailwind install\nYou can now use the Tailwind CSS classes in your Django templates. All though, tailwind provides you a base template that you can use to start your project but you can now use tailwind in any base template you want.\n{% load static tailwind_tags %}...  ...  {% tailw",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": ". All though, tailwind provides you a base template that you can use to start your project but you can now use tailwind in any base template you want.\n{% load static tailwind_tags %}...  ...  {% tailwind_css %}  ...\n\n☕️ I was not able to get tailwind intellisense to work in my IDE, so I had to create a tailwind.config.js file manually. This file is totally empty but works\n\nFinally, suggestions are there but you are not getting the desired result. That’s because this app needs nodejs to be installed in your system. And you need to provide the path to the nodejs executable in your settings.py file:\nYou can use command which node to find the path to the nodejs executable.\n       MacOS     Windows      NPM_BIN_PATH='/user/local/bin/npm'  NPM_BIN_PATH = r\"C:\\Program Files\\nodejs\\npm.cmd\"    \nNow everything is ready and we need 2 terminals to run the app.\nFirst terminal:\nTerminal windowpython manage.py runserver\nSecond terminal:\nTerminal windowpython manage.py tailwind start\n\nfor production",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": "w everything is ready and we need 2 terminals to run the app.\nFirst terminal:\nTerminal windowpython manage.py runserver\nSecond terminal:\nTerminal windowpython manage.py tailwind start\n\nfor production change this command to python manage.py tailwind build\n\nHot Reloading\nSince we have already installed the django-tailwind[reload] package, we can use the tailwind-django command to enable hot reloading in our project.\nAdd it to your INSTALLED_APPS in your settings.py file:\nsettings.pyINSTALLED_APPS = [  # ...  'django_browser_reload',  #...]\nAdd following code to your settings.py file:\nsettings.pyMIDDLEWARE = [  # ...  \"django_browser_reload.middleware.BrowserReloadMiddleware\",  # ...]\nAdd following code to your urls.py file:\nurls.pyfrom django.urls import include, path\nurlpatterns = [  ...,  path(\"__reload__/\", include(\"django_browser_reload.urls\")),]\nEnable the admin panel in Django\nNow that we have Tailwind CSS installed and configured, we can enable the admin panel in our Django projec",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": "path(\"__reload__/\", include(\"django_browser_reload.urls\")),]\nEnable the admin panel in Django\nNow that we have Tailwind CSS installed and configured, we can enable the admin panel in our Django project. All settings and urls for the admin panel are already provided in django.\nFirst run the migrate command to create the necessary tables for the admin panel:\nTerminal windowpython manage.py migrate\nNext is to create the admin user:\nTerminal windowpython manage.py createsuperuser\nAdd your username, email (this can be empty), and password to the createsuperuser command.\nNow you can acces the admin panel by going to localhost:8000/admin in your browser. Enter your username and password to log in.\nTake a tour of the admin panel and in case you are wondering, yes, we can change the look and feel of the admin panel using so many plugins and themes that are available in the market but that is out of the scope of this tutorial.\nConclusion\nIn this tutorial, we have learned how to install and confi",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": "f the admin panel using so many plugins and themes that are available in the market but that is out of the scope of this tutorial.\nConclusion\nIn this tutorial, we have learned how to install and configure Tailwind CSS in a Django project. We have also learned how to use the admin panel in Django and how to enable hot reloading in our project. With these skills, you can now start building your own Django projects with Tailwind CSS and other plugins and themes that you need.\nNow, go and subscribe to Chai aur Code to get notified about new tutorials and updates on my channel.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 18, 2025   PreviousJinja Templates AppNext Models    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": "Contribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/"
  },
  {
    "content": "PostgreSQL | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuratio",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/postgres/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Installing PostgreSQL    Setting up a PostgreSQL    pgAdmin as GUI    Summary    On this page   Overview    Installing PostgreSQL    Setting up a PostgreSQL    pgAdmin as GUI    Summary           PostgreSQL      PostgreSQL is a powerful, open-source relational database management system (RDBMS) that is widely used for storing and managing large amounts of structured data. It is known for its robustness, scalability, and support for complex queries and transactions.\nInstalling PostgreSQL\nTo install PostgreSQL, on:\n\nWindows: Download the PostgreSQL installer f",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/postgres/"
  },
  {
    "content": "ured data. It is known for its robustness, scalability, and support for complex queries and transactions.\nInstalling PostgreSQL\nTo install PostgreSQL, on:\n\nWindows: Download the PostgreSQL installer from the official site.\nMac:\nTerminal window# Use Homebrewbrew install postgresql\n\nLinux:\nTerminal window# Use the official PostgreSQL installer.sudo apt install postgresql\n\nDocker: Use the official PostgreSQL Docker image.\n\nSetting up a PostgreSQL\nTo set up a PostgreSQL database, follow these steps:\n\n\nStart the PostgreSQL Service\nStart the PostgreSQL service to ensure it’s running on your system:\nTerminal windowsudo service postgresql start\n\n\nCreate a Database\ncreate a new database for your chai and city date:\nTerminal windowcreatedb chai_and_city\nthis creates a new database called chai_and_city in postgresql.\n\n\nConnecting to the Database\nConnecting to your newly created database using PostgreSQL command line interface:\nTerminal windowpsql -d chai_and_city\nthis will prompt you to enter you",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/postgres/"
  },
  {
    "content": "ty in postgresql.\n\n\nConnecting to the Database\nConnecting to your newly created database using PostgreSQL command line interface:\nTerminal windowpsql -d chai_and_city\nthis will prompt you to enter your password. Enter your password.\nHere -d is a flag that specifies the database you want to connect to.\n\n\npgAdmin as GUI\npgAdmin is a graphical interface for managing PostgreSQL databases. Follow these steps to connect and manage your database using pgAdmin:\n\nDownload and Install pgAdmin:\nGo to the official pgAdmin website and install it for your operating system.\nConnect to your local PostgreSQL Server:\nOpen pgAdmin and create a new server connection.\nFor the host name, use localhost and enter your PostgreSQL username and password.\nCreate a Database:\nRight-click on your server in pgAdmin, select “Create,” and choose “Database.”\nName the database chai_and_cities.\nManage Data Visually:\nYou can now use pgAdmin’s graphical interface to create tables, insert data, and run queries\n\nSummary\nIn th",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/postgres/"
  },
  {
    "content": "ct “Create,” and choose “Database.”\nName the database chai_and_cities.\nManage Data Visually:\nYou can now use pgAdmin’s graphical interface to create tables, insert data, and run queries\n\nSummary\nIn this chapter, we learned how to install PostgreSQL and set up a database. We also learned how to connect to the database using PostgreSQL command line interface and pgAdmin.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 19, 2025   PreviousSQL IntroNext Database Design    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/postgres/"
  },
  {
    "content": "Terminology | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configurati",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Check your git version    Repository    Your config settings    Creating a repository    Commit    Complete git flow    Stage    Commit    Logs    change default code editor    gitignore    Conclusion    On this page   Overview    Check your git version    Repository    Your config settings    Creating a repository    Commit    Complete git flow    Stage    Commit    Logs    change default code editor    gitignore    Conclusion           Terminology      Git and people who use it talk in a different terminology. For example they don’t call it a folder, they",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "mit    Logs    change default code editor    gitignore    Conclusion           Terminology      Git and people who use it talk in a different terminology. For example they don’t call it a folder, they call it a repository. They don’t call it alternative timeline, they call it branch. Although, I agree that alternative timeline is a better name for it. 😁\nCheck your git version\nTo check your git version, you can run the following command:\nTerminal windowgit --version\nThis command will display the version of git installed on your system. Git is a very stable software and don’t get any breaking changes in majority of the cases, at least in my experience.\nRepository\nA repository is a collection of files and directories that are stored together. It is a way to store and manage your code. A repository is like a folder on your computer, but it is more than just a folder. It can contain other files, folders, and even other repositories. You can think of a repository as a container that holds al",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "itory is like a folder on your computer, but it is more than just a folder. It can contain other files, folders, and even other repositories. You can think of a repository as a container that holds all your code.\nThere is a difference between a software on your system vs tracking a particular folder on your system. At any point you can run the following command to see the current state of your repository:\nTerminal windowgit status\n\nNot all folders are meant to be tracked by git. Here we can see that all green folders are projects are getting tracked by git but red ones are not.\nYour config settings\nGithub has a lot of settings that you can change. You can change your username, email, and other settings. Whenever you checkpoint your changes, git will add some information about your such as your username and email to the commit. There is a git config file that stores all the settings that you have changed. You can make settings like what editor you would like to use etc. There are some g",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "your username and email to the commit. There is a git config file that stores all the settings that you have changed. You can make settings like what editor you would like to use etc. There are some global settings and some repository specific settings.\nLet’s setup your email and username in this config file. I would recommend you to create an account on github and then use the email and username that you have created.\nTerminal windowgit config --global user.email \"[email protected]\"git config --global user.name \"Your Name\"\nNow you can check your config settings:\nTerminal windowgit config --list\nThis will show you all the settings that you have changed.\nCreating a repository\nCreating a repository is a process of creating a new folder on your system and initializing it as a git repository. It’s just regular folder to code your project, you are just asking git to track it. To create a repository, you can use the following command:\nTerminal windowgit statusgit init\ngit status command will",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "It’s just regular folder to code your project, you are just asking git to track it. To create a repository, you can use the following command:\nTerminal windowgit statusgit init\ngit status command will show you the current state of your repository. git init command will create a new folder on your system and initialize it as a git repository. This adds a hidden .git folder to your project.\nCommit\ncommit is a way to save your changes to your repository. It is a way to record your changes and make them permanent. You can think of a commit as a snapshot of your code at a particular point in time. When you commit your changes, you are telling git to save them in a permanent way. This way, you can always go back to that point in time and see what you changed.\nUsual flow looks like this:\n\nComplete git flow\nA complete git flow, along with pushing the code to github looks like this:\n\nWhen you want to track a new folder, you first use init command to create a new repository. Then you can use add",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "e git flow\nA complete git flow, along with pushing the code to github looks like this:\n\nWhen you want to track a new folder, you first use init command to create a new repository. Then you can use add command to add the folder to the repository. After that you can use commit command to save the changes. Finally you can use push command to push the changes to github. Of course there is more to it but this is the basic flow.\nStage\nStage is a way to tell git to track a particular file or folder. You can use the following command to stage a file:\nTerminal windowgit initgit add  git status\nHere we are initializing the repository and adding a file to the repository. Then we can see that the file is now being tracked by git. Currently our files are in staging area, this means that we have not yet committed the changes but are ready to be committed.\nCommit\nTerminal windowgit commit -m \"commit message\"git status\nHere we are committing the changes to the repository. We can see that the changes a",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "committed the changes but are ready to be committed.\nCommit\nTerminal windowgit commit -m \"commit message\"git status\nHere we are committing the changes to the repository. We can see that the changes are now committed to the repository. The -m flag is used to add a message to the commit. This message is a short description of the changes that were made. You can use this message to remember what the changes were.\nMissing the -m flag will result in an action that opens your default settings editor, which is usually VIM. We will change this to vscode in the next section.\nLogs\nTerminal windowgit log\nThis command will show you the history of your repository. It will show you all the commits that were made to the repository. You can use the --oneline flag to show only the commit message. This will make the output more compact and easier to read.\n☕️ - Check git log docs\n\nAtomic commits are a way to make sure that each commit is a self-contained unit of work. This means that if one commit fails",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "l make the output more compact and easier to read.\n☕️ - Check git log docs\n\nAtomic commits are a way to make sure that each commit is a self-contained unit of work. This means that if one commit fails, you can always go back to a previous commit and fix the issue. This is important for maintaining a clean and organized history in your repository.\n\nchange default code editor\nYou can change the default code editor in your system to vscode. To do this, you can use the following command:\nTerminal windowgit config --global core.editor \"code --wait\"\ngitignore\nGitignore is a file that tells git which files and folders to ignore. It is a way to prevent git from tracking certain files or folders. You can create a gitignore file and add list of files and folders to ignore by using the following command:\nExample:\n.gitignorenode_modules.env.vscode\nNow, when you run the git status command, it will not show the node_modules and .vscode folders as being tracked by git.\nConclusion\nIn this section, we",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "and:\nExample:\n.gitignorenode_modules.env.vscode\nNow, when you run the git status command, it will not show the node_modules and .vscode folders as being tracked by git.\nConclusion\nIn this section, we have learned about the basics of git and how to use it to track changes to your files and folders. We have also learned about the different commands that you can use to interact with your repository, such as init, add, commit, log, etc By the end of this section, you should have a good understanding of how to use git and how to use it effectively to manage your code.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousGit and GitHubNext Behind the scenes    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "tribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-git/terminology/"
  },
  {
    "content": "Welcome | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/welcome/"
  },
  {
    "content": "elcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           Welcome      Haanji! Swagat hai Chai aur Docs mein. 🎉\nThis guide has been carefully curated as a comprehensive reference for the “Deploy To Production” series on the Hitesh Choudhary YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\n  Play    \nLet’s begin with the basics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 20, 202",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/welcome/"
  },
  {
    "content": "sics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025   PreviousExercise - JoinsNext Server Startup    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-devops/welcome/"
  },
  {
    "content": "Control Flow | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configurat",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    If Statement     Task    Solution    Going through the code      If-Else Statement     Task    Solution    Going through the code      Nested If-Else     Challenge    Solution    Going through the code      Switch Case     Task    Solution    Going through the code      Summary    On this page   Overview    If Statement     Task    Solution    Going through the code      If-Else Statement     Task    Solution    Going through the code      Nested If-Else     Challenge    Solution    Going through the code      Switch Case     Task    Solution    Going thro",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "e code      If-Else Statement     Task    Solution    Going through the code      Nested If-Else     Challenge    Solution    Going through the code      Switch Case     Task    Solution    Going through the code      Summary           Control Flow      In this chapter, we will learn about control flow in C++. We will start by learning about conditional statements and how to use them.\nHere we are using task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\nIf Statement\nIf statement is used to check if a condition is true or false. If the condition is true, then the code inside the if statement is executed. If the condition is false, then the code inside the if statement is not executed.\nTask\nWrite a program that checks if the user wants to order Green Tea. If the user types “Green Tea,” the program should confirm their order.\nSolution\nif.cpp#include #include using namespace std;\nint main(){  string teaOrder;\n  cout <",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "f the user wants to order Green Tea. If the user types “Green Tea,” the program should confirm their order.\nSolution\nif.cpp#include #include using namespace std;\nint main(){  string teaOrder;\n  cout << \"Enter your tea order\";  getline(cin, teaOrder);\n  if(teaOrder == \"Green Tea\"){    cout << \"You have ordered Green Tea\" << endl;  }\n  return 0;}\nGoing through the code\n\nThe string teaOrder; line declares a variable named teaOrder of type string and does not assign a value to it.\nThe cout << \"Enter your tea order\"; line prints the string “Enter your tea order” to the console.\nThe getline(cin, teaOrder); line reads a line of input from the console and assigns it to the teaOrder variable.\nThe if(teaOrder == \"Green Tea\"){ line starts an if statement that checks if the teaOrder variable is equal to the string “Green Tea”.\nThe cout << \"You have ordered Green Tea\" << endl; line prints the string “You have ordered Green Tea” followed by a newline character to the console.\nThe } line ends the if",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "to the string “Green Tea”.\nThe cout << \"You have ordered Green Tea\" << endl; line prints the string “You have ordered Green Tea” followed by a newline character to the console.\nThe } line ends the if statement.\nreturn 0; line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\nIf-Else Statement\nIf-else statement is used to check if a condition is true or false. If the condition is true, then the code inside the if statement is executed. If the condition is false, then the code inside the else statement is executed.\nTask\nWrite a program that checks if a tea shop is open. If the current hour (input by the user) is between 8 AM and 6 PM, the shop is open; otherwise, it’s closed.\nSolution\nif-else.cpp#include using namespace std;\nint main(){  int hour;\n  cout << \"Enter the current hour (0-23): \";  cin >> hour;\n  if(hour >= 8 && hour <= 18) {",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "is open; otherwise, it’s closed.\nSolution\nif-else.cpp#include using namespace std;\nint main(){  int hour;\n  cout << \"Enter the current hour (0-23): \";  cin >> hour;\n  if(hour >= 8 && hour <= 18) {    cout << \"Tea shop is OPEN!\" << endl;  } else {    cout << \"Tea shop is CLOSED!\" << endl;  }\n  return 0;}\nGoing through the code\n\nThe int hour; line declares a variable named hour of type int and does not assign a value to it.\nThe cout << \"Enter the current hour (0-23): \"; line prints the string “Enter the current hour (0-23): ” to the console.\nThe cin >> hour; line reads an integer from the console and assigns it to the hour variable.\nThe if(hour >= 8 && hour <= 18) { line starts an if statement that checks if the hour variable is greater than or equal to 8 and less than or equal to 18.\nThe cout << \"Tea shop is OPEN!\" << endl; line prints the string “Tea shop is OPEN!” followed by a newline character to the console.\nThe } else { line starts an else block that is executed if the if statemen",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "ut << \"Tea shop is OPEN!\" << endl; line prints the string “Tea shop is OPEN!” followed by a newline character to the console.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe cout << \"Tea shop is CLOSED!\" << endl; line prints the string “Tea shop is CLOSED!” followed by a newline character to the console.\nThe } line ends the if statement.\nreturn 0; line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\nNested If-Else\nNested if-else consists of an if statement inside an else statement.\nChallenge\nA tea shop offers discounts based on the number of tea cups ordered. Write a program that checks the number of cups ordered and applies a discount:\n\nMore than 20 cups: 20% discount\nBetween 10 and 20 cups: 10% discount\nLess than 10 cups: No discount\n\nSolution\nnested-if-else.cpp#include using namespace std;\nin",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "f cups ordered and applies a discount:\n\nMore than 20 cups: 20% discount\nBetween 10 and 20 cups: 10% discount\nLess than 10 cups: No discount\n\nSolution\nnested-if-else.cpp#include using namespace std;\nint main(){  int cups;  double pricePerCup = 2.5, totalPrice, discount;\n  cout << \"Enter the number of tea cups\" ;  cin >> cups;\n  totalPrice = pricePerCup * cups;\n  if(cups > 20){    discount = 0.20;  } else if (cups >= 10 && cups <= 20){    discount = 0.10;  } else {    discount = 0;  }\n  totalPrice -= (totalPrice * discount);\n  cout << \"Total price after discount is: \" << totalPrice << endl;\n  return 0;}\nGoing through the code\n\nThe int teaBags; line declares a variable named teaBags of type int and does not assign a value to it.\nThe double pricePerBag, totalPrice, discount; line declares three variables named pricePerBag, totalPrice, and discount of type double and does not assign a value to them.\nThe cout << \"Enter the number of tea bags you have: \"; line prints the string “Enter the num",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "e variables named pricePerBag, totalPrice, and discount of type double and does not assign a value to them.\nThe cout << \"Enter the number of tea bags you have: \"; line prints the string “Enter the number of tea bags you have: ” to the console.\nThe cin >> teaBags; line reads an integer from the console and assigns it to the teaBags variable.\nThe if (teaBags > 20) { line starts an if statement that checks if the teaBags variable is greater than 20.\nThe discount = 0.20; line assigns the value 0.20 to the discount variable.\nThe } else if (teaBags >= 10 && teaBags <= 20) { line starts an else if block that is executed if the if statement is false.\nThe discount = 0.10; line assigns the value 0.10 to the discount variable.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe discount = 0; line assigns the value 0 to the discount variable.\nThe } line ends the if statement.\nThe totalPrice = pricePerBag * teaBags; line calculates the total price by multiplyin",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "t is false.\nThe discount = 0; line assigns the value 0 to the discount variable.\nThe } line ends the if statement.\nThe totalPrice = pricePerBag * teaBags; line calculates the total price by multiplying the teaBags and pricePerBag variables.\nThe totalPrice -= (totalPrice * discount); line calculates the discounted price by subtracting the totalPrice multiplied by discount from the totalPrice variable.\nThe cout << \"Total price after discount is: \" << totalPrice << endl; line prints the string “Total price after discount is: ” followed by the value of the totalPrice variable to the console.\nreturn 0; line indicates that the program has finished executing and returns a value of 0.\n\nSwitch Case\nSwitch statement is used to check if a variable matches a specific value. If the variable matches the value, then the code inside the case statement is executed. If the variable does not match the value, then the code inside the default statement is executed.\nIt is useful when you have multiple optio",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "value, then the code inside the case statement is executed. If the variable does not match the value, then the code inside the default statement is executed.\nIt is useful when you have multiple options and want to execute different code based on the value of the variable.\nTask\nWrite a program that lets the user select a tea type from a menu. Use a switch statement to display the price based on the selected tea:\n\nGreen Tea: $2\nBlack Tea: $3\nOolong Tea: $4\n\nSolution\nswitch-case.cpp#include using namespace std;\nint main(){  int choice;  double price;\n  cout << \"Select your tea\\n\";  cout << \"1. Green Tea\\n\";  cout << \"2. Lemon Tea\\n\";  cout << \"3. Oolong Tea\\n\";  cout << \"Enter your choice in number: \\n\";\n  cin >> choice;\n  switch(choice){    case 1:      price = 2.0;      cout << \"You selected Green Tea. Price: \"<< price << endl;      break;    case 2:      price = 3.0;      cout << \"You selected Lemon Tea. Price: \"<< price << endl;      break;    case 3:      price = 4.0;      cout << \"",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "ed Green Tea. Price: \"<< price << endl;      break;    case 2:      price = 3.0;      cout << \"You selected Lemon Tea. Price: \"<< price << endl;      break;    case 3:      price = 4.0;      cout << \"You selected Oolong Tea. Price: \"<< price << endl;      break;    default:      cout << \"Invalid choice\" << endl;      break;  }\n  return 0;}\nGoing through the code\n\nThe int choice; line declares a variable named choice of type int and does not assign a value to it.\nThe double price; line declares a variable named price of type double and does not assign a value to it.\nThe cout << \"Select your tea\\n\"; line prints the string “Select your tea\\n” to the console.\nThe cout << \"1. Green Tea\\n\"; line prints the string “1. Green Tea\\n” to the console.\nThe cout << \"2. Lemon Tea\\n\"; line prints the string “2. Lemon Tea\\n” to the console.\nThe cout << \"3. Oolong Tea\\n\"; line prints the string “3. Oolong Tea\\n” to the console.\nThe cout << \"Enter your choice in number: \\n\"; line prints the string “Enter",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "ng “2. Lemon Tea\\n” to the console.\nThe cout << \"3. Oolong Tea\\n\"; line prints the string “3. Oolong Tea\\n” to the console.\nThe cout << \"Enter your choice in number: \\n\"; line prints the string “Enter your choice in number: \\n” to the console.\nThe cin >> choice; line reads an integer from the console and assigns it to the choice variable.\nThe switch(choice){ line starts a switch statement that checks the value of the choice variable.\nThe case 1: line starts a case block that is executed if the choice variable is equal to 1.\nThe price = 2.0; line assigns the value 2.0 to the price variable.\nThe cout << \"You selected Green Tea. Price: \"<< price << endl; line prints the string “You selected Green Tea. Price: ” followed by the value of the price variable to the console.\nThe break; line ends the case block.\nThe case 2: line starts a case block that is executed if the choice variable is equal to 2.\nThe price = 3.0; line assigns the value 3.0 to the price variable.\nThe cout << \"You selected L",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "e case block.\nThe case 2: line starts a case block that is executed if the choice variable is equal to 2.\nThe price = 3.0; line assigns the value 3.0 to the price variable.\nThe cout << \"You selected Lemon Tea. Price: \"<< price << endl; line prints the string “You selected Lemon Tea. Price: ” followed by the value of the price variable to the console.\nThe break; line ends the case block.\nThe case 3: line starts a case block that is executed if the choice variable is equal to 3.\nThe price = 4.0; line assigns the value 4.0 to the price variable.\nThe cout << \"You selected Black Tea. Price: \"<< price << endl; line prints the string “You selected Black Tea. Price: ” followed by the value of the price variable to the console.\nThe break; line ends the case block.\nThe default: line starts a default block that is executed if the choice variable is not equal to 1, 2, or 3.\nThe cout << \"Invalid choice\" << endl; line prints the string “Invalid choice” followed by a newline character to the console.",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "block that is executed if the choice variable is not equal to 1, 2, or 3.\nThe cout << \"Invalid choice\" << endl; line prints the string “Invalid choice” followed by a newline character to the console.\nThe break; line ends the default block.\nThe } line ends the switch statement.\nreturn 0; line indicates that the program has finished executing and returns a value of 0.\n\nSummary\nIn this chapter, we have learned about conditional statements and how to use them. We have also learned about loops and how to use them. We have also learned about switch statements and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousOperatorsNext Loops    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "te\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/"
  },
  {
    "content": "Functions | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Functions in C++    Declaring a Function    Defining a Function    Calling a Function    Function Parameters    Pass by Value    Pass by Reference    Scope of Variable    Function Overloading    Lambda Functions    Summary    On this page   Overview    Functions in C++    Declaring a Function    Defining a Function    Calling a Function    Function Parameters    Pass by Value    Pass by Reference    Scope of Variable    Function Overloading    Lambda Functions    Summary           Functions      In this chapter, we will learn about functions in C++. Our learn",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "Pass by Value    Pass by Reference    Scope of Variable    Function Overloading    Lambda Functions    Summary           Functions      In this chapter, we will learn about functions in C++. Our learning will be based on the task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\nFunctions in C++\nA function is a block of code designed to perform a specific task.\nFunctions in C++ follow this basic syntax:\nreturnType functionName(parameters) {  // function body}\n\nReturn Type: Specifies the data type of the value returned by the function. Use void if no value is returned.\nFunction Name: Describes what the function does.\nParameters: Input values for the function (optional).\n\nFor example,\n#include using namespace std;\n// Function to check tea temperatureint checkTeaTemperature(int temperature) {  return temperature;}\nint main() {  int temp = checkTeaTemperature(85);  // Function call  cout << \"The tea temperature is \" << t",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "ion to check tea temperatureint checkTeaTemperature(int temperature) {  return temperature;}\nint main() {  int temp = checkTeaTemperature(85);  // Function call  cout << \"The tea temperature is \" << temp << \"°C\" << endl;  return 0;}\nDeclaring a Function\nFunction declaration tells the compiler about the function’s name, return type, and parameters. It’s also called a function prototype.\nThe function body is defined elsewhere.\nFor example,\n#include using namespace std;\n// Declaring the function (prototype)void serveChai(int cups);\nint main() {  serveChai(3);  // Function call  return 0;}\n// Function definition is done latervoid serveChai(int cups) {  cout << \"Serving \" << cups << \" cups of chai!\" << endl;}\nDefining a Function\nA function definition includes the full function with the body. You must define the function after declaring it if it’s not inline.\nFor example,\n#include using namespace std;\n// Function definition with bodyvoid makeChai() {  cout << \"Boiling water, adding tea leave",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "u must define the function after declaring it if it’s not inline.\nFor example,\n#include using namespace std;\n// Function definition with bodyvoid makeChai() {  cout << \"Boiling water, adding tea leaves, and serving chai!\" << endl;}\nint main() {  makeChai();  // Calling the function  return 0;}\nCalling a Function\nTo execute a function, you call it by its name followed by parentheses. If the function takes arguments, pass them inside the parentheses.\nFor example:\n#include using namespace std;\n// Function to brew teavoid brewChai() {  cout << \"Chai is being brewed!\" << endl;}\nint main() {  brewChai();  // Function call  return 0;}\nFunction Parameters\n\nFormal parameters: Defined in the function signature.\nActual parameters: Values passed during the function call.\nDefault parameters: Parameters with default values if none are passed.\n\nFor example,\n#include using namespace std;\n// Function with default parametervoid serveChai(string teaType = \"Masala Chai\") {  cout << \"Serving \" << teaType <",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "with default values if none are passed.\n\nFor example,\n#include using namespace std;\n// Function with default parametervoid serveChai(string teaType = \"Masala Chai\") {  cout << \"Serving \" << teaType << endl;}\nint main() {  serveChai();               // Uses default parameter  serveChai(\"Green Chai\");    // Uses actual parameter  return 0;}\nPass by Value\nPass by value means the function receives a copy of the argument. Changes made inside the function do not affect the original variable.\nFor example,\npass-by-value.cpp#include using namespace std;\nvoid pourChai(int cups) {  cups = cups + 1;  // Modifies local copy  cout << \"Poured \" << cups << \" cups of chai!\" << endl;}\nint main() {  int chaiCups = 2;  pourChai(chaiCups);  // Passing by value  cout << \"Total chai cups outside function: \" << chaiCups << endl;  return 0;}\nPass by Reference\nPass by reference passes the actual variable, so changes in the function affect the original variable.\nFor example,\npass-by-reference.cpp#include using",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "chaiCups << endl;  return 0;}\nPass by Reference\nPass by reference passes the actual variable, so changes in the function affect the original variable.\nFor example,\npass-by-reference.cpp#include using namespace std;\nvoid refillChai(int ∪︀) {  // Pass by reference  cups += 2;  cout << \"Refilled to \" << cups << \" cups of chai!\" << endl;}\nint main() {  int chaiCups = 3;  refillChai(chaiCups);  // Passing by reference  cout << \"Total chai cups now: \" << chaiCups << endl;  return 0;}\nScope of Variable\n\nVariables declared inside a function have local scope (accessible only within the function).\nVariables declared outside all functions have global scope (accessible from any function).\n\nFor example,\nscope-of-variable.cpp#include using namespace std;\nint globalChaiStock = 100;  // Global variable\nvoid serveChai() {  int localCups = 5;  // Local variable  cout << \"Serving \" << localCups << \" cups from \" << globalChaiStock << \" total stock.\" << endl;}\nint main() {  serveChai();  cout << \"Global ch",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "id serveChai() {  int localCups = 5;  // Local variable  cout << \"Serving \" << localCups << \" cups from \" << globalChaiStock << \" total stock.\" << endl;}\nint main() {  serveChai();  cout << \"Global chai stock after serving: \" << globalChaiStock << endl;  return 0;}\nFunction Overloading\nFunction overloading allows multiple functions with the same name but different parameter types or numbers.\nFor example,\nfunction-overloading.cpp#include using namespace std;\n// Function overloadingvoid brewChai(int cups) {  cout << \"Brewing \" << cups << \" cups of chai.\" << endl;}\nvoid brewChai(string teaType) {  cout << \"Brewing \" << teaType << \".\" << endl;}\nint main() {  brewChai(3);             // Calls int version  brewChai(\"Masala Chai\");  // Calls string version  return 0;}\nLambda Functions\n\nA lambda function is an anonymous function that can be defined inline using the [] syntax.\nThey’re useful for short, simple functions.\n\nFor example,\n#include using namespace std;\nint main() {  // Lambda functio",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "unction is an anonymous function that can be defined inline using the [] syntax.\nThey’re useful for short, simple functions.\n\nFor example,\n#include using namespace std;\nint main() {  // Lambda function to prepare chai  auto prepareChai = [](int cups) {    cout << \"Preparing \" << cups << \" cups of chai.\" << endl;  };\n  prepareChai(2);  // Calling lambda function  return 0;}\nSummary\n\nFunction Declaration & Definition: Tell the compiler about a function and define what it does.\nCalling Functions: Execute the function by passing arguments if required.\nPass by Value/Reference: Controls whether changes affect the original value or a copy.\nFunction Overloading: Allows multiple functions with the same name but different parameter lists.\nLambda Functions: Short, inline functions used for simple tasks.\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousLoopsNext",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "ks.\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 17, 2025   PreviousLoopsNext Welcome    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-c/functions/"
  },
  {
    "content": "Normalization | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configura",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/"
  },
  {
    "content": "Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Understanding Database Design Principles    What is Normalization?     First Normal Form (1NF)    Second Normal Form (2NF)    Third Normal Form (3NF)      Entity Relationship Diagrams (ERDs)    Relationship in SQL    LMS practice Exercise    Summary    On this page   Overview    Understanding Database Design Principles    What is Normalization?     First Normal Form (1NF)    Second Normal Form (2NF)    Third Normal Form (3NF)      Entity Relationship Diagrams (ERDs)    Relationship in SQL    LMS practice Exercise    Summary           Normalization      Da",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/"
  },
  {
    "content": "al Form (1NF)    Second Normal Form (2NF)    Third Normal Form (3NF)      Entity Relationship Diagrams (ERDs)    Relationship in SQL    LMS practice Exercise    Summary           Normalization      Database design is the process of creating a logical structure for storing data in a database. It involves defining the relationships between tables, identifying the primary and foreign keys, and ensuring that the data is normalized to minimize redundancy and improve data integrity.\nUnderstanding Database Design Principles\n\nGood database design avoids data redundancy and ensures data integrity.\nExample: Instead of storing the city name in every row for each chai type, store city details in a separate Cities table and link it with the Chai table using foreign keys.\n\nWhat is Normalization?\nNormalization organizes a database into tables and columns to:\n\nEliminate data redundancy.\nEnsure data dependencies are logical.\n\nFirst Normal Form (1NF)\n\n1NF ensures that the data in a table is organized in",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/"
  },
  {
    "content": "zation organizes a database into tables and columns to:\n\nEliminate data redundancy.\nEnsure data dependencies are logical.\n\nFirst Normal Form (1NF)\n\n1NF ensures that the data in a table is organized into rows and columns, with each column holding atomic (indivisible) values.\nExample: A Chai table should have columns like name, ingredients, price, and each cell should contain a single value. You shouldn’t have multiple cities listed in one cell.\n\nSecond Normal Form (2NF)\n\n2NF ensures that each table depends on the primary key. There should be no partial dependencies (where a non-key column depends on part of a composite key).\nExample: If a table has a composite key (chai_id, city_id), ensure all non-key columns (like price) depend on the entire key, not just one part.\n\nThird Normal Form (3NF)\n\n3NF ensures that non-primary-key columns do not depend on other non-primary-key columns.\nExample: A Chai table shouldn’t have both city_name and city_population. Instead, city_name and city_populat",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/"
  },
  {
    "content": ")\n\n3NF ensures that non-primary-key columns do not depend on other non-primary-key columns.\nExample: A Chai table shouldn’t have both city_name and city_population. Instead, city_name and city_population should belong in a separate City table, and you can link it to the Chai table with a city_id.\n\nEntity Relationship Diagrams (ERDs)\nERDs are used to visually represent relationships between database entities.\n\nExample: You might have two tables: Chai and City. An ERD would show a one-to-many relationship between cities and chai varieties.\nOne-to-Many Relationship: One city can have many chai varieties, but each chai variety is sold in one city.\n\nRelationship in SQL\nThere are different types of relationships in SQL:\n\nOne-to-One Relationship: One entity can have only one instance of another entity.\nOne-to-Many Relationship: One entity can have multiple instances of another entity.\nMany-to-Many Relationship: One entity can have multiple instances of another entity, and vice versa.\n\nLMS pra",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/"
  },
  {
    "content": "ntity.\nOne-to-Many Relationship: One entity can have multiple instances of another entity.\nMany-to-Many Relationship: One entity can have multiple instances of another entity, and vice versa.\n\nLMS practice Exercise\nWe will create a fun practice database design for Learning Management System (LMS) using SQL. The LMS will have the following entities:\n\nUsers\nCourses\nVideos\nEnrollments\n\nusers [icon:user] {  _id string pk  name string  email string unique  password string  userType enum \"student\", \"instructor\", \"admin\"  isPaid boolean  enrolledCourses ObjectId[] courses  createdAt Date  updatedAt Date}\ncourses [icon:book] {  _id string pk  title string  description string  price number  instructorId ObjectId users  category string  tags string[]  durationInHours number  videos ObjectId[] videos  createdAt Date  updatedAt Date}\nvideos [icon:video] {  _id string pk  courseId ObjectId courses  title string  description string  url string  durationInMinutes number  createdAt Date  updatedAt Dat",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/"
  },
  {
    "content": "createdAt Date  updatedAt Date}\nvideos [icon:video] {  _id string pk  courseId ObjectId courses  title string  description string  url string  durationInMinutes number  createdAt Date  updatedAt Date}\nenrollments [icon:user] {  _id string pk  userId ObjectId users  courseId ObjectId courses  enrollmentDate Date  progress number  completedAt Date  createdAt Date  updatedAt Date}\nusers._id < enrollments.userIdenrollments.userId > users._idcourses._id < enrollments.courseIdenrollments.courseId > courses._idcourses._id < videos.courseIdvideos.courseId > courses._idusers._id < courses.instructorIdcourses.instructorId > users._id\nSummary\nIn this chapter, we have learned about database design and normalization. We have also learned about the basic data types and how to use them. We have also learned about the different types of relationships and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/"
  },
  {
    "content": "arned about the different types of relationships and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 19, 2025   PreviousPostgreSQLNext Exercise - DB Design    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/"
  },
  {
    "content": "SQL Joins Exercise | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Conf",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/"
  },
  {
    "content": "SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Create 2 tables for a chai store    Challenges    On this page   Overview    Create 2 tables for a chai store    Challenges           SQL Joins Exercise      In this exercise, we’ll explore practical sql joins using a real-world scenario. We’ll learn how to use joins to combine data from multiple tables.\nCreate 2 tables for a chai store\nWe will create 2 tables for a chai store so that we can practice joins. The tables will be:\nchai table\nCREATE TABLE chai (  chai_id SERIAL PRIMARY KEY,  chai_name VARCHAR(50),  price DECIMAL(5, 2));\nLet’s add some sam",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/"
  },
  {
    "content": "tables for a chai store so that we can practice joins. The tables will be:\nchai table\nCREATE TABLE chai (  chai_id SERIAL PRIMARY KEY,  chai_name VARCHAR(50),  price DECIMAL(5, 2));\nLet’s add some sample data to the chai table:\nINSERT INTO chai (chai_name, price)VALUES ('Masala Chai', 30.00),       ('Green Chai', 25.00),       ('Iced Chai', 35.00);\norders table\nCREATE TABLE orders (  order_id SERIAL PRIMARY KEY,  chai_id INT,  customer_name VARCHAR(50),  quantity INT,  FOREIGN KEY (chai_id) REFERENCES chai(chai_id));\nLet’s add some sample data to the orders table:\nINSERT INTO orders (chai_id, customer_name, quantity)VALUES (1, 'Alice', 2),       (2, 'Bob', 1),       (1, 'Charlie', 3),       (3, 'David', 1);\nChallenges\nNow, let’s try to solve some challenges using joins.\n\n\nInner Join\nGet the list of all orders with the chai variety and customer details.\n\n\nLeft Join\nShow all customers and their orders, but also include customers who haven’t ordered anything yet (if any).\n\n\nRight Join\nSho",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/"
  },
  {
    "content": "e list of all orders with the chai variety and customer details.\n\n\nLeft Join\nShow all customers and their orders, but also include customers who haven’t ordered anything yet (if any).\n\n\nRight Join\nShow all chai varieties, including those that haven’t been ordered yet.\n\n\nFull Outer Join\nList all customers and all chai varieties, with or without orders.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 19, 2025   PreviousSQL Joins and KeysNext Welcome    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/"
  },
  {
    "content": "Welcome | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Chai aur HTML       Welcome    HTML Intro    Emmet Crash Course    Common HTML Tags          Chai aur Git       Welcome    Git and GitHub    Terminology    Behind the scenes    Branches in Git    Diff, Stash, Tags    Managing History    Collaborate with Github          Chai aur C++       Welcome    C++ Intro    First Program in C++    Variables & Constants    Data Types    Operators    Control Flow    Loops    Functions          Chai aur Django       Welcome    Django Intro    Jinja Templates App    Tailwind Integration    Models    Relationships & Forms          Chai aur SQL       Welcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/welcome/"
  },
  {
    "content": "elcome    SQL Intro    PostgreSQL    Database Design    Exercise - DB Design    SQL Joins and Keys    Exercise - Joins          Chai aur DevOps       Welcome    Server Startup    Nginx Configuration    Nginx Rate Limit    Nginx SSL Setup    Deploy Node API    PostgreSQL & Docker    PostgreSQL on VPS    Advance Node Logger            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           Welcome      Haanji! Swagat hai Chai aur Docs mein. 🎉\nThis guide has been carefully curated as a comprehensive reference for the “Chai aur HTML” series on the Chai aur Code YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\n  Play    \nLet’s begin with the basics in the next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   Previo",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/welcome/"
  },
  {
    "content": "e next section…\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Choudhary Last updated: Apr 14, 2025   PreviousGetting StartedNext HTML Intro    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/youtube/chai-aur-html/welcome/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your",
    "source": "https://docs.chaicode.com/data-science/getting-started"
  },
  {
    "content": "eos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encount",
    "source": "https://docs.chaicode.com/data-science/getting-started"
  },
  {
    "content": "r additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/data-science/getting-started"
  },
  {
    "content": "ake the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next MacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/data-science/getting-started"
  },
  {
    "content": "MacOS | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Python     Python Installation    Setting Up Your Python Environment      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    MacOs integration    Useful Extensions      References    On this page   Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "ng VS Code    MacOs integration    Useful Extensions      References    On this page   Overview    Prerequisites    Homebrew    Terminal     Installation    Customization      Zsh     Installing Zsh    OhMyZsh    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Python     Python Installation    Setting Up Your Python Environment      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    MacOs integration    Useful Extensions      References           MacOS      A question that comes to mind for every beginner: How to set up my environment for data-science?\nThe following guide will teach you how to set up a minimal development environment for MacOS.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "nvironment for MacOS.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nApple Silicon Device 🫠\nMacOs 11 or later\nA GitHub account\n\nHomebrew\nHomebrew calls itself The missing package manager for macOS and is an essential tool for any developer.\n\n\nInstallation script\nTerminal window/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\nThe Homebrew installation script will ask you to enter your Mac user password. This is the password you used to sign into your Mac.\nTerminal windowPassword:\nYou won’t see the characters as you type. Press enter when you are done.\n\n\nOption to install XCode Command Line Tools\nIf you haven’t already installed XCode Command Line Tools, you’ll see a message that The XCode Command Line Tools will be install",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "enter when you are done.\n\n\nOption to install XCode Command Line Tools\nIf you haven’t already installed XCode Command Line Tools, you’ll see a message that The XCode Command Line Tools will be installed.\nPress return to continue when prompted by the Homebrew installation script.\n\n\nAdd to the $PATH shell configuration\nHomebrew files are installed into the /opt/homebrew folder. But the folder is not part of the default $PATH.\nTerminal windowecho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/ak/.zprofileeval \"$(/opt/homebrew/bin/brew shellenv)\"\nBe very careful to copy the commands exactly. It’s best to copy and paste.\n\n\nUpdate everything in Homebrew to recent version:\nTerminal windowbrew updatebrew outdatedbrew upgrade\n\n\nTerminal\niTerm2 is an open source replacement for Apple’s Terminal. It’s highly customizable and comes with a lot of useful features.\nInstallation\nUse Homebrew to download and install:\nTerminal windowbrew install --cask iterm2\nCustomization\nHere are some suggested",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "al. It’s highly customizable and comes with a lot of useful features.\nInstallation\nUse Homebrew to download and install:\nTerminal windowbrew install --cask iterm2\nCustomization\nHere are some suggested settings you can change or set, they are all optional.\n\n\nSet hot-key to open and close the terminal to command + option + i\n\n\nGo to profiles -> Default -> Terminal -> Check silence bell to disable the terminal session from making any sound\n\n\nDownload one of iTerm2 color schemes and then set these to your default profile colors\n\n\nChange the cursor text and cursor color to yellow make it more visible\n\n\nChange the font to 14pt Source Code Pro Lite. Source Code Pro can be downloaded using Homebrew\nTerminal windowbrew tap homebrew/cask-fonts && brew install --cask font-source-code-pro\n\n\nZsh\nThe Z shell (also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS) with additional features. It’s recommended to use zsh over bash. It’s also highly recommended to in",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "shell (also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS) with additional features. It’s recommended to use zsh over bash. It’s also highly recommended to install a framework with zsh as it makes dealing with configuration, plugins and themes a lot nicer.\nInstalling Zsh\nInstall zsh using Homebrew:\nTerminal windowbrew install zsh\nNow you should install a framework, we recommend to use OhMyZsh.\nOhMyZsh\nOhMyZsh is an open source, community-driven framework for managing your zsh configuration. It comes with a bunch of features out of the box and improves your terminal experience.\nInstalling OhMyZsh\nEnter the following command into your terminal to install OhMyZsh:\nTerminal windowsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\nThe installation script should set zsh to your default shell, but if it doesn’t you can do it manually:\nTerminal windowchsh -s $(which zsh)\nPlugins\nThere are countless pl",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "zsh/master/tools/install.sh)\"\nThe installation script should set zsh to your default shell, but if it doesn’t you can do it manually:\nTerminal windowchsh -s $(which zsh)\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\nTerminal windowplugins=(git zsh-autosuggestions)\n\n\nStart a new terminal session.\n\n\nzsh-syntax-highlighting\nThis package provides syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them,",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zshrc:\nTerminal windowplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n\n\nStart a new terminal session.\nA huge list of plugins can be found at the awesome zsh plugins repo.\n\n\nGit Config\nGit should come pre-installed on mac, if not run:\nTerminal windowbrew install git\nName\nTo set up your Git config file, open a WSL command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add your GitHub username to link it to git (case sensitive!):\nTerminal windowgit config --global user.username \"GitHub username\"\nMake sure you are inputting user.username and not user.name otherwise, you will overwrite your name and you will not be correctly synced to your GitHub account.\nYou can double-check any of your settings by typing git config --global user.name and so on. To make any changes just type the necessary command again as in the examples above.\nPython\nThis section covers setting up python environment for MacOS. Python is one of the most powerful programming languages, mostly used in data science, machine learning, and big data a",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "mples above.\nPython\nThis section covers setting up python environment for MacOS. Python is one of the most powerful programming languages, mostly used in data science, machine learning, and big data analytics.\nPython Installation\nTerminal windowbrew install python\nThis will install the latest version of Python 3. You can verify the installation with:\nTerminal windowpython3 --version\nSetting Up Your Python Environment\nOnce you’ve installed Python you might want to explore some additional tools that will make your Python development experience better. These tools help you manage different Python versions and keep your projects’ dependencies isolated.\nManaging Multiple Python Versions with uv\nIf you work on different Python projects, you might find yourself needing different Python versions. This is where uv comes in handy. It’s a tool that allows you to install and switch between multiple Python versions effortlessly.\n\n\nInstall uv using Homebrew:\nTerminal windowbrew install uv\n\n\nTo enabl",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "This is where uv comes in handy. It’s a tool that allows you to install and switch between multiple Python versions effortlessly.\n\n\nInstall uv using Homebrew:\nTerminal windowbrew install uv\n\n\nTo enable shell autocompletion for uv, run this:\nTerminal window  echo 'eval \"$(uv generate-shell-completion zsh)\"' >> ~/.zshrc\n\n\nTo enable shell autocompletion for uvx, run this:\nTerminal windowecho 'eval \"$(uvx --generate-shell-completion zsh)\"' >> ~/.zshrc\nThen restart the shell or source the shell config file.\n\n\nInstall the Python version you need:\nTerminal windowuv python install 3.10.x\n\n\nWorking with Virtual Environments\nVirtual environments are an essential tool for modern Python development. They create isolated spaces where you can install packages without affecting your system-wide Python installation. This prevents dependency conflicts between different projects.\n\n\nCreate a new environment using uv:\nTerminal windowuv venv\n\n\nInstall a package in the new virtual environment\nTerminal windo",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "stallation. This prevents dependency conflicts between different projects.\n\n\nCreate a new environment using uv:\nTerminal windowuv venv\n\n\nInstall a package in the new virtual environment\nTerminal windowuv pip install ruff\n\n\nThe virtual environment can be “activated” to make its packages available:\nTerminal windowsource .venv/bin/activate\n\n\nWhen you’re done, deactivate the environment:\nTerminal windowdeactivate\n\n\nDocker\nThis section covers setting docker desktop for MacOS. In the end, you will have a docker-daemon, docker-cli, docker-compose, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the executable for docker-desktop.\n\n\nInstall the executable, and choose the appropriate virtualization environment while installing if the option shows up.\n\n\nDone with installation. Sign in with the docker account or skip for the time being.\n\n\nTest Docker CLI\nMake su",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "oose the appropriate virtualization environment while installing if the option shows up.\n\n\nDone with installation. Sign in with the docker account or skip for the time being.\n\n\nTest Docker CLI\nMake sure you at least launch docker-desktop once, and let it run in the background.\nTerminal windowdocker -v\nYou have successfully installed docker-desktop and all other necessary tools docker-cli, docker-compose, and more.\nPackage Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gained popularity in the JavaScript community: NPM, Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install No",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js, you automatically get NPM installed on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\nTerminal windowbrew install yarn\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\nTerminal windowbrew inst",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\nTerminal windowbrew install pnpm\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.\n\n\nIt aims to provide a high-performance alternative to Node.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       curl     homebrew     npm      Terminal windowcurl -fsSL https://bun.sh/install | bash  Terminal windowbrew install oven-sh/bun/bun  Terminal windownpm install -g bun   \n\n\nBasic commands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "ommands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThis will create a package.json file with the default settings.\n\n\nInstall a package\nTo install the required package, you can run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "ands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a script defined in your package.json file, run the following commands\n         bun      pnpm      npm      yarn      Terminal windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their tooling in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor be",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything that is needed for coding (editor) and executing the code (integrated terminal).\n\n\nInstalling VS Code\nTo install the latest version, use Homebrew:\nTerminal windowbrew install --cask visual-studio-code\nMacOs integration\nLaunch VS Code from the command line.\nAfter that, you can launch VS Code from your terminal:\n\ncode . will open VS Code in the current directory\ncode myfile.txt will open myfile.txt in VS Code\n\nUseful Extensions\n\n\nPython - Includes many useful features, such as code completion with IntelliSense, debugging, unit testing support, etc.\n\n\nDocker - Makes it easy to create, manage, and debug containerized applications.\n\n\nError Lens - Improve highlighting of errors, warnings and other",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "IntelliSense, debugging, unit testing support, etc.\n\n\nDocker - Makes it easy to create, manage, and debug containerized applications.\n\n\nError Lens - Improve highlighting of errors, warnings and other language diagnostics.\n\n\nindent-rainbow - Makes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nvscode-icons - Icons for Visual Studio Code\n\n\nFluent Icons - Fluent product icons for Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nGit a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityIntroduction · macOS Setup Guide sourabhbajaj.comGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosystem/git-credential-managerHow to Set up an Apple Mac for Software Development stuartellis.nameSetting up an Apple Mac for development and systems administrationuv docs.astral.sh\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousGetting StartedNext Windows    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/mac-os/"
  },
  {
    "content": "Windows | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Prerequisites    WSL     Updating Linux    Mapping Your Linux Drive    Restarting WSL      Windows Terminal     Default Profile    Starting Directory      Zsh     Installing Zsh    OhMyZsh    cURL    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Python     Python Installation    Setting Up Your Python Environment      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References    On this pag",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "RN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References    On this page   Overview    Prerequisites    WSL     Updating Linux    Mapping Your Linux Drive    Restarting WSL      Windows Terminal     Default Profile    Starting Directory      Zsh     Installing Zsh    OhMyZsh    cURL    Installing OhMyZsh    Plugins      Git Config     Name    Email    Username      Python     Python Installation    Setting Up Your Python Environment      Docker     Docker Installation    Test Docker CLI      Package Managers     NPM    YARN    PNPM    Bun    Basic commands      Integrated Development Environment     Installing VS Code    Changing the Default Shell    Remote Extension    Useful Extensions      References           Windows      A question that comes to mind for every beginner: How to set up my environment for data-science?\nThe following guide will teach you how",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "sion    Useful Extensions      References           Windows      A question that comes to mind for every beginner: How to set up my environment for data-science?\nThe following guide will teach you how to set up a minimal development environment for Windows.\n   Tip   \nSetting up your development environment all by yourself is your first challenge as beginner.\nIt’s challenging, with lots of searching on the internet involved, however it will force you to improve your core skills and grow as a developer.\n  \nPrerequisites\n\nWindows 11\nA GitHub account\n\nWSL\nThe first and most important part of setting up your Windows dev environment is installing the Windows Subsystem for Linux (WSL). We recommend sticking with Ubuntu but feel free to try out as many distributions as you like.\nThere used to be a handful of steps needed to install it, but we now only need to enter the following command into PowerShell or Command Prompt:\nTerminal windowwsl --install\nUpdating Linux\nIt is recommended that you re",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "handful of steps needed to install it, but we now only need to enter the following command into PowerShell or Command Prompt:\nTerminal windowwsl --install\nUpdating Linux\nIt is recommended that you regularly update and upgrade your packages. In Ubuntu or Debian, we use the apt package manager:\nTerminal windowsudo apt update && sudo apt upgrade\nWindows does not automatically update or upgrade your Linux distribution(s). This is a task that most Linux users prefer to control themselves.\nMapping Your Linux Drive\nWhen you open the Windows file explorer, it displays your devices and drives. We are going to add our Ubuntu virtual drive as a network location for easy access.\n\n\nOpen the \\\\wsl$\\ location from file explorer:\n\n\n\nRight-click on the Ubuntu folder, and select Map network drive:\n\n\n\nSelect the drive letter you would like to use, leave Reconnect at sign-in checked and Connect using different credentials unchecked, and then click finish (mine will look slightly different because it’s al",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "t the drive letter you would like to use, leave Reconnect at sign-in checked and Connect using different credentials unchecked, and then click finish (mine will look slightly different because it’s already been done):\n\n\n\nThe result should look something like this:\n\n\n\nIf you wanted to access your Windows files from the Linux terminal, they are found in the /mnt/ directory, so your Windows user directory would be located at /mnt/c/Users/username.\nWith your Ubuntu drive mapped, you can easily drag/drop or copy/paste Windows files to the Linux file system by using the file explorer.\nPin Your Code Directory\nAnother quick tip I have is to create a code directory inside of Ubuntu, and then pin it to the quick access menu found on the left side of the file explorer. This comes in handy when transferring files quickly between Windows and Linux.\n\n\nOpen File Explorer and click on the Ubuntu network drive we created\n\n\nSelect the home dir, and then your user directory\n\n\nRight-click and create a new",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "erring files quickly between Windows and Linux.\n\n\nOpen File Explorer and click on the Ubuntu network drive we created\n\n\nSelect the home dir, and then your user directory\n\n\nRight-click and create a new folder, name it code, or anything else you’d like\n\n\nDrag that new folder to the left, underneath the star icon that says Quick access.\n\n\n\nRestarting WSL\nIf for some reason WSL stops working, you can restart it with these two commands from PowerShell/Command Prompt:\nTerminal windowwsl.exe --shutdownwsl.exe\nWindows Terminal\nA few quick things we recommend setting up are the default profile and your starting home directory. These settings make it so launching Windows Terminal will open directly into WSL inside our user’s home directory.\nDefault Profile\nWindows Terminal will open a PowerShell or Command Prompt shell when launched by default, here is how to switch it to WSL:\n\n\nSelect the ˅ icon from Windows Terminal and go to the Settings menu:\n\n\n\nIn the Startup section you will find the Defau",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "Command Prompt shell when launched by default, here is how to switch it to WSL:\n\n\nSelect the ˅ icon from Windows Terminal and go to the Settings menu:\n\n\n\nIn the Startup section you will find the Default profile dropdown, select Ubuntu. Below it, select Windows Terminal as the Default terminal application:\n\n\n\nStarting Directory\nA default Ubuntu terminal will open to the root directory. To make finding your files a little quicker we can have it open into your home directory instead.\n\n\nUnder the Profiles section in the settings menu click on Ubuntu\n\n\nAt the General tab, you will find a Starting directory input\n\n\nEnter the following replacing “username” with your Ubuntu user name: \\\\wsl$\\Ubuntu\\home\\username\n\n\nYou can leave the Use parent process directory box unchecked\n\n\nIf it is still opening into your / directory, change the Command line setting located right above the Starting directory input box to the following: wsl.exe -d Ubuntu\n\n\n\nZsh\nZ shell works almost identically to the standar",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "g into your / directory, change the Command line setting located right above the Starting directory input box to the following: wsl.exe -d Ubuntu\n\n\n\nZsh\nZ shell works almost identically to the standard BASH shell found on default Linux installs. What makes it different is its support for plugins and themes, along with some extra features like spelling correction and recursive path expansion. It’s time to throw BASH in the trash!\nInstalling Zsh\nZsh can be installed with one command:\nTerminal windowsudo apt install zsh\nAfter installing, type the zsh command. Zsh will ask you to choose some configurations. We will do this later on while installing oh-my-zsh, so choose option 0 to create the config file and prevent this message from showing again.\nOhMyZsh\nThe most popular plugin framework by far is OhMyZsh. It comes preloaded with loads of plugins, themes, helpers, and more. It can help with productivity for sure, but more importantly, it just looks cool 😎.\ncURL\nFirst off, we need to make",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "ar is OhMyZsh. It comes preloaded with loads of plugins, themes, helpers, and more. It can help with productivity for sure, but more importantly, it just looks cool 😎.\ncURL\nFirst off, we need to make sure we have cURL installed. Short for “Client URL”, it’s a way to transfer data from the command line, and that’s how we will download OhMyZsh.\nTerminal windowsudo apt install curl\nInstalling OhMyZsh\nEnter the following command into your terminal to install OhMyZsh:\nTerminal windowsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\nThat’s it! You should now see a .oh-my-zsh directory inside of your home directory. To change your plugins and themes you will need to edit your .zshrc file, also found in your home dir.\nHere is a list of all the themes and plugins that come bundled with OhMyZsh.\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "that come bundled with OhMyZsh.\nPlugins\nThere are countless plugins available, but these two are recommend most.\nzsh-autosuggestions\nAutosuggestions for zsh, It suggests commands as you type based on history and completions.\n\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\nTerminal windowgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\nTerminal windowplugins=(git zsh-autosuggestions)\n\n\nStart a new terminal session.\n\n\nzsh-syntax-highlighting\nThis package provides syntax highlighting for the shell zsh. It enables the highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "erminal. This helps in reviewing commands before running them, particularly in catching syntax errors.\n\n\nClone this repository in oh-my-zsh’s plugins directory:\nTerminal windowgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n\nActivate the plugin in ~/.zshrc:\nTerminal windowplugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n\n\nStart a new terminal session.\nA huge list of plugins can be found at the awesome zsh plugins repo.\n\n\nGit Config\nGit should come pre-installed on most, if not all of the WSL Linux distributions. To ensure you have the latest version, use the following command in an Ubuntu or Debian-based distro:\nTerminal windowsudo apt install git\nName\nTo set up your Git config file, open a WSL command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "command line and set your name with this command (replacing “Your Name” with your preferred username):\nTerminal windowgit config --global user.name \"Your Name\"\nEmail\nSet your email with this command (replacing “[email protected]” with the email you prefer):\nTerminal windowgit config --global user.email \"[email protected]\"\nUsername\nAnd finally, add your GitHub username to link it to git (case sensitive!):\nTerminal windowgit config --global user.username \"GitHub username\"\nMake sure you are inputting user.username and not user.name otherwise, you will overwrite your name and you will not be correctly synced to your GitHub account.\nYou can double-check any of your settings by typing git config --global user.name and so on. To make any changes just type the necessary command again as in the examples above.\nPython\nThis section covers setting up python environment for Windows. Python is one of the most powerful programming languages, mostly used in data science, machine learning, and big data",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "mples above.\nPython\nThis section covers setting up python environment for Windows. Python is one of the most powerful programming languages, mostly used in data science, machine learning, and big data analytics.\nPython Installation\n\n\nDownload an installer from the Python website. To do that, visit https://www.python.org/downloads/, it detects your operating system automatically and shows a big button for downloading the latest version of Python installer. If it doesn’t, click the Windows link and choose the latest Python release.\n\n\nOnce the download is complete, double-click the installer to start installing Python. The installer will walk you through a wizard to complete the installation, and in most cases, the default settings work well, so install it like the other applications on windows.\n\n\nThis will install the latest version of Python 3. You can verify the installation with:\nTerminal windowpython --version\n\n\nIf the installer does not include the Add Python to PATH checkbox or you",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "ws.\n\n\nThis will install the latest version of Python 3. You can verify the installation with:\nTerminal windowpython --version\n\n\nIf the installer does not include the Add Python to PATH checkbox or you have not selected that option, add Python to PATH manually.\n\n\nSetting Up Your Python Environment\nOnce you’ve installed Python you might want to explore some additional tools that will make your Python development experience better. These tools help you manage different Python versions and keep your projects’ dependencies isolated.\nManaging Multiple Python Versions with uv\nIf you work on different Python projects, you might find yourself needing different Python versions. This is where uv comes in handy. It’s a tool that allows you to install and switch between multiple Python versions effortlessly.\n\n\nTo install uv use irm to download the script and execute it with iex:\nTerminal windowpowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n\nTo enable shell autoc",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "essly.\n\n\nTo install uv use irm to download the script and execute it with iex:\nTerminal windowpowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n\nTo enable shell autocompletion for uv, run this:\nTerminal window  if (!(Test-Path -Path $PROFILE)) {    New-Item -ItemType File -Path $PROFILE -Force  }  Add-Content -Path $PROFILE -Value '(& uv generate-shell-completion powershell) | Out-String | Invoke-Expression'\n\n\nTo enable shell autocompletion for uvx, run this:\nTerminal window  if (!(Test-Path -Path $PROFILE)) {    New-Item -ItemType File -Path $PROFILE -Force  }  Add-Content -Path $PROFILE -Value '(& uvx --generate-shell-completion powershell) | Out-String | Invoke-Expression'\nThen restart the shell or source the shell config file.\n\n\nInstall the Python version you need:\nTerminal windowuv python install 3.10.x\n\n\nWorking with Virtual Environments\nVirtual environments are an essential tool for modern Python development. They create isolated spaces where yo",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "ion you need:\nTerminal windowuv python install 3.10.x\n\n\nWorking with Virtual Environments\nVirtual environments are an essential tool for modern Python development. They create isolated spaces where you can install packages without affecting your system-wide Python installation. This prevents dependency conflicts between different projects.\n\n\nCreate a new environment using uv:\nTerminal windowuv venv\n\n\nInstall a package in the new virtual environment\nTerminal windowuv pip install ruff\n\n\nThe virtual environment can be “activated” to make its packages available:\nTerminal windowsource .venv/bin/activate\n\n\nWhen you’re done, deactivate the environment:\nTerminal windowdeactivate\n\n\nDocker\nThis section covers setting docker desktop for MacOS. In the end, you will have a docker-daemon, docker-cli, docker-compose, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "cker-compose, and more.\nDocker provides the ability to package and run an application in a loosely isolated environment called a container. For more info Checkout Docs.\nDocker Installation\n\n\nDownload the executable for docker-desktop.\n\n\nInstall the executable, and choose the appropriate virtualization environment while installing if the option shows up.\n\n\nDone with installation. Sign in with the docker account or skip for the time being.\n\n\nTest Docker CLI\nMake sure you at least launch docker-desktop once, and let it run in the background.\nTerminal windowdocker -v\nYou have successfully installed docker-desktop and all other necessary tools docker-cli, docker-compose, and more.\nPackage Managers\nJavaScript package managers play a pivotal role in web development. They are tools that automate installing, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent packag",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "nstalling, upgrading, configuring, and consistently removing computer programs. They are critical in managing the numerous packages developers use to build complex applications.\nThree prominent package managers have gained popularity in the JavaScript community: NPM, Yarn, PNPM and Bun.\nNPM\n\n\nAs the name suggests, NPM (Node Package Manager) is a package manager for the JavaScript runtime environment Node.js.\n\n\nIt comes bundled with Node.js, so when you install Node.js, you automatically get NPM installed on your computer.\n\n\nYARN\n\n\nYarn is a new package manager developed by Facebook in response to some of the problems they faced with NPM, particularly regarding speed, security, and reliability.\n\n\nYarn introduced some new features unavailable in NPM, such as offline package installation and deterministic dependency resolution.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "deterministic dependency resolution.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable\n\n\nYou can quickly check whether Corepack is enabled by running yarn exec env: if you get a path as output, Corepack is properly installed.\n\n\n\n\nPNPM\n\n\nPNPM, standing for Performant NPM, is a JavaScript package manager that aims to solve some of the issues associated with NPM and Yarn.\n\n\nIt can be a drop-in replacement for these tools while providing better performance and disk space usage.\n\n\nPNPM uses a unique approach to manage node modules, which makes it highly disk efficient.\n\n\nInstallation\n\n\nSince v16.13, Node.js is shipping Corepack for managing package managers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable pnpm\n\n\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, comple",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "gers.\n\n\nThis is an experimental feature, so you need to enable it by running:\nTerminal windowcorepack enable pnpm\n\n\n\n\nBun\n\n\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.\n\n\nIt aims to provide a high-performance alternative to Node.js with better speed and resource efficiency.\n\n\nBun’s package manager is significantly faster than npm, yarn, and pnpm while maintaining compatibility with the npm registry.\n\n\nInstallation\n       PowerShell/cmd.eve     npm     scoop      Terminal windowpowershell -c \"irm bun.sh/install.ps1|iex\"  Terminal windownpm install -g bun  Terminal windowscoop install bun   \n\n\nBasic commands\n\n\nInitialize a new project\nTo create a new project, navigate to your project directory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "ory and run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun init -y  Terminal windowpnpm init -y  Terminal windownpm init -y  Terminal windowyarn init -y      \nThis will create a package.json file with the default settings.\n\n\nInstall a package\nTo install the required package, you can run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add   Terminal windowpnpm add   Terminal windownpm install   Terminal windowyarn add      \nThis will install and add the package to your package.json file under the dependencies section.\n\n\nInstall a development package\nTo install a package for development purposes, run the following commands.\n         bun      pnpm      npm      yarn      Terminal windowbun add -D   Terminal windowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "indowpnpm add -D   Terminal windownpm install -D   Terminal windowyarn add -D      \nThis will install and add the package to your package.json file under the devDependencies section.\n\n\nRun a script\nTo run a script defined in your package.json file, run the following commands\n         bun      pnpm      npm      yarn      Terminal windowbun run   Terminal windowpnpm run   Terminal windownpm run   Terminal windowyarn run      \nThis will run the script defined in the scripts section of your package.json file.\n\n\nIntegrated Development Environment\n\n\nEssentially, there are two different philosophies that define your setup as a web developer.\n\n\nWhile there are developers who prefer to have all their tooling in one Integrated Development Environment (IDE), there are developers who prefer to use multiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines ev",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "ltiple lightweight tools (e.g. editor/IDE, standalone terminal) and combine them for their purposes.\n\n\nFor beginners to web development, we recommend using one tool. The IDE (e.g. VS Code) combines everything that is needed for coding (editor) and executing the code (integrated terminal).\n\n\nInstalling VS Code\nVS Code is available on Windows, macOS, and Linux. You can download the latest Windows installer here. We recommend using the stable build.\nChanging the Default Shell\nThe WSL2 shell can be chosen as the default VS Code terminal by pressing Ctrl + Shift + P and typing/choosing Terminal: Select Default Profile, then selecting zsh:\n\n\nRemote Extension\n\n\nInstall the Remote - WSL extension on VS Code.\n\n\nThis allows you to use WSL as your integrated development environment and will handle compatibility and pathing for you. Learn more.\n\n\nThis extension will also allow you to launch VS Code right from your WSL terminal by using the code command.\n\n\nIf I were inside the root directory of my",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "mpatibility and pathing for you. Learn more.\n\n\nThis extension will also allow you to launch VS Code right from your WSL terminal by using the code command.\n\n\nIf I were inside the root directory of my repository, I would use code . to launch the entire directory inside VS Code.\nTerminal windowcd my-projectcode .\n\n\nUseful Extensions\n\n\nPython - Includes many useful features, such as code completion with IntelliSense, debugging, unit testing support, etc.\n\n\nDocker - Makes it easy to create, manage, and debug containerized applications.\n\n\nError Lens - Improve highlighting of errors, warnings and other language diagnostics.\n\n\nindent-rainbow - Makes indentation easier to read.\n\n\nMDX - Language support for MDX\n\n\nvscode-icons - Icons for Visual Studio Code\n\n\nFluent Icons - Fluent product icons for Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nSet up a WSL development environment learn.microsoft",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "Visual Studio Code\n\n\nMaterial Theme Icons - Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.\n\n\nReferences\nSet up a WSL development environment learn.microsoft.comSet up a WSL development environment using best practices from this set-by-step guide. Learn how to run Ubuntu, Visual Studio Code or Visual Studio, Git, Windows Credential Manager, MongoDB, MySQL, Docker remote containers and more.Install WSL learn.microsoft.comInstall Windows Subsystem for Linux with the command, wsl --install. Use a Bash terminal on your Windows machine run by your preferred Linux distribution - Ubuntu, Debian, SUSE, Kali, Fedora, Pengwin, Alpine, and more are available.WSL2 Tutorial: The Complete Guide for Windows 10 & 11 — SitePoint sitepoint.comLearn how to install, set up, manage, and use a full Linux environment on Windows 10 & 11 PCs with Windows Subsystem for Linux 2 (WSL2). Complete WSL2 Tutorial.Git a Grip Series' Articles dev.toView Git a Grip Series' Arti",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "set up, manage, and use a full Linux environment on Windows 10 & 11 PCs with Windows Subsystem for Linux 2 (WSL2). Complete WSL2 Tutorial.Git a Grip Series' Articles dev.toView Git a Grip Series' Articles on DEV CommunityGitHub - git-ecosystem/git-credential-manager: Secure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. github.comSecure, cross-platform Git credential storage with authentication to GitHub, Azure Repos, and other popular Git hosting services. - git-ecosystem/git-credential-managerZSH and Oh-My-Zsh on Windows Subsystem for Linux (WSL) kevinprogramming.comIn this posting, I will show how to install ZSH and Oh-My-Zsh on Windows PC (WSL). This will be helpful if you want to setup a Linux development environment on Windows PC.\n\nI have already installed Ubuntu 20.04 on Windows Subsystem for Linux (WSL). Bash is the default shellSet up Node.js on WSL 2 learn.microsoft.comA guide to help you get your Nod",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "ronment on Windows PC.\n\nI have already installed Ubuntu 20.04 on Windows Subsystem for Linux (WSL). Bash is the default shellSet up Node.js on WSL 2 learn.microsoft.comA guide to help you get your Node.js development environment set up on Windows Subsystem for Linux (WSL).Installing Chocolatey chocolatey.orgChocolatey is software management automation for Windows that wraps installers, executables, zips, and scripts into compiled packages. Chocolatey integrates w/SCCM, Puppet, Chef, etc. Chocolatey is trusted by businesses to manage software deployments.Windows Terminal installation learn.microsoft.comLearn how to install and set up Windows Terminal.uv docs.astral.sh\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousMacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "ied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousMacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/data-science/environmnet-setup/windows/"
  },
  {
    "content": "Getting Started | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Getting Started       Environmnet Setup       MacOS    Windows            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Maximize Your Learning    On this page   Overview    Maximize Your Learning           Getting Started      Reading the docs is a great way to learn. Whether it’s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your",
    "source": "https://docs.chaicode.com/data-science/getting-started/"
  },
  {
    "content": "eos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don’t rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you’ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encount",
    "source": "https://docs.chaicode.com/data-science/getting-started/"
  },
  {
    "content": "r additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don’t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: H",
    "source": "https://docs.chaicode.com/data-science/getting-started/"
  },
  {
    "content": "ake the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025  Next MacOS    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/data-science/getting-started/"
  },
  {
    "content": "404 | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                               404 This page isn’t in our encyclopedia. Take me home.           \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/meta-data/"
  },
  {
    "content": "Metadata | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Frontmatter    Frontmatter fields     title (required)    description    author    slug    editUrl    head    tableOfContents    template    hero    banner    lastUpdated    prev    next    pagefind    draft    sidebar      Customize Frontmatter     extend      On this page   Overview    Frontmatter    Frontmatter fields     title (required)    description    author    slug    editUrl    head    tableOfContents    template    hero    banner    lastUpdated    prev    next    pagefind    d",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "ntmatter    Frontmatter fields     title (required)    description    author    slug    editUrl    head    tableOfContents    template    hero    banner    lastUpdated    prev    next    pagefind    draft    sidebar      Customize Frontmatter     extend             Metadata      Page metadata is a set of information that describes a page. It is used to provide information about the page to search engines and other tools. You can customize individual Markdown and MDX pages in Starlight by setting values in their frontmatter\nFrontmatter\nEvery documentation page needs frontmatter to define its metadata. Here’s a complete example:\nintro.mdx---title: Introduction to Machine Learningdescription: Learn the fundamentals of machine learning algorithms and applications.sidebar:  label: ML Introduction    # Optional: Custom sidebar label (defaults to title)  order: 2                  # Controls position in the sidebarauthor:  name: 'author name'  portfolio: 'https://author.info'lastUpdated: true",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "on    # Optional: Custom sidebar label (defaults to title)  order: 2                  # Controls position in the sidebarauthor:  name: 'author name'  portfolio: 'https://author.info'lastUpdated: true           # Shows last update timestamp---\nEvery page must include at least a title.\nFrontmatter fields\nThe following fields are available in page frontmatter:\ntitle (required)\ntype: string\nYou must provide a title for every page. This will be displayed at the top of the page, in browser tabs, and in page metadata.\ndescription\ntype: string\nThe page description is used for page metadata and will be picked up by search engines and in social media previews.\nauthor\ntype: { name: string; portfolio?: string }\nThe author property identifies who created the page and provides optional attribution through a portfolio link. When specified, author information is displayed in the page footer.\nsrc/content/docs/example.mdx---title: Authoring Pageauthor:  name: 'author name'  portfolio: 'https://auth.info",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "gh a portfolio link. When specified, author information is displayed in the page footer.\nsrc/content/docs/example.mdx---title: Authoring Pageauthor:  name: 'author name'  portfolio: 'https://auth.info'---\nMultiple Contributors:\nFor pages with multiple contributors, the ChaiDocs Team will determine the primary author based on contribution levels. Only one author can be listed per page.\nExample Display\nWhen properly configured, the author information appears in the page footer as:\n \nComplied by: Your Next Tech Partner\nslug\ntype: string\nOverride the slug of the page. See “Defining custom IDs” in the Astro docs for more details.\neditUrl\ntype: string | boolean\nOverrides the global editLink config. Set to false to disable the “Edit page” link for a specific page or provide an alternative URL where the content of this page is editable.\nhead\ntype: HeadConfig[]\nYou can add additional tags to your page’s  using the head frontmatter field. This means you can add custom styles, metadata or other t",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "re the content of this page is editable.\nhead\ntype: HeadConfig[]\nYou can add additional tags to your page’s  using the head frontmatter field. This means you can add custom styles, metadata or other tags to a single page.\nsrc/content/docs/example.mdx---title: About ushead:  # Use a custom  tag  - tag: title    content: Custom about title---\ntableOfContents\ntype: false | { minHeadingLevel?: number; maxHeadingLevel?: number; }\nCustomize the heading levels to be included or set to false to hide the table of contents on this page.\n       alpha.mdx     beta.mdx      ---title: Page with only H2s in the table of contentstableOfContents:  minHeadingLevel: 2  maxHeadingLevel: 2---  ---title: Page with no table of contentstableOfContents: false---    \ntemplate\ntype: 'doc' | 'splash'\ndefault: 'doc'\nSet the layout template for this page.\nPages use the 'doc' layout by default.\nSet to 'splash' to use a wider layout without any sidebars designed for landing pages.\nhero\ntype: HeroConfig\nAdd a hero com",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "et the layout template for this page.\nPages use the 'doc' layout by default.\nSet to 'splash' to use a wider layout without any sidebars designed for landing pages.\nhero\ntype: HeroConfig\nAdd a hero component to the top of this page. Works well with template: splash.\nFor example, this config shows some common options, including loading an image from your repository.\nsrc/content/docs/example.mdx---title: My Home Pagetemplate: splashhero:  title: 'My Project: Stellar Stuff Sooner'  tagline: Take your stuff to the moon and back in the blink of an eye.  image:    alt: A glittering, brightly colored logo    file: ~/assets/logo.png  actions:    - text: Tell me more      link: /getting-started/      icon: right-arrow    - text: View on GitHub      link: https://github.com/astronaut/my-project      icon: external      variant: minimal      attrs:        rel: me---\nYou can display different versions of the hero image in light and dark modes.\nsrc/content/docs/example.mdx---hero:  image:    alt: A",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "icon: external      variant: minimal      attrs:        rel: me---\nYou can display different versions of the hero image in light and dark modes.\nsrc/content/docs/example.mdx---hero:  image:    alt: A chai mascot.    dark: @/assets/chai-dark.png    light: @/assets/chai-light.png---\nHeroConfig\ninterface HeroConfig {  title?: string;  tagline?: string;  image?:    | {        // Relative path to an image in your repository.        file: string;        // Alt text to make the image accessible to assistive technology        alt?: string;      }    | {        // Relative path to an image in your repository to be used for dark mode.        dark: string;        // Relative path to an image in your repository to be used for light mode.        light: string;        // Alt text to make the image accessible to assistive technology        alt?: string;      }    | {        // Raw HTML to use in the image slot.        // Could be a custom `` tag or inline ``.        html: string;      };  actions?: A",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "sible to assistive technology        alt?: string;      }    | {        // Raw HTML to use in the image slot.        // Could be a custom `` tag or inline ``.        html: string;      };  actions?: Array<{    text: string;    link: string;    variant?: 'primary' | 'secondary' | 'minimal';    icon?: string;    attrs?: Record;  }>;}\nbanner\ntype: { content: string }\nDisplays an announcement banner at the top of this page.\nThe content value can include HTML for links or other content.\nFor example, this page displays a banner including a link to example.com.\nsrc/content/docs/example.mdx---title: Page with a bannerbanner:  content: |    New Cohort is Live!    Check it out---\nlastUpdated\ntype: Date | boolean\nIf a date is specified, it must be a valid YAML timestamp and will override the date stored in Git history for this page.\nsrc/content/docs/example.mdx---title: Page with a custom last update datelastUpdated: 2022-08-09---\nprev\ntype: boolean | string | { link?: string; label?: string }\nIf",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "red in Git history for this page.\nsrc/content/docs/example.mdx---title: Page with a custom last update datelastUpdated: 2022-08-09---\nprev\ntype: boolean | string | { link?: string; label?: string }\nIf a string is specified, the generated link text will be replaced and if an object is specified, both the link and the text will be overridden.\n       uno.mdx     dos.mdx     tres.mdx      ---# Hide the previous page linkprev: false---  ---# Override the previous page link textprev: Continue the tutorial---  ---# Override both the previous page link and textprev:  link: /unrelated-page/  label: Check out this other page---   \nnext\ntype: boolean | string | { link?: string; label?: string }\nSame as prev but for the next page link.\nsrc/content/docs/example.mdx---# Hide the next page linknext: false---\npagefind\ntype: boolean\ndefault: true\nSet whether this page should be included in the Pagefind search index. Set to false to exclude a page from search results:\nsrc/content/docs/example.mdx---# Hi",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "e---\npagefind\ntype: boolean\ndefault: true\nSet whether this page should be included in the Pagefind search index. Set to false to exclude a page from search results:\nsrc/content/docs/example.mdx---# Hide this page from the search indexpagefind: false---\ndraft\ntype: boolean\ndefault: false\nSet whether this page should be considered a draft and not be included in production builds. Set to true to mark a page as a draft and make it only visible during development.\nsrc/content/docs/example.mdx---# Exclude this page from production buildsdraft: true---\nBecause draft pages are not included in build output, you cannot add draft pages directly to your site sidebar config.\nsidebar\ntype: SidebarConfig\nControl how this page is displayed in the sidebar, when using an autogenerated link group.\nSidebarConfig\ninterface SidebarConfig {  label?: string;  order?: number;  hidden?: boolean;  badge?: string | BadgeConfig;  attrs?: Record;}\nlabel\ntype: string\ndefault: the page title\nSet the label for this pa",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "fig\ninterface SidebarConfig {  label?: string;  order?: number;  hidden?: boolean;  badge?: string | BadgeConfig;  attrs?: Record;}\nlabel\ntype: string\ndefault: the page title\nSet the label for this page in the sidebar when displayed in an autogenerated group of links.\nsrc/content/docs/example.mdx---title: About this projectsidebar:  label: About---\norder\ntype: number\nControl the order of this page when sorting an autogenerated group of links.\nLower numbers are displayed higher up in the link group.\nsrc/content/docs/example.mdx---title: Page to display firstsidebar:  order: 1---\nExample Scenario\nWhen using autogenerated link groups, the order property is essential for controlling how pages appear within a group. Consider this file structure:\nDirectorysrc/\nDirectorycontent/\nDirectorydocs/\nDirectoryweb-dev/\nDirectoryJavaScript/\nintro.mdxDirectoryTypeScript/\nintro.mdx\nTo display pages in this order:\n\nJavaScript\nTypeScript\n\nSet the order field in each page’s frontmatter:\n       Javascript/i",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "rectoryweb-dev/\nDirectoryJavaScript/\nintro.mdxDirectoryTypeScript/\nintro.mdx\nTo display pages in this order:\n\nJavaScript\nTypeScript\n\nSet the order field in each page’s frontmatter:\n       Javascript/intro.mdx     Typescript/intro.mdx      ---title: JavaScript IntroductionSidebar:  order: 1---  ---title: TypeScript IntroductionSidebar:  order: 2---   \nImportant Note - When adding new pages in the future, you may need to adjust the order values of existing pages to maintain the desired sequence.\nhidden\ntype: boolean\ndefault: false\nPrevents this page from being included in an autogenerated sidebar group.\nsrc/content/docs/example.mdx---title: Page to hide from autogenerated sidebarsidebar:  hidden: true---\nbadge\ntype: string | BadgeConfig\nAdd a badge to the page in the sidebar when displayed in an autogenerated group of links.\nWhen using a string, the badge will be displayed with a default accent color.\nsrc/content/docs/example.mdx---title: Page with a badgesidebar:  # Uses the default var",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "n an autogenerated group of links.\nWhen using a string, the badge will be displayed with a default accent color.\nsrc/content/docs/example.mdx---title: Page with a badgesidebar:  # Uses the default variant matching your site’s accent color  badge: New---\nBadgeConfig\ninterface BadgeConfig {  text: string;  variant?: 'note' | 'tip' | 'caution' | 'danger' | 'success' | 'default';  class?: string;}\nOptionally, pass a BadgeConfig object with text, variant, and class fields to customize the badge.\nsrc/content/docs/example.mdx---title: Page with a badgesidebar:  badge:    text: Experimental    variant: caution---\nattrs\ntype: Record\nHTML attributes to add to the page link in the sidebar when displayed in an autogenerated group of links.\nsrc/content/docs/example.mdx---title: Page opening in a new tabsidebar:  # Opens the page in a new tab  attrs:    target: _blank---\nCustomize Frontmatter\nThe frontmatter schema for ChaiDocs’s docs content collection is configured in src/content.config.ts using t",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "bsidebar:  # Opens the page in a new tab  attrs:    target: _blank---\nCustomize Frontmatter\nThe frontmatter schema for ChaiDocs’s docs content collection is configured in src/content.config.ts using the docsSchema() helper:\nsrc/content.config.tsimport { defineCollection } from 'astro:content';import { docsLoader, i18nLoader } from '@astrojs/starlight/loaders';import { docsSchema } from '@astrojs/starlight/schema';\nexport const collections = {  docs: defineCollection({ loader: docsLoader(), schema: docsSchema() }),};\nLearn more about content collection schemas in “Defining a collection schema” in the Astro docs.\ndocsSchema() takes the following options:\nextend\ntype: Zod schema or function that returns a Zod schema\ndefault: z.object({})\nExtend ChaiDocs’s schema with additional fields by setting extend in the docsSchema() options.\nThe value should be a Zod schema.\nIn the following example, we provide a stricter type for description to make it required and add a new optional category field",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "ing extend in the docsSchema() options.\nThe value should be a Zod schema.\nIn the following example, we provide a stricter type for description to make it required and add a new optional category field:\nsrc/content.config.tsimport { defineCollection, z } from 'astro:content';import { docsLoader } from '@astrojs/starlight/loaders';import { docsSchema } from '@astrojs/starlight/schema';\nexport const collections = {  docs: defineCollection({    loader: docsLoader(),    schema: docsSchema({      extend: z.object({        // Make a built-in field required instead of optional.        description: z.string(),        // Add a new field to the schema.        category: z.enum(['tutorial', 'guide', 'reference']).optional(),      }),    }),  }),};\nTo take advantage of the Astro image() helper, use a function that returns your schema extension:\nsrc/content.config.tsimport { defineCollection, z } from 'astro:content';import { docsLoader } from '@astrojs/starlight/loaders';import { docsSchema } from '",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "nction that returns your schema extension:\nsrc/content.config.tsimport { defineCollection, z } from 'astro:content';import { docsLoader } from '@astrojs/starlight/loaders';import { docsSchema } from '@astrojs/starlight/schema';\nexport const collections = {  docs: defineCollection({    loader: docsLoader(),    schema: docsSchema({      extend: ({ image }) => {        return z.object({          // Add a field that must resolve to a local image.          cover: image(),        });      },    }),  }),};\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousAuthoring ContentNext MDX Crash Course    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-metadata/"
  },
  {
    "content": "MDX for Beginners | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Markdown 101     Basic Syntax    Extended Syntax    Deviations from Markdown      JSX     Expressions    ESM    Deviations from JSX      Common MDX gotchas     Blank lines in JSX spans    GREATER THAN (>) seen as block quote      On this page   Overview    Markdown 101     Basic Syntax    Extended Syntax    Deviations from Markdown      JSX     Expressions    ESM    Deviations from JSX      Common MDX gotchas     Blank lines in JSX spans    GREATER THAN (>) seen as block quote",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "tax    Extended Syntax    Deviations from Markdown      JSX     Expressions    ESM    Deviations from JSX      Common MDX gotchas     Blank lines in JSX spans    GREATER THAN (>) seen as block quote             MDX for Beginners      The MDX syntax combines markdown with JSX. This gives us something along the lines of literate programming. It also gives us an odd mix of two languages: markdown is whitespace sensitive and forgiving (what you type may not exactly work but it won’t crash) whereas JavaScript is whitespace insensitive and unforgiving (it does crash on typos).\nThe crash course walks you through combination of these two worlds to create more engaging documentation, blog posts, or whatever you’re working on.\nTo write and enjoy MDX, you should be familiar with both markdown and JavaScript (specifically JSX).\nMarkdown 101\nMarkdown often feels more natural to type than HTML or JSX for common things like emphasis or headings. Following Markdown cheat sheet provides a quick overvie",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "aScript (specifically JSX).\nMarkdown 101\nMarkdown often feels more natural to type than HTML or JSX for common things like emphasis or headings. Following Markdown cheat sheet provides a quick overview of all the Markdown syntax elements.\nIt can’t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.\nBasic Syntax\nThese are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements.\nElementMarkdown SyntaxHeading# H1## H2### H3Bold**bold text**Italic*italicized text*Blockquote> blockquoteOrdered List1. First item2. Second item3. Third itemUnordered List- First item- Second item- Third itemCode`code`Horizontal Rule---Link[ChaiDocs](https://docs.chaicode.com)Image![chai mascot](chai.png)\n\nExtended Syntax\nThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\nElementMarkdo",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "cs.chaicode.com)Image![chai mascot](chai.png)\n\nExtended Syntax\nThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\nElementMarkdown SyntaxTable| Syntax      | Description || ----------- | ----------- || Header      | Title       || Paragraph   | Text        |Fenced Code Block```json{  \"firstName\": \"John\",  \"lastName\": \"Smith\",  \"age\": 25,}```FootnoteHere's a sentence with a footnote. [^1]\n[^1]: This is the footnote.Heading ID### My Great Heading {#custom-id}Definition Listterm: definitionStrikethrough~~The world is flat.~~Task List- [x] Write the press release- [ ] Update the website- [ ] Contact the mediaEmoji\n(see also Copying and Pasting Emoji)That is so funny! :joy:SubscriptH~2~OSuperscriptX^2^\nDeviations from Markdown\nMDX adds constructs to Markdown but also prohibits certain normal Markdown\nconstructs.\nHTML\nWhether block or inline, HTML in Markdown is not supported.\nCharacter data, processing instructions, dec",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "own\nMDX adds constructs to Markdown but also prohibits certain normal Markdown\nconstructs.\nHTML\nWhether block or inline, HTML in Markdown is not supported.\nCharacter data, processing instructions, declarations, and comments are not\nsupported at all.\nInstead of HTML elements, use JSX elements.\nIncorrect:\n# Hello, world!\nCorrect:\n# Hello, world!\nIndented code\nIndentation to create code blocks is not supported.\nInstead, use fenced code blocks.\nThe reason for this change is so that elements can be indented.\nIncorrect:\n    console.log(1)\nCorrect:\n```jsconsole.log(1)```\nAutolinks\nAutolinks are not supported. Instead, use links or references.\nThe reason for this change is because whether something is an element (whether\nHTML or JSX) or an autolink is ambiguous (Markdown normally treats ,\n, or  as links).\nIncorrect:\nSee  for more information\nCorrect:\nSee [example.com](https://example.com) for more information.\nErrors\nWhereas all Markdown is valid, incorrect MDX will crash.\nJSX\nMore practically",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "links).\nIncorrect:\nSee  for more information\nCorrect:\nSee [example.com](https://example.com) for more information.\nErrors\nWhereas all Markdown is valid, incorrect MDX will crash.\nJSX\nMore practically MDX can be explained as a format that combines markdown with JSX and looks as follows:\n# Hello, world!\n  > Some notable things in a block quote!\nThe heading and block quote are markdown, while those HTML-like tags are JSX. Markdown often feels more natural to type than HTML or JSX for common things like emphasis or headings. JSX is an extension to JavaScript that looks like HTML but makes it convenient to use components (reusable things).\nThis example uses className on the . That’s because it was written for React and React expects classes that way. Other frameworks, such as Vue and Preact, expect classes to be defined differently, so note that there are some differences in how JSX has to be authored depending on what tools it’s used with.\nExpressions\nMDX also supports JavaScript expressi",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "xpect classes to be defined differently, so note that there are some differences in how JSX has to be authored depending on what tools it’s used with.\nExpressions\nMDX also supports JavaScript expressions inside curly braces:\nTwo 🍰 is: {Math.PI * 2}\nExpressions can contain whole JavaScript programs as long as they’re (wrapped in) an expression that evaluates to something that can be rendered. You can use an IIFE like so:\n{(() =>  {  const guess = Math.random()\n  return guess > 0.5;})()}\nExpressions can be empty or contain just a comment:\n{/* A comment! */}\nESM\nMDX supports import and export statements from JavaScript as well. These ESM features can be used within MDX to define things:\nimport {Chart} from './chart.ts'import population from './population.ts'export const pi = 3.14\n\nDeviations from JSX\nMDX removes certain constructs from JSX, because JSX is typically mixed with\nJavaScript whereas MDX is usable without it.\nComments\nJavaScript comments in JSX are not supported.\nIncorrect:\n\nCo",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "from JSX\nMDX removes certain constructs from JSX, because JSX is typically mixed with\nJavaScript whereas MDX is usable without it.\nComments\nJavaScript comments in JSX are not supported.\nIncorrect:\n\nCorrect:\n\nElement or fragment attribute values\nJSX elements or JSX fragments as attribute values are not supported. The reason for this change is that it would be confusing whether Markdown would\nwork.\nIncorrect:\nVenus />Pluto />\nCorrect:\n\nCommon MDX gotchas\nMarkdown first looks for blocks (such as a heading) and only later looks for\nspans (such as emphasis) in those blocks.\nThis becomes a problem typically in the two cases listed below.\nHowever, as MDX has parse errors, parsing will crash, and an error will be\npresented.\nBlank lines in JSX spans\nIncorrect:\nThe plot for the movie was, wait for it…\n…that she didn’t die!\nCorrect:\nThe plot for the movie was, wait for it……that she didn’t die!\nGREATER THAN (>) seen as block quote\nIncorrect:\nHere’s a cute photo of my cat: \nCorrect:\nHere’s a cute p",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "t…\n…that she didn’t die!\nCorrect:\nThe plot for the movie was, wait for it……that she didn’t die!\nGREATER THAN (>) seen as block quote\nIncorrect:\nHere’s a cute photo of my cat: \nCorrect:\nHere’s a cute photo of my cat: \nOr as a block (GREATER THAN (>) is fine in JSX blocks):\nHere’s a cute photo of my cat:\n\nNow that you’re familiar with Markdown and JSX (MDX), let’s see it in action in our component library.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousPage MetadataNext Components    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course/"
  },
  {
    "content": "Assets | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Asset Structure    Best Practices    On this page   Overview    Asset Structure    Best Practices           Assets      Assets include images, diagrams, videos, and other files you want to include in your documentation. Proper asset management becomes increasingly important as your documentation grows in size and complexity.\nAsset Structure\nAll documentation assets should be stored in the src/assets/docs directory following a structured organization pattern.\n\n\nCreate a folder for each trac",
    "source": "https://docs.chaicode.com/contribute/starter-kit/managing-assets/"
  },
  {
    "content": "on grows in size and complexity.\nAsset Structure\nAll documentation assets should be stored in the src/assets/docs directory following a structured organization pattern.\n\n\nCreate a folder for each track of your documentation in the src/assets/docs folder.\n\n\nCreate a folder for each section in your documentation.\n\n\nStore all assets related to a section in a folder.\n\n\nFor example, if you need to include assets in react section of web-dev docs, create a folder called react in the src/assets/docs/wed-dev folder and store all assets related to React in this folder.\nFinal structure:\nDirectorysrc/\nDirectoryassets/\nDirectorybranding/\nchai.svgchaidocs.pngDirectorydocs/\nDirectoryweb-dev/\nDirectoryjavascript/…Directoryreact/\nreact-dom.svgDirectorywindows/\nfile-explorer.png…\nBest Practices\n\nUse meaningful filenames that clearly indicate the content\nKeep file sizes optimized for web (compress images when possible)\nUse SVG format for diagrams and illustrations when available\nInclude alt text when ref",
    "source": "https://docs.chaicode.com/contribute/starter-kit/managing-assets/"
  },
  {
    "content": "ful filenames that clearly indicate the content\nKeep file sizes optimized for web (compress images when possible)\nUse SVG format for diagrams and illustrations when available\nInclude alt text when referencing images in your documentation\nMaintain consistent naming conventions across your asset library\n\nThis structured approach ensures ChaiDocs remains maintainable, organized, and easy to navigate as it grows.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousProject StructureNext Adding New Content    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/managing-assets/"
  },
  {
    "content": "All Set | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    On this page   Overview           All Set      Congratulations! You have successfully completed the Starter-Kit. Now you can start working on ChaiDocs. If you need any help or clarification, feel free to reach out through our   #ChaiDocs communication channel in Discord.\nRemember, this is just the beginning. We look forward to your contributions!\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Anirudh Jwal",
    "source": "https://docs.chaicode.com/contribute/starter-kit/next-step/"
  },
  {
    "content": "t the beginning. We look forward to your contributions!\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Anirudh Jwala Last updated: Apr 13, 2025   PreviousContributing Workflow    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/next-step/"
  },
  {
    "content": "Commits & Pull Requests | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Commit Messages    Pull Requests    On this page   Overview    Commit Messages    Pull Requests           Commits & Pull Requests      Before opening a pull request let’s discuss the commit messages and pull requests workflow.\nCommit Messages\nWe follow the Conventional Commits standard for commit messages.\n\nFormat: (): \nType: Describes the type of change (e.g., feat, fix, docs, style, refactor, test, chore).\nSubject: A concise description of the change.\n\nExamples:\n\nfix: im",
    "source": "https://docs.chaicode.com/contribute/starter-kit/contributing-workflow/"
  },
  {
    "content": "standard for commit messages.\n\nFormat: (): \nType: Describes the type of change (e.g., feat, fix, docs, style, refactor, test, chore).\nSubject: A concise description of the change.\n\nExamples:\n\nfix: improve ui on mobile view\ndocs(devops): add Docker installation guide\n\nGuidelines:\n\nPresent Tense: Use the present tense for describing changes (e.g., “add JavaScript docs” instead of “added JavaScript docs”).\nImperative Mood: Use the imperative mood (e.g., “move cursor to…” instead of “moves cursor to…”).\nLowercase: Write all commit messages in lowercase letters.\n\nPull Requests\nChaiDocs use the GitHub flow as main versioning workflow.\n\nFork the repository\nCreate a new branch for each feature, fix or improvement\nSend a pull request from each feature branch to the main branch\n\nIt is very important to separate new features or improvements into separate feature branches, and to send a pull request for each branch.\nThis allow to review and pull in new features or improvements individually.\nStart",
    "source": "https://docs.chaicode.com/contribute/starter-kit/contributing-workflow/"
  },
  {
    "content": "t to separate new features or improvements into separate feature branches, and to send a pull request for each branch.\nThis allow to review and pull in new features or improvements individually.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousComponentsNext Congratulations    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/contributing-workflow/"
  },
  {
    "content": "Components Library | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Using a component in MDX    Built-in components    Compatibility with ChaiDocs’s styles    Component props    Cards     Import    Usage    Group cards     Props      Link Cards     Import    Usage    Add a link description    Group link cards     Props      Card grids     Import    Usage     Props      Images     Import    Usage     Props      Asides     Import    Usage     Props      Badges     Import    Usage     Props      File Tree     Import    Usage     Props      Icons",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "Usage     Props      Images     Import    Usage     Props      Asides     Import    Usage     Props      Badges     Import    Usage     Props      File Tree     Import    Usage     Props      Icons     Import    Usage    Customize icons     Props    StarlightIcon type    All Icons      Link Buttons     Import    Usage     Props      Steps     Import    Usage     Props      Code     Import    Usage    Display imported code     Props      Tabs     Import    Usage     Props     Props      Code Tabs     Import    Usage     Props     Props      Code Package Managers     Import    Usage     Props      YouTube     Import    Usage     Props      Link Preview     Import    Usage    Limitations     Props      On this page   Overview    Using a component in MDX    Built-in components    Compatibility with ChaiDocs’s styles    Component props    Cards     Import    Usage    Group cards     Props      Link Cards     Import    Usage    Add a link description    Group link cards     Props      Card",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "y with ChaiDocs’s styles    Component props    Cards     Import    Usage    Group cards     Props      Link Cards     Import    Usage    Add a link description    Group link cards     Props      Card grids     Import    Usage     Props      Images     Import    Usage     Props      Asides     Import    Usage     Props      Badges     Import    Usage     Props      File Tree     Import    Usage     Props      Icons     Import    Usage    Customize icons     Props    StarlightIcon type    All Icons      Link Buttons     Import    Usage     Props      Steps     Import    Usage     Props      Code     Import    Usage    Display imported code     Props      Tabs     Import    Usage     Props     Props      Code Tabs     Import    Usage     Props     Props      Code Package Managers     Import    Usage     Props      YouTube     Import    Usage     Props      Link Preview     Import    Usage    Limitations     Props             Components Library      Components let you easily reuse a piece",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "Usage     Props      YouTube     Import    Usage     Props      Link Preview     Import    Usage    Limitations     Props             Components Library      Components let you easily reuse a piece of UI or styling consistently.\nExamples might include a link card or a YouTube embed.\nChaiDocs supports the use of components in MDX files and provides some common components for you to use.\nLearn more about building components in the Astro Docs.\nUsing a component in MDX\nYou can use a component by importing it into your MDX file and then rendering it as a JSX tag.\nThese look like HTML tags but start with an uppercase letter matching the name in your import statement:\nsrc/content/docs/example.mdx---title: Welcome to my docs---\nimport { Icon } from '@astrojs/starlight/components';import AboutUs from '@/components/branding/about-us.astro';\n\nComponents can also contain **nested content**.\nBecause ChaiDocs is powered by Astro, you can add support for components built with any supported UI frame",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "from '@/components/branding/about-us.astro';\n\nComponents can also contain **nested content**.\nBecause ChaiDocs is powered by Astro, you can add support for components built with any supported UI framework (React, Preact, Svelte, Vue, Solid, and Alpine) in your MDX files.\nLearn more about using components in MDX in the Astro docs.\nBuilt-in components\nChaiDocs provides built-in components for common documentation use cases.\nThese components are available from the @astrojs/starlight/components package in MDX files.\nSee the sidebar for a list of available components and how to use them.\nCompatibility with ChaiDocs’s styles\nChaiDocs applies default styling to your Markdown content, for example, adding margin between elements.\nIf these styles conflict with your component’s appearance, set the not-content class on your component to disable them.\nsrc/components/Example.astro Not impacted by ChaiDocs’s default content styling.\nComponent props\nUse the ComponentProps type from astro/types to refe",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "t-content class on your component to disable them.\nsrc/components/Example.astro Not impacted by ChaiDocs’s default content styling.\nComponent props\nUse the ComponentProps type from astro/types to reference the Props accepted by a component even if they are not exported by the component itself.\nThis can be helpful when wrapping or extending an existing component.\nThe following example uses ComponentProps to get the type of the props accepted by ChaiDocs’s built-in Badge component:\nsrc/components/Example.astro---import type { ComponentProps } from 'astro/types';import { Badge } from '@astrojs/starlight/components';\ntype BadgeProps = ComponentProps;---\nCards\nTo display content in a box matching ChaiDocs’s styles, use the  component.\n  Preview    Moons  Io, Europa, Ganymede    \nImport\nimport { Card } from '@astrojs/starlight/components';\nUsage\nDisplay a card using the  component and provide a title for the card.\n import { Card } from '@astrojs/starlight/components';\nInteresting content you",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "Card } from '@astrojs/starlight/components';\nUsage\nDisplay a card using the  component and provide a title for the card.\n import { Card } from '@astrojs/starlight/components';\nInteresting content you want to highlight.  Preview   Check this out  Interesting content you want to highlight.    \nAdd icons to cards\nInclude an icon in a card using the icon attribute set to the name of one of ChaiDocs’s built-in icons.\n   import { Card } from '@astrojs/starlight/components';\n      Sirius, Vega, Betelgeuse    Preview    Stars  Sirius, Vega, Betelgeuse    \nGroup cards\nDisplay multiple cards side-by-side when there’s enough space by grouping them using the  component.\nSee the “Group cards” guide for an example.\n Props\nImplementation: Card.astro\nThe  component accepts the following props:\ntitle\nrequired\ntype: string\nThe title of the card to display.\nicon\ntype: string\nA card can include an icon attribute set to the name of one of ChaiDocs’s built-in icons.\n\nLink Cards\nTo display links to differen",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "ired\ntype: string\nThe title of the card to display.\nicon\ntype: string\nA card can include an icon attribute set to the name of one of ChaiDocs’s built-in icons.\n\nLink Cards\nTo display links to different pages prominently, use the  component.\n  Preview    ChaiCode  Learn more about ChaiCode.      \nImport\nimport { LinkCard } from '@astrojs/starlight/components';\nUsage\nDisplay a link prominently using the  component.\nEach  requires a title and an href attribute.\n import { LinkCard } from '@astrojs/starlight/components';\n  Preview    Authoring Markdown       \nAdd a link description\nAdd a short description to a link card using the description attribute.\n import { LinkCard } from '@astrojs/starlight/components';\n  Preview    Contribute  Step-by-step guide to start contributing to ChaiDocs.      \nGroup link cards\nDisplay multiple link cards side-by-side when there’s enough space by grouping them using the  component.\nSee the “Group link cards” guide for an example.\n Props\nImplementation: LinkC",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "Group link cards\nDisplay multiple link cards side-by-side when there’s enough space by grouping them using the  component.\nSee the “Group link cards” guide for an example.\n Props\nImplementation: LinkCard.astro\nThe  component accepts the following props, as well as all other  element attributes:\ntitle\nrequired\ntype: string\nThe title of the link card to display.\nhref\nrequired\ntype: string\nThe URL to link to when the card is interacted with.\ndescription\ntype: string\nAn optional description to display below the title.\n\nCard grids\nTo wrap multiple  or  components in a grid, use the component.\n  Preview    Stars  Sirius, Vega, Betelgeuse     Moons  Io, Europa, Ganymede     \nImport\nimport { CardGrid } from '@astrojs/starlight/components';\nUsage\nGroup cards\nDisplay multiple  components side-by-side when there’s enough space by grouping them using the  component.\n import { Card, CardGrid } from '@astrojs/starlight/components';\n     Interesting content you want to highlight.       More informati",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "e when there’s enough space by grouping them using the  component.\n import { Card, CardGrid } from '@astrojs/starlight/components';\n     Interesting content you want to highlight.       More information you want to share.    Preview    Check this out  Interesting content you want to highlight.     Other feature  More information you want to share.     \nGroup link cards\nDisplay multiple  components side-by-side when there’s enough space by grouping them using the  component.\n import { LinkCard, CardGrid } from '@astrojs/starlight/components';\n    Preview    Authoring Markdown        Components        \nStagger cards\nShift the second column of the grid vertically to add visual interest by adding the stagger attribute to the  component.\nThis attribute is useful on your home page to display your project’s key features.\n import { Card, CardGrid } from '@astrojs/starlight/components';\n     Interesting content you want to highlight.       More information you want to share.    Preview    Check",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "r project’s key features.\n import { Card, CardGrid } from '@astrojs/starlight/components';\n     Interesting content you want to highlight.       More information you want to share.    Preview    Check this out  Interesting content you want to highlight.     Other feature  More information you want to share.     \n Props\nImplementation: CardGrid.astro\nThe  component accepts the following props:\nstagger\ntype: boolean\nDefines whether to stagger the cards in the grid or not.\n\nImages\nTo display optimized images use the  component.\n  Preview   \nImport\nimport { Image } from 'astro:assets';\nUsage\nDisplay an image using the  component. The style prop can be used to customize the image appearance. For consistent styling across documentation, we recommend using:\n\nmargin: 1.5rem 0 to add top and bottom spacing\nmargin-inline: auto to center images horizontally\nborder-radius: 10px to add rounded corners\n\nThese styles help maintain a uniform look throughout the documentation.\n import { Image } from 'a",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "spacing\nmargin-inline: auto to center images horizontally\nborder-radius: 10px to add rounded corners\n\nThese styles help maintain a uniform look throughout the documentation.\n import { Image } from 'astro:assets';import chaicode from '@/assets/branding/brought-to-you-by-white.png';\n  Preview   \nUse an image as a link\nTo make an image a link, wrap the  component in an  element and provide the href attribute.\n import { Image } from 'astro:assets';import udemy from '@/assets/branding/udemy.jpeg';\n   Preview   \n Props\nImplementation: Image.astro\nThe  component accepts all properties accepted by the HTML  tag in addition to the properties described below:\nsrc (required)\nType: ImageMetadata | string | Promise<{ default: ImageMetadata }>\nThe format of the src value of your image file depends on where your image file is located:\nimport { Image } from 'astro:assets';import myImportedImage from '../assets/my-local-image.png';\n\n\n\nImages in the public/ folder -  use the image’s file path relative",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "here your image file is located:\nimport { Image } from 'astro:assets';import myImportedImage from '../assets/my-local-image.png';\n\n\n\nImages in the public/ folder -  use the image’s file path relative to the public folder:\nimport { Image } from 'astro:assets';\n\n\n\nRemote images - use the image’s full URL as the property value:\nimport { Image } from 'astro:assets';\n\n\n\nalt (required)\nType: string\nUse the required alt attribute to provide a string of [descriptive alt text]( for images.\nIf an image is merely decorative (i.e. doesn’t contribute to the understanding of the page), set alt=\"\" so that screen readers and other assistive technologies know to ignore the image.\nwidth and height (required for images in public/)\nType: number | undefined\nThese properties define the dimensions to use for the image.\nWhen using images in their original aspect ratio, width and height are optional. These dimensions can be automatically inferred from image files located in src/. For remote images, add the inf",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "image.\nWhen using images in their original aspect ratio, width and height are optional. These dimensions can be automatically inferred from image files located in src/. For remote images, add the inferSize attribute set to true on the .\nHowever, both of these properties are required for images stored in your public/ folder as ChaiDocs is unable to analyze these files.\nquality\nType: ImageQuality | undefined\nquality is an optional property that can either be:\n\na preset (low, mid, high, max) that is automatically normalized between formats.\na number from 0 to 100 (interpreted differently between formats).\n\ninferSize\nType: boolean\nAllows you to set the original width and height of a remote image automatically.\nBy default, this value is set to false and you must manually specify both dimensions for your remote image.\nAdd inferSize to the  component to infer these values from the image content when fetched. This is helpful if you don’t know the dimensions of the remote image, or if they mig",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "s for your remote image.\nAdd inferSize to the  component to infer these values from the image content when fetched. This is helpful if you don’t know the dimensions of the remote image, or if they might change:\nimport { Image } from 'astro:assets';import cat from '@/assets/cat.png';\n\n\nAsides\nTo display secondary information alongside a page’s main content, use the  component.\n  Preview    Note   Include nonessential, supplementary information in an .    \nImport\nimport { Aside } from '@astrojs/starlight/components';\nUsage\nDisplay an aside (also known as “admonitions” or “callouts”) using the  component.\nAn  can have an optional type attribute, which controls the aside’s color, icon, and default title.\n import { Aside } from '@astrojs/starlight/components';\nSome content in an aside.\nSome cautionary content.\nOther content is also supported in asides.\n```js// A code snippet, for example.```\nDo not give your password to anyone.  Preview    Note   Some content in an aside.     Caution   Some",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "tionary content.\nOther content is also supported in asides.\n```js// A code snippet, for example.```\nDo not give your password to anyone.  Preview    Note   Some content in an aside.     Caution   Some cautionary content.     Tip   Other content is also supported in asides.// A code snippet, for example.     Danger   Do not give your password to anyone.    \nChaiDocs also provides a custom syntax for rendering asides in Markdown and MDX as an alternative to the  component.\nSee the “Authoring Content” guide for details of the custom syntax.\nUse custom titles\nOverride the default aside titles by using the title attribute.\n import { Aside } from '@astrojs/starlight/components';\n  A warning aside *with* a custom title.  Preview    Watch out!   A warning aside with a custom title.    \n Props\nImplementation: Aside.astro\nThe  component accepts the following props:\ntype\ntype: 'note' | 'tip' | 'caution' | 'danger' \ndefault: 'note'\nThe type of aside to display:\n\nnote asides (the default) are blue",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "ementation: Aside.astro\nThe  component accepts the following props:\ntype\ntype: 'note' | 'tip' | 'caution' | 'danger' \ndefault: 'note'\nThe type of aside to display:\n\nnote asides (the default) are blue and display an information icon.\ntip asides are purple and display a rocket icon.\ncaution asides are yellow and display a triangular warning icon.\ndanger asides are red and display an octagonal warning icon.\n\ntitle\ntype: string\nThe title of the aside to display.\nIf title is not set, the default title for the current aside type will be used.\n\nBadges\nTo display small pieces of information, such as a status or category, use the  component.\n  Preview New   \nImport\nimport { Badge } from '@astrojs/starlight/components';\nUsage\nDisplay a badge using the  component and pass the content you want to display to the text attribute of the  component.\nBy default, the badge will use the theme accent color of your site.\nTo use a built-in badge color, set the variant attribute to one of the supported values",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "lay to the text attribute of the  component.\nBy default, the badge will use the theme accent color of your site.\nTo use a built-in badge color, set the variant attribute to one of the supported values.\n import { Badge } from '@astrojs/starlight/components';\n- - - - -   Preview \n\nNote\n\n\nSuccess\n\n\nTip\n\n\nCaution\n\n\nDanger\n\n  \nUse different sizes\nUse the size attribute to control the size of the badge text.\n import { Badge } from '@astrojs/starlight/components';\n- - -   Preview \n\nNew\n\n\nNew and improved\n\n\nNew, improved, and bigger\n\n  \nCustomize badges\nCustomize badges by using any other  attributes such as class or style with custom CSS.\n import { Badge } from '@astrojs/starlight/components';\n  Preview Custom   \n Props\nImplementation: Badge.astro\nThe  component accepts the following props and also any other  attributes:\ntext\nrequired\ntype: string\nThe text content to display in the badge.\nvariant\ntype: 'note' | 'danger' | 'success' | 'caution' | 'tip' | 'default' \ndefault: 'default'\nThe badge",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "so any other  attributes:\ntext\nrequired\ntype: string\nThe text content to display in the badge.\nvariant\ntype: 'note' | 'danger' | 'success' | 'caution' | 'tip' | 'default' \ndefault: 'default'\nThe badge color variant to use: note (blue), tip (purple), danger (red), caution (orange), success (green), or default (theme accent color).\nsize\ntype: 'small' | 'medium' | 'large'\nDefines the size of the badge to display.\n\nFile Tree\nTo display the structure of a directory with file icons and collapsible sub-directories, use the  component.\n  Preview astro.config.mjs an important filepackage.jsonREADME.mdDirectorysrc\nDirectorycomponents\nHeader.astro…Directorypages/…   \nImport\nimport { FileTree } from '@astrojs/starlight/components';\nUsage\nDisplay a file tree with file icons and collapsible sub-directories using the  component.\nSpecify the structure of your files and directories with an unordered Markdown list inside .\nCreate a sub-directory using a nested list or add a / to the end of a list item t",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "ies using the  component.\nSpecify the structure of your files and directories with an unordered Markdown list inside .\nCreate a sub-directory using a nested list or add a / to the end of a list item to render it as a directory without specific content.\n import { FileTree } from '@astrojs/starlight/components';\n\n- astro.config.mjs- package.json- src  - components    - Header.astro    - Title.astro  - pages/\n  Preview astro.config.mjspackage.jsonDirectorysrc\nDirectorycomponents\nHeader.astroTitle.astroDirectorypages/…   \nHighlight entries\nMake a file or directory stand out by making its name bold, e.g. **README.md**.\n import { FileTree } from '@astrojs/starlight/components';\n\n- src  - components    - **Header.astro**    - Title.astro\n  Preview Directorysrc\nDirectorycomponents\nHeader.astroTitle.astro   \nAdd comments\nAdd a comment to a file or directory by adding more text after the name.\nInline Markdown formatting such as bold and italics is supported in comments.\n import { FileTree } from",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "e.astro   \nAdd comments\nAdd a comment to a file or directory by adding more text after the name.\nInline Markdown formatting such as bold and italics is supported in comments.\n import { FileTree } from '@astrojs/starlight/components';\n\n- src  - components    - Header.astro an **important** file    - Title.astro\n  Preview Directorysrc\nDirectorycomponents\nHeader.astro an important fileTitle.astro   \nAdd placeholders\nAdd placeholder files and directories by using either ... or … as the name.\nThis can be useful to indicate to a reader that a folder is expected to contain more items without specifying them all explicitly.\n import { FileTree } from '@astrojs/starlight/components';\n\n- src  - components    - Header.astro    - …\n  Preview Directorysrc\nDirectorycomponents\nHeader.astro…   \n Props\nImplementation: FileTree.astro\nThe  component does not accept any props.\n\nIcons\nTo display icons from ChaiDocs’s built-in icon set, use the  component.\n  Preview    \nImport\nimport { Icon } from '@astrojs/",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "ementation: FileTree.astro\nThe  component does not accept any props.\n\nIcons\nTo display icons from ChaiDocs’s built-in icon set, use the  component.\n  Preview    \nImport\nimport { Icon } from '@astrojs/starlight/components';\nUsage\nDisplay an icon using the  component.\nAn icon requires a name set to one of ChaiDocs’s built-in icons and can optionally include a label to provide context for screen readers.\n import { Icon } from '@astrojs/starlight/components';\n  Preview     \nCustomize icons\nThe size and color attributes can be used to adjust the icon’s appearance using CSS units and color values.\nThe class attribute can be used to add custom CSS classes to the icon.\n import { Icon } from '@astrojs/starlight/components';\n  Preview     \n Props\nImplementation: Icon.astro\nThe  component accepts the following props:\nname\nrequired\ntype: StarlightIcon\nThe name of the icon to display set to one of ChaiDocs’s built-in icons.\nlabel\ntype: string\nAn optional label to provide context for assistive techn",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "following props:\nname\nrequired\ntype: StarlightIcon\nThe name of the icon to display set to one of ChaiDocs’s built-in icons.\nlabel\ntype: string\nAn optional label to provide context for assistive technologies, such as screen readers.\nWhen label is not set, the icon will be completely hidden from assistive technologies.\nIn this case, make sure the context is still understandable without the icon.\nFor example, a link containing only the icon must include the label attribute in order to be accessible, but if a link contains text and the icon is purely decorative, omitting the label may make sense.\nsize\ntype: string\nThe size of the icon using CSS units.\ncolor\ntype: string\nThe color of the icon using a CSS color value.\nclass\ntype: string\nCustom CSS classes to add to the icon.\nStarlightIcon type\nUse the StarlightIcon TypeScript type to reference the names of ChaiDocs’s built-in icons.\nsrc/icon.tsimport type { StarlightIcon } from '@astrojs/starlight/types';\nconst getIconLabel = (icon: Starlig",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "Use the StarlightIcon TypeScript type to reference the names of ChaiDocs’s built-in icons.\nsrc/icon.tsimport type { StarlightIcon } from '@astrojs/starlight/types';\nconst getIconLabel = (icon: StarlightIcon) => {  // …}\nAll Icons\nA list of all available icons is shown below with their associated names. Click an icon to copy its name to your clipboard.\n   up-caret   down-caret   right-caret   left-caret   up-arrow   down-arrow   right-arrow   left-arrow   bars   translate   pencil   pen   document   add-document   setting   external   download   cloud-download   moon   sun   laptop   open-book   information   magnifier   forward-slash   close   error   warning   approve-check-circle   approve-check   rocket   star   puzzle   list-format   random   comment   comment-alt   heart   github   gitlab   bitbucket   codePen   farcaster   discord   gitter   twitter   x.com   mastodon   codeberg   youtube   threads   linkedin   twitch   azureDevOps   microsoftTeams   instagram   stackOverflow   t",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "tlab   bitbucket   codePen   farcaster   discord   gitter   twitter   x.com   mastodon   codeberg   youtube   threads   linkedin   twitch   azureDevOps   microsoftTeams   instagram   stackOverflow   telegram   rss   facebook   email   phone   reddit   patreon   signal   slack   matrix   hackerOne   openCollective   blueSky   discourse   zulip   pinterest   tiktok   astro   alpine   pnpm   biome   bun   mdx   apple   linux   homebrew   nix   starlight   pkl   node   cloudflare   vercel   netlify   deno   jsr   nostr   backstage   confluence   jira   storybook   vscode   jetbrains   zed   vim   figma   sketch   npm   sourcehut   substack   seti:folder   seti:bsl   seti:mdo   seti:salesforce   seti:asm   seti:bicep   seti:bazel   seti:c   seti:c-sharp   seti:html   seti:cpp   seti:clojure   seti:coldfusion   seti:config   seti:crystal   seti:crystal_embedded   seti:json   seti:css   seti:csv   seti:xls   seti:cu   seti:cake   seti:cake_php   seti:d   seti:word   seti:elixir   seti:elixir_",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "eti:coldfusion   seti:config   seti:crystal   seti:crystal_embedded   seti:json   seti:css   seti:csv   seti:xls   seti:cu   seti:cake   seti:cake_php   seti:d   seti:word   seti:elixir   seti:elixir_script   seti:hex   seti:elm   seti:favicon   seti:f-sharp   seti:git   seti:go   seti:godot   seti:gradle   seti:grails   seti:graphql   seti:hacklang   seti:haml   seti:mustache   seti:haskell   seti:haxe   seti:jade   seti:java   seti:javascript   seti:jinja   seti:julia   seti:karma   seti:kotlin   seti:dart   seti:liquid   seti:livescript   seti:lua   seti:markdown   seti:argdown   seti:info   seti:clock   seti:maven   seti:nim   seti:github   seti:notebook   seti:nunjucks   seti:npm   seti:ocaml   seti:odata   seti:perl   seti:php   seti:pipeline   seti:pddl   seti:plan   seti:happenings   seti:powershell   seti:prisma   seti:pug   seti:puppet   seti:purescript   seti:python   seti:react   seti:rescript   seti:R   seti:ruby   seti:rust   seti:sass   seti:spring   seti:slim   seti:sma",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "seti:powershell   seti:prisma   seti:pug   seti:puppet   seti:purescript   seti:python   seti:react   seti:rescript   seti:R   seti:ruby   seti:rust   seti:sass   seti:spring   seti:slim   seti:smarty   seti:sbt   seti:scala   seti:ethereum   seti:stylus   seti:svelte   seti:swift   seti:db   seti:terraform   seti:tex   seti:default   seti:twig   seti:typescript   seti:tsconfig   seti:vala   seti:vite   seti:vue   seti:wasm   seti:wat   seti:xml   seti:yml   seti:prolog   seti:zig   seti:zip   seti:wgt   seti:illustrator   seti:photoshop   seti:pdf   seti:font   seti:image   seti:svg   seti:sublime   seti:code-search   seti:shell   seti:video   seti:audio   seti:windows   seti:jenkins   seti:babel   seti:bower   seti:docker   seti:code-climate   seti:eslint   seti:firebase   seti:firefox   seti:gitlab   seti:grunt   seti:gulp   seti:ionic   seti:platformio   seti:rollup   seti:stylelint   seti:yarn   seti:webpack   seti:lock   seti:license   seti:makefile   seti:heroku   seti:todo",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "x   seti:gitlab   seti:grunt   seti:gulp   seti:ionic   seti:platformio   seti:rollup   seti:stylelint   seti:yarn   seti:webpack   seti:lock   seti:license   seti:makefile   seti:heroku   seti:todo   seti:ignored   \n\nLink Buttons\nTo display visually distinct call-to-action links, use the  component.\n  Preview  Explore Tracks    \nImport\nimport { LinkButton } from '@astrojs/starlight/components';\nUsage\nUse the  component to display a visually distinct call-to-action link.\nA link button is useful for directing users to the most relevant or actionable content and is often used on landing pages.\nA  requires an href attribute.\nOptionally, customize the appearance of the link button using the variant attribute, which can be set to primary (the default), secondary, or minimal.\n import { LinkButton } from '@astrojs/starlight/components';\nContribute  Explore Tracks  Watch Tutorials  Preview   Get started    Explore Tracks   Watch Tutorials    \nAdd icons to link buttons\nInclude an icon in a link",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "n } from '@astrojs/starlight/components';\nContribute  Explore Tracks  Watch Tutorials  Preview   Get started    Explore Tracks   Watch Tutorials    \nAdd icons to link buttons\nInclude an icon in a link button using the icon attribute set to the name of one of ChaiDocs’s built-in icons.\nThe iconPlacement attribute can be used to place the icon before the text by setting it to start (defaults to end).\n import { LinkButton } from '@astrojs/starlight/components';\n  Related: ChaiCode  Preview  Related: ChaiCode     \n Props\nImplementation: LinkButton.astro\nThe  component accepts the following props and also any other  attributes:\nhref\nrequired\ntype: string\nThe URL that the link button points to.\nvariant\ntype: 'primary' | 'secondary' | 'minimal'\ndefault: 'primary'\nThe appearance of the link button.\nSet to primary for a prominent call-to-action link using the theme’s accent color, secondary for a less prominent link, or minimal for a link with minimal styling.\nicon\ntype: string\nA link button ca",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": ".\nSet to primary for a prominent call-to-action link using the theme’s accent color, secondary for a less prominent link, or minimal for a link with minimal styling.\nicon\ntype: string\nA link button can include an icon attribute set to the name of one of ChaiDocs’s built-in icons.\niconPlacement\ntype: 'start' | 'end'\ndefault: 'end'\nDetermines the placement of the icon in relation to the link button text.\n\nSteps\nTo style a numbered list of tasks to create step-by-step guides, use the  component.\n  Preview \n\nCreate project\nRun the init command to create a new Next.js project or to setup an existing one:\n         bun      pnpm      npm      yarn      Terminal windowbunx shadcn@latest init  Terminal windowpnpm dlx shadcn@latest init  Terminal windownpx shadcn@latest init  Terminal windowyarn dlx shadcn@latest init     \nChoose between a Next.js project or a Monorepo.\n\n\nAdd components\nYou can now start adding components to your project.\nThe command above will add the Button component to your p",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "shadcn@latest init     \nChoose between a Next.js project or a Monorepo.\n\n\nAdd components\nYou can now start adding components to your project.\nThe command above will add the Button component to your project. You can then import it like this:\nimport { Button } from \"@/components/ui/button\"\nexport default function Home() {  return (     Click me   )}\n\n  \nImport\nimport { Steps } from '@astrojs/starlight/components';\nUsage\nUse the  component to style numbered lists of tasks.\nThis is useful for more complex step-by-step guides where each step needs to be clearly highlighted.\nWrap  around a standard Markdown ordered list.\nAll the usual Markdown syntax is applicable inside .\n import { Steps } from '@astrojs/starlight/components';\n1. Import the component into your MDX file:    ```js    import { Steps } from '@astrojs/starlight/components';    ```\n2. Wrap `` around your ordered list items.  Preview \n\nImport the component into your MDX file:\nimport { Steps } from '@astrojs/starlight/components';",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "eps } from '@astrojs/starlight/components';    ```\n2. Wrap `` around your ordered list items.  Preview \n\nImport the component into your MDX file:\nimport { Steps } from '@astrojs/starlight/components';\n\n\nWrap  around your ordered list items.\n\n  \n Props\nImplementation: Steps.astro\nThe  component does not accept any props.\n\nCode\nThe  component renders syntax highlighted code.\nIt is useful when using a Markdown code block is not possible, for example, to render data coming from external sources like files, databases, or APIs.\n  Preview example.md  ## Welcome\n  Hello from **space**!  \nImport\nimport { Code } from '@astrojs/starlight/components';\nUsage\nUse the  component to render syntax highlighted code, for example when displaying code fetched from external sources.\nSee the Expressive Code “Code Component” docs for full details on how to use the  component and the list of available props.\n import { Code } from '@astrojs/starlight/components';\nexport const exampleCode = `console.log('This co",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "e Component” docs for full details on how to use the  component and the list of available props.\n import { Code } from '@astrojs/starlight/components';\nexport const exampleCode = `console.log('This could come from a file or CMS!');`;export const fileName = 'example.js';export const highlights = ['file', 'CMS'];\n  Preview example.jsconsole.log('This could come from a file or CMS!');  \nDisplay imported code\nIn MDX files and Astro components, use Vite’s ?raw import suffix to import any code file as a string.\nYou can then pass this imported string to the  component to include it on your page.\n src/content/docs/example.mdximport { Code } from '@astrojs/starlight/components';import importedCode from '/tsconfig.json?raw';\n  Preview tsconfig.json{  \"extends\": \"astro/tsconfigs/strict\",  \"include\": [\".astro/types.d.ts\", \"**/*\"],  \"exclude\": [\"dist\"],  \"compilerOptions\": {    \"baseUrl\": \".\",    \"paths\": {      \"@/*\": [\"./src/*\"]    }  }}  \n Props\nImplementation: Code.astro\nThe  component accepts",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "[\".astro/types.d.ts\", \"**/*\"],  \"exclude\": [\"dist\"],  \"compilerOptions\": {    \"baseUrl\": \".\",    \"paths\": {      \"@/*\": [\"./src/*\"]    }  }}  \n Props\nImplementation: Code.astro\nThe  component accepts all the props documented in the Expressive Code “Code Component” docs.\n\nTabs\nTo create a tabbed interface use the  and  components.\nTabs are useful for grouping equivalent information where a user only needs to see one of several options.\n  Preview       Stars     Moons      Sirius, Vega, Betelgeuse  Io, Europa, Ganymede     \nImport\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\nUsage\nDisplay a tabbed interface using the  and  components.\nEach  must have a label to display to users.\n import { Tabs, TabItem } from '@astrojs/starlight/components';\n     Try all subarrays with nested loops, calculating their sums and tracking the maximum.\n    O(n²) time | O(1) space       Use dynamic programming to track current and max sums efficiently as you iterate.\n    O(n) time | O(1) spac",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "ed loops, calculating their sums and tracking the maximum.\n    O(n²) time | O(1) space       Use dynamic programming to track current and max sums efficiently as you iterate.\n    O(n) time | O(1) space    Preview       Brute Force     Kadane's Algorithm      Try all subarrays with nested loops, calculating their sums and tracking the maximum.O(n²) time | O(1) space  Use dynamic programming to track current and max sums efficiently as you iterate.O(n) time | O(1) space     \nSync tabs\nKeep multiple tab groups synchronized by adding the syncKey attribute.\nAll  on a page with the same syncKey value will display the same active label.\nThis allows your reader to choose once (e.g. their operating system or package manager), and see their choice persisted across page navigation.\nTo synchronize related tabs, add an identical syncKey property to each  component and ensure that they all use the same  labels:\n import { Tabs, TabItem } from '@astrojs/starlight/components';\n_Some stars:_\n Bellatrix,",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "ated tabs, add an identical syncKey property to each  component and ensure that they all use the same  labels:\n import { Tabs, TabItem } from '@astrojs/starlight/components';\n_Some stars:_\n Bellatrix, Rigel, Betelgeuse Pollux, Castor A, Castor B\n_Some exoplanets:_\n HD 34445 b, Gliese 179 b, Wasp-82 b Pollux b, HAT-P-24b, HD 50554 b  Preview Some stars:      Orion     Gemini      Bellatrix, Rigel, Betelgeuse  Pollux, Castor A, Castor B    Some exoplanets:      Orion     Gemini      HD 34445 b, Gliese 179 b, Wasp-82 b  Pollux b, HAT-P-24b, HD 50554 b      \nAdd icons to tabs\nInclude an icon in a tab item using the icon attribute set to the name of one of ChaiDocs’s built-in icons to display an icon next to the label.\n import { Tabs, TabItem } from '@astrojs/starlight/components';\n     Sirius, Vega, Betelgeuse       Io, Europa, Ganymede    Preview        Stars      Moons      Sirius, Vega, Betelgeuse  Io, Europa, Ganymede     \n Props\nImplementation: Tabs.astro\nThe  component groups multipl",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "Vega, Betelgeuse       Io, Europa, Ganymede    Preview        Stars      Moons      Sirius, Vega, Betelgeuse  Io, Europa, Ganymede     \n Props\nImplementation: Tabs.astro\nThe  component groups multiple  components together and accepts the following props:\nsyncKey\ntype: string\nA key used to keep multiple tab groups synchronized across multiple pages.\n Props\nImplementation: TabItem.astro\nA set of tabs is composed of tab items, each with the following props:\nlabel\nrequired\ntype: string\nA tab item must include a label attribute set to the text that will be displayed in the tab.\nicon\ntype: string\nEach tab item can include an icon attribute set to the name of one of ChaiCode’s built-in icons to display an icon next to the label.\n\nCode Tabs\nDisplays a list of code blocks with tabs.\n  Preview        index.js     index.ts      const greet = () => {  console.log('Hello, JS!')}  const greet = (): void => {  console.log('Hello, TS!')}      \nImport\nimport { CodeTabItem, CodeTabs } from '@/component",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "index.js     index.ts      const greet = () => {  console.log('Hello, JS!')}  const greet = (): void => {  console.log('Hello, TS!')}      \nImport\nimport { CodeTabItem, CodeTabs } from '@/components/code'\nUsage\nDisplay a tabbed interface using the  and  components. Each  must have a label to display to users.\n import { CodeTabs, CodeTabItem } from '@/components/code'\n {    let maxSum = -Infinity;\n    for (let i = 0; i < arr.length; i++) {      let currentSum = 0;\n      for (let j = i; j < arr.length; j++) {        currentSum += arr[j];        maxSum = Math.max(maxSum, currentSum);      }    }\n    return maxSum;}`}/>\n {    let currentSum = arr[0];    let maxSum = arr[0];\n    for (let i = 1; i < arr.length; i++) {      currentSum = Math.max(arr[i], currentSum + arr[i]);      maxSum = Math.max(maxSum, currentSum);    }\n    return maxSum;}`}/>  Preview        Brute Force     Kadane's Algorithm      const maxSubarraySumBruteForce = (arr: number[]): number => {  let maxSum = -Infinity;",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": ".max(maxSum, currentSum);    }\n    return maxSum;}`}/>  Preview        Brute Force     Kadane's Algorithm      const maxSubarraySumBruteForce = (arr: number[]): number => {  let maxSum = -Infinity;\n  for (let i = 0; i < arr.length; i++) {    let currentSum = 0;\n    for (let j = i; j < arr.length; j++) {      currentSum += arr[j];      maxSum = Math.max(maxSum, currentSum);    }  }\n  return maxSum;}  const maxSubarraySumKadane = (arr: number[]): number => {  let currentSum = arr[0];  let maxSum = arr[0];\n  for (let i = 1; i < arr.length; i++) {    currentSum = Math.max(arr[i], currentSum + arr[i]);    maxSum = Math.max(maxSum, currentSum);  }\n  return maxSum;}      \nSync tabs\nKeep multiple CodeTab groups synchronized by adding the syncKey attribute.\nAll  on a page with the same syncKey value will display the same active label. This allows your readers to choose once (e.g., their preferred programming language) and see their choice persisted across the page and during navigation.\nTo sync",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "e will display the same active label. This allows your readers to choose once (e.g., their preferred programming language) and see their choice persisted across the page and during navigation.\nTo synchronize related tabs, add an identical syncKey property to each  component and ensure they all use the same  labels:\n import { CodeTabs, CodeTabItem } from '@components/code';\n_String Manipulation Examples:_\n\n {    return text.toUpperCase();  }`}/>\n\n\n_Array/List Operations:_\n\n {    return arr.reduce((sum, num) => sum + num, 0);  }`}/>\n\n  Preview String Manipulation Examples:       JavaScript     Python      const toUpper = (text) => {  return text.toUpperCase();}  # Convert to uppercasedef to_upper(text):    return text.upper()     Array/List Operations:       JavaScript     Python      const sumArray = (arr) => {  return arr.reduce((sum, num) => sum + num, 0);}  # Sum a listdef sum_list(lst):    return sum(lst)       \n Props\nImplementation: CodeTabs.astro\nThe  component groups multiple  c",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "sumArray = (arr) => {  return arr.reduce((sum, num) => sum + num, 0);}  # Sum a listdef sum_list(lst):    return sum(lst)       \n Props\nImplementation: CodeTabs.astro\nThe  component groups multiple  components together and accepts the following props:\nsyncKey\ntype: string\nA key used to keep multiple tab groups synchronized across multiple pages.\n Props\nImplementation: CodeTabItem.astro\nThe  component accepts the following props, as well as all other  component props:\nlabel\nrequired\ntype: string\nA CodeTab item must include a label attribute set to the text that will be displayed in the tab.\n\nCode Package Managers\nNow a days we have so many package managers to choose from. This component helps you to display a list of commands for different package managers.\n  Preview          bun      pnpm      npm      yarn      Terminal windowbun add -D prettier  Terminal windowpnpm add -D prettier  Terminal windownpm install -D prettier  Terminal windowyarn add -D prettier       \nImport\nimport { Code",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "npm      yarn      Terminal windowbun add -D prettier  Terminal windowpnpm add -D prettier  Terminal windownpm install -D prettier  Terminal windowyarn add -D prettier       \nImport\nimport { CodePackageManagers } from '@/components/code'\nUsage\nDisplays a list of commands for different package managers using  component.  must have a packages attribute set to the name of the package(s) to install.\n import { CodePackageManagers } from '@/components/code'\n  Preview          bun      pnpm      npm      yarn      Terminal windowbun add express  Terminal windowpnpm add express  Terminal windownpm install express  Terminal windowyarn add express       \nDev dependencies\nYou can install the package as a dev dependency by setting the dev attribute to true.\n import { CodePackageManagers } from '@/components/code'  Preview          bun      pnpm      npm      yarn      Terminal windowbun add -D typescript  Terminal windowpnpm add -D typescript  Terminal windownpm install -D typescript  Termina",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "/components/code'  Preview          bun      pnpm      npm      yarn      Terminal windowbun add -D typescript  Terminal windowpnpm add -D typescript  Terminal windownpm install -D typescript  Terminal windowyarn add -D typescript       \nExecute a command\nYou can execute a command by setting the commandType attribute to \"execute\" and passing the args attribute to the command.\n import { CodePackageManagers } from '@/components/code'\n\n  Preview          bun      pnpm      npm      yarn      Terminal windowbunx shadcn@latest init  Terminal windowpnpm dlx shadcn@latest init  Terminal windownpx shadcn@latest init  Terminal windowyarn dlx shadcn@latest init       \nCustom package managers\nYou can customize the package managers to use by setting the packageManagers attribute to an array of package manager names.\n import { CodePackageManagers } from '@/components/code'\n  Preview          pnpm      bun      deno      Terminal windowpnpm add pino  Terminal windowbun add pino  Terminal windowdeno",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "manager names.\n import { CodePackageManagers } from '@/components/code'\n  Preview          pnpm      bun      deno      Terminal windowpnpm add pino  Terminal windowbun add pino  Terminal windowdeno add pino       \nCustom command\nYou can create a custom command by setting the commandType attribute to \"custom\" and passing the args attribute.\n import { CodePackageManagers } from '@/components/code'  Preview          bun      pnpm      Terminal windowbun create hono@latest  Terminal windowpnpm create hono@latest       \n Props\nImplementation: CodePackageManagers.astro\nThe  component accepts the following props:\npackageManagers\ntype: 'pnpm' | 'npm' | 'yarn' | 'bun' | 'deno'\ndefault: ['bun', 'pnpm', 'npm', 'yarn']\nThe package managers to use.\npackages\ntype: string\nThe packages to install. If you want to install multiple packages, you can pass a space-separated string.\ndev\ntype: boolean \ndefault: false\nWhether to install the packages as dev dependencies.\ncommandType\ntype: 'install' | 'execut",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "u want to install multiple packages, you can pass a space-separated string.\ndev\ntype: boolean \ndefault: false\nWhether to install the packages as dev dependencies.\ncommandType\ntype: 'install' | 'execute' | 'custom' \ndefault: 'install'\nThe type of command to generate. Use 'install' for package installation commands, 'execute' for running commands and 'custom' for custom commands.\nargs\ntype: string\nThe arguments to pass to the command. This prop is only used when commandType is set to 'execute' or 'custom'.\n\nYouTube\nThe  component generates an embed using the lite-youtube-embed custom element that will load YouTube’s  only when a user clicks play.\nYouTube embeds will always require some JavaScript, but this is one of the most minimal and performant ways to embed a YouTube video.\n  Preview   Play      \nImport\nimport { YouTube } from 'astro-embed'\nUsage\nDisplays a YouTube video using the  component. The  component must have an id attribute set to the video ID or URL.\n import { YouTube } fro",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "lay      \nImport\nimport { YouTube } from 'astro-embed'\nUsage\nDisplays a YouTube video using the  component. The  component must have an id attribute set to the video ID or URL.\n import { YouTube } from 'astro-embed'\n  Preview   Play     \nCustom Poster\nYou can provide an alternative poster image by passing in a URL to the poster prop.\nFor example, this is the same video as above but with a custom poster image:\n import { YouTube } from 'astro-embed'\n  Preview   Play     \nCustom Poster Quality\nWhen using the default YouTube poster image, set the posterQuality to change the size of the placeholder image. This can be useful if displaying the embed at very large or very small sizes.\nThere are four possible values:\nposterQualityresolutionlow120pxdefault480pxhigh640pxmax1280px\n\nWe recommend using max for the best quality. For example :\n import { YouTube } from 'astro-embed'\n  Preview   Play     \nPlayer Parameters\nYou can pass in a params prop to set the YouTube player parameters. This looks li",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "max for the best quality. For example :\n import { YouTube } from 'astro-embed'\n  Preview   Play     \nPlayer Parameters\nYou can pass in a params prop to set the YouTube player parameters. This looks like a series of URL search params.\nFor example, the following params value sets the start and end times of the video playback:\n import { YouTube } from 'astro-embed'\n  Preview   Play     \nCustom Title\nYou can provide a custom title for the video by passing in a title prop.\n import { YouTube } from 'astro-embed'\n  Preview   Play     \n Props\nImplementation: YouTube.astro\nThe  component accepts the following props:\nid\ntype: string\nThe YouTube video ID or URL.\nposter\ntype: string\nThe URL of the poster image to use.\nposterQuality\ntype: 'low' | 'default' | 'high' | 'max' \ndefault: 'default'\nThe quality of the poster image.\nparams\ntype: string\nThe URL search params to pass to the YouTube player.\ntitle\ntype: string\nThe title of the video.\n\nLink Preview\nThe  component embeds the Open Graph media and",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "ty of the poster image.\nparams\ntype: string\nThe URL search params to pass to the YouTube player.\ntitle\ntype: string\nThe title of the video.\n\nLink Preview\nThe  component embeds the Open Graph media and metadata for a URL in your page.\n  Preview Welcome, World | Astro astro.buildAstro's new look is live! Learn all about our new brand including the design process, our new logo, typeface, color palette, and mascot.  \nImport\nimport { LinkPreview } from 'astro-embed'\nUsage\nDisplays a link preview using the  component. The  component must have an id attribute set to the URL of the page to embed.\n import { LinkPreview } from 'astro-embed'\n  Preview Lee Robinson leerob.comFrontend developer, optimist, community builder.  \nVideo metadata\nIf a URL’s tags include og:video metadata,  will render a video player instead of an image.\n import { LinkPreview } from 'astro-embed'  Preview India Chai GIF by bypriyashah - Find & Share on GIPHY giphy.comDiscover & share this India Chai GIF by bypriyashah wit",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "o player instead of an image.\n import { LinkPreview } from 'astro-embed'  Preview India Chai GIF by bypriyashah - Find & Share on GIPHY giphy.comDiscover & share this India Chai GIF by bypriyashah with everyone you know. GIPHY is how you search, share, discover, and create GIFs.  \nHiding Media\nIf a URL’s image or video is unwanted, add hideMedia as a prop.\n import { LinkPreview } from 'astro-embed'\n  Preview Hitesh Choudhary Home page hitesh.aiA home page of Hitesh Choudhary  \nLimitations\nThe available Open Graph metadata varies from site to site. If a site doesn’t provide og:image metadata, no image will be displayed, only the page title and description.\nIf no title is detected or the metadata collection step fails,  will display only the original link URL.\n Props\nImplementation: LinkPreview.astro\nThe  component accepts the following props:\nid\ntype: string\nThe URL of the page to embed.\nhideMedia\ntype: boolean \ndefault: false\nTo hide the media.\nStart your journey with ChaiCode \nAll of",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "iew.astro\nThe  component accepts the following props:\nid\ntype: string\nThe URL of the page to embed.\nhideMedia\ntype: boolean \ndefault: false\nTo hide the media.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 22, 2025   PreviousMDX Crash CourseNext Contributing Workflow    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/"
  },
  {
    "content": "404 | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                               404 This page isn’t in our encyclopedia. Take me home.           \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/components-library/contribute/starter-kit/components"
  },
  {
    "content": "404 | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                               404 This page isn’t in our encyclopedia. Take me home.           \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/components/cards/"
  },
  {
    "content": "404 | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                               404 This page isn’t in our encyclopedia. Take me home.           \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/page-content/"
  },
  {
    "content": "Tracks | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                             Start Learning   Web Dev full-stack track.           DevOps for dummies.          Youtube guides for video courses.           Data Science the future is data.   \nYour browser does not support the video tag.\n      Gen Ai the next big thing.             more coming soon...       \n  Brought to you by ChaiCode            Chai aur Code is an unique initiative by Hitesh Choudhary where he mentors people who want to learn programming and grow in the field.Learn about ChaiCode         \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/tracks"
  },
  {
    "content": "404 | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                               404 This page isn’t in our encyclopedia. Take me home.           \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/components/link-cards/"
  },
  {
    "content": "Structure | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Project contents    Files and directories    Naming Conventions    On this page   Overview    Project contents    Files and directories    Naming Conventions           Structure      This guide will show you how ChaiDocs are organized and what the different files do.\nChaiDocs generally follow the same file and directory structure as other Astro projects. See Astro’s project structure documentation for more detail.\nProject contents\nThe following is a basic structure of ChaiDocs.\nDirector",
    "source": "https://docs.chaicode.com/contribute/starter-kit/project-structure/"
  },
  {
    "content": "ow the same file and directory structure as other Astro projects. See Astro’s project structure documentation for more detail.\nProject contents\nThe following is a basic structure of ChaiDocs.\nDirectorypublic/\nfavicon.svgDirectorysrc/\nDirectoryassets/\nDirectorybranding/\nchai.svgchaidocs.pngDirectorydocs/\nDirectoryweb-dev/\nDirectoryjavascript/\nlexical-scope.pngDirectorywindows/\nfile-explorer.png…Directorycomponents/\nDirectorybranding/\nabout-us.astrofooter-links.astrofooter.astroDirectorycode/\ncode-tabs.astrobutton.astroDirectorycontent/\nDirectorydocs/\nDirectorycontribute/\nguidelines.mdxDirectoryStarter Kit/components.mdxDirectoryweb-dev/\nDirectoryHTML/…DirectoryCSS/…DirectoryJavascript/\ndata-types.mdx404.mdxindex.mdxtracks.mdxcontent.config.tsastro.config.mjspackage.jsontsconfig.json\nFiles and directories\n\nastro.config.mjs — The Astro configuration file.\nsrc/content.config.ts — Content collections configuration file.\nsrc/content/docs/ — Content files. ChaiDocs turns each .md or .mdx file",
    "source": "https://docs.chaicode.com/contribute/starter-kit/project-structure/"
  },
  {
    "content": "nd directories\n\nastro.config.mjs — The Astro configuration file.\nsrc/content.config.ts — Content collections configuration file.\nsrc/content/docs/ — Content files. ChaiDocs turns each .md or .mdx file in this directory into a page on your site.\nsrc/ — Other source code and files (components, styles, images, etc.) for your project.\npublic/ — Static assets (fonts, favicon, PDFs, etc.) that will not be processed by Astro.\n\nNaming Conventions\n\nFile Names: Use kebab-case for all file names.\nComponent Names: Use PascalCase for component names.\nVariables and Functions: Use camelCase for variables and functions.\n\nNote: Sidebar groups are autogenerated from the directory structure of the content/docs. Therefore, directory names use capitalized, spaced words which are then displayed as labels in the sidebar. For example, content/docs/contribute/Starter Kit/ will be displayed as Starter Kit in the sidebar.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel fr",
    "source": "https://docs.chaicode.com/contribute/starter-kit/project-structure/"
  },
  {
    "content": "sidebar. For example, content/docs/contribute/Starter Kit/ will be displayed as Starter Kit in the sidebar.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousGuidelinesNext Managing Assets    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/project-structure/"
  },
  {
    "content": "MDX for Beginners | Chai aur Docs\n  Skip to content        Chai aur Docs        Search  CtrlK      Cancel             YouTube Instagram LinkedIn GitHub X                                            Guidelines       Starter Kit       Project Structure    Managing Assets    Adding New Content    Authoring Content    Page Metadata    MDX Crash Course    Components    Contributing Workflow    Congratulations            YouTube Instagram LinkedIn GitHub X                                   On this page    Overview    Markdown 101     Basic Syntax    Extended Syntax    Deviations from Markdown      JSX     Expressions    ESM    Deviations from JSX      Common MDX gotchas     Blank lines in JSX spans    GREATER THAN (>) seen as block quote      On this page   Overview    Markdown 101     Basic Syntax    Extended Syntax    Deviations from Markdown      JSX     Expressions    ESM    Deviations from JSX      Common MDX gotchas     Blank lines in JSX spans    GREATER THAN (>) seen as block quote",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  },
  {
    "content": "tax    Extended Syntax    Deviations from Markdown      JSX     Expressions    ESM    Deviations from JSX      Common MDX gotchas     Blank lines in JSX spans    GREATER THAN (>) seen as block quote             MDX for Beginners      The MDX syntax combines markdown with JSX. This gives us something along the lines of literate programming. It also gives us an odd mix of two languages: markdown is whitespace sensitive and forgiving (what you type may not exactly work but it won’t crash) whereas JavaScript is whitespace insensitive and unforgiving (it does crash on typos).\nThe crash course walks you through combination of these two worlds to create more engaging documentation, blog posts, or whatever you’re working on.\nTo write and enjoy MDX, you should be familiar with both markdown and JavaScript (specifically JSX).\nMarkdown 101\nMarkdown often feels more natural to type than HTML or JSX for common things like emphasis or headings. Following Markdown cheat sheet provides a quick overvie",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  },
  {
    "content": "aScript (specifically JSX).\nMarkdown 101\nMarkdown often feels more natural to type than HTML or JSX for common things like emphasis or headings. Following Markdown cheat sheet provides a quick overview of all the Markdown syntax elements.\nIt can’t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.\nBasic Syntax\nThese are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements.\nElementMarkdown SyntaxHeading# H1## H2### H3Bold**bold text**Italic*italicized text*Blockquote> blockquoteOrdered List1. First item2. Second item3. Third itemUnordered List- First item- Second item- Third itemCode`code`Horizontal Rule---Link[ChaiDocs](https://docs.chaicode.com)Image![chai mascot](chai.png)\n\nExtended Syntax\nThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\nElementMarkdo",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  },
  {
    "content": "cs.chaicode.com)Image![chai mascot](chai.png)\n\nExtended Syntax\nThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\nElementMarkdown SyntaxTable| Syntax      | Description || ----------- | ----------- || Header      | Title       || Paragraph   | Text        |Fenced Code Block```json{  \"firstName\": \"John\",  \"lastName\": \"Smith\",  \"age\": 25,}```FootnoteHere's a sentence with a footnote. [^1]\n[^1]: This is the footnote.Heading ID### My Great Heading {#custom-id}Definition Listterm: definitionStrikethrough~~The world is flat.~~Task List- [x] Write the press release- [ ] Update the website- [ ] Contact the mediaEmoji\n(see also Copying and Pasting Emoji)That is so funny! :joy:SubscriptH~2~OSuperscriptX^2^\nDeviations from Markdown\nMDX adds constructs to Markdown but also prohibits certain normal Markdown\nconstructs.\nHTML\nWhether block or inline, HTML in Markdown is not supported.\nCharacter data, processing instructions, dec",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  },
  {
    "content": "own\nMDX adds constructs to Markdown but also prohibits certain normal Markdown\nconstructs.\nHTML\nWhether block or inline, HTML in Markdown is not supported.\nCharacter data, processing instructions, declarations, and comments are not\nsupported at all.\nInstead of HTML elements, use JSX elements.\nIncorrect:\n# Hello, world!\nCorrect:\n# Hello, world!\nIndented code\nIndentation to create code blocks is not supported.\nInstead, use fenced code blocks.\nThe reason for this change is so that elements can be indented.\nIncorrect:\n    console.log(1)\nCorrect:\n```jsconsole.log(1)```\nAutolinks\nAutolinks are not supported. Instead, use links or references.\nThe reason for this change is because whether something is an element (whether\nHTML or JSX) or an autolink is ambiguous (Markdown normally treats ,\n, or  as links).\nIncorrect:\nSee  for more information\nCorrect:\nSee [example.com](https://example.com) for more information.\nErrors\nWhereas all Markdown is valid, incorrect MDX will crash.\nJSX\nMore practically",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  },
  {
    "content": "links).\nIncorrect:\nSee  for more information\nCorrect:\nSee [example.com](https://example.com) for more information.\nErrors\nWhereas all Markdown is valid, incorrect MDX will crash.\nJSX\nMore practically MDX can be explained as a format that combines markdown with JSX and looks as follows:\n# Hello, world!\n  > Some notable things in a block quote!\nThe heading and block quote are markdown, while those HTML-like tags are JSX. Markdown often feels more natural to type than HTML or JSX for common things like emphasis or headings. JSX is an extension to JavaScript that looks like HTML but makes it convenient to use components (reusable things).\nThis example uses className on the . That’s because it was written for React and React expects classes that way. Other frameworks, such as Vue and Preact, expect classes to be defined differently, so note that there are some differences in how JSX has to be authored depending on what tools it’s used with.\nExpressions\nMDX also supports JavaScript expressi",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  },
  {
    "content": "xpect classes to be defined differently, so note that there are some differences in how JSX has to be authored depending on what tools it’s used with.\nExpressions\nMDX also supports JavaScript expressions inside curly braces:\nTwo 🍰 is: {Math.PI * 2}\nExpressions can contain whole JavaScript programs as long as they’re (wrapped in) an expression that evaluates to something that can be rendered. You can use an IIFE like so:\n{(() =>  {  const guess = Math.random()\n  return guess > 0.5;})()}\nExpressions can be empty or contain just a comment:\n{/* A comment! */}\nESM\nMDX supports import and export statements from JavaScript as well. These ESM features can be used within MDX to define things:\nimport {Chart} from './chart.ts'import population from './population.ts'export const pi = 3.14\n\nDeviations from JSX\nMDX removes certain constructs from JSX, because JSX is typically mixed with\nJavaScript whereas MDX is usable without it.\nComments\nJavaScript comments in JSX are not supported.\nIncorrect:\n\nCo",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  },
  {
    "content": "from JSX\nMDX removes certain constructs from JSX, because JSX is typically mixed with\nJavaScript whereas MDX is usable without it.\nComments\nJavaScript comments in JSX are not supported.\nIncorrect:\n\nCorrect:\n\nElement or fragment attribute values\nJSX elements or JSX fragments as attribute values are not supported. The reason for this change is that it would be confusing whether Markdown would\nwork.\nIncorrect:\nVenus />Pluto />\nCorrect:\n\nCommon MDX gotchas\nMarkdown first looks for blocks (such as a heading) and only later looks for\nspans (such as emphasis) in those blocks.\nThis becomes a problem typically in the two cases listed below.\nHowever, as MDX has parse errors, parsing will crash, and an error will be\npresented.\nBlank lines in JSX spans\nIncorrect:\nThe plot for the movie was, wait for it…\n…that she didn’t die!\nCorrect:\nThe plot for the movie was, wait for it……that she didn’t die!\nGREATER THAN (>) seen as block quote\nIncorrect:\nHere’s a cute photo of my cat: \nCorrect:\nHere’s a cute p",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  },
  {
    "content": "t…\n…that she didn’t die!\nCorrect:\nThe plot for the movie was, wait for it……that she didn’t die!\nGREATER THAN (>) seen as block quote\nIncorrect:\nHere’s a cute photo of my cat: \nCorrect:\nHere’s a cute photo of my cat: \nOr as a block (GREATER THAN (>) is fine in JSX blocks):\nHere’s a cute photo of my cat:\n\nNow that you’re familiar with Markdown and JSX (MDX), let’s see it in action in our component library.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n     \nComplied by: Akash Kadlag Last updated: Apr 13, 2025   PreviousPage MetadataNext Components    \nContribute\n    \nCommunity\n   \nSponsor",
    "source": "https://docs.chaicode.com/contribute/starter-kit/mdx-crash-course"
  }
]